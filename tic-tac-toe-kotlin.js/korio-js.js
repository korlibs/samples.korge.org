(function (root, factory) {
  if (typeof define === 'function' && define.amd)
    define(['exports', 'kotlin'], factory);
  else if (typeof exports === 'object')
    factory(module.exports, require('kotlin'));
  else {
    if (typeof kotlin === 'undefined') {
      throw new Error("Error loading module 'korio-js'. Its dependency 'kotlin' was not found. Please, check whether 'kotlin' is loaded prior to 'korio-js'.");
    }
    root['korio-js'] = factory(typeof this['korio-js'] === 'undefined' ? {} : this['korio-js'], kotlin);
  }
}(this, function (_, Kotlin) {
  'use strict';
  var $$importsForInline$$ = _.$$importsForInline$$ || (_.$$importsForInline$$ = {});
  var CoroutineImpl = Kotlin.kotlin.coroutines.experimental.CoroutineImpl;
  var COROUTINE_SUSPENDED = Kotlin.kotlin.coroutines.experimental.intrinsics.COROUTINE_SUSPENDED;
  var Unit = Kotlin.kotlin.Unit;
  var Any = Object;
  var defineInlineFunction = Kotlin.defineInlineFunction;
  var wrapFunction = Kotlin.wrapFunction;
  var CoroutineContext$Key = Kotlin.kotlin.coroutines.experimental.CoroutineContext.Key;
  var AbstractCoroutineContextElement = Kotlin.kotlin.coroutines.experimental.AbstractCoroutineContextElement;
  var Continuation = Kotlin.kotlin.coroutines.experimental.Continuation;
  var LinkedHashSet_init = Kotlin.kotlin.collections.LinkedHashSet_init_287e2$;
  var ArrayList_init = Kotlin.kotlin.collections.ArrayList_init_ww73n8$;
  var RuntimeException = Kotlin.kotlin.RuntimeException;
  var UnsupportedOperationException = Kotlin.kotlin.UnsupportedOperationException;
  var Throwable = Error;
  var Enum = Kotlin.kotlin.Enum;
  var IllegalStateException = Kotlin.kotlin.IllegalStateException;
  var NoSuchElementException = Kotlin.kotlin.NoSuchElementException;
  var toList = Kotlin.kotlin.collections.toList_7wnvza$;
  var startCoroutine = Kotlin.kotlin.coroutines.experimental.startCoroutine_uao1qo$;
  var startCoroutine_0 = Kotlin.kotlin.coroutines.experimental.startCoroutine_xtwlez$;
  var createCoroutine = Kotlin.kotlin.coroutines.experimental.createCoroutine_xtwlez$;
  var createCoroutine_0 = Kotlin.kotlin.coroutines.experimental.createCoroutine_uao1qo$;
  var lazy = Kotlin.kotlin.lazy_klfg04$;
  var copyOf = Kotlin.kotlin.collections.copyOf_mrm5p$;
  var StringBuilder_init = Kotlin.kotlin.text.StringBuilder_init_za3lpa$;
  var toIntOrNull = Kotlin.kotlin.text.toIntOrNull_6ic1pp$;
  var get_indices = Kotlin.kotlin.collections.get_indices_964n91$;
  var IntCompanionObject = Kotlin.kotlin.js.internal.IntCompanionObject;
  var addAll = Kotlin.kotlin.collections.addAll_ipc267$;
  var last = Kotlin.kotlin.collections.last_2p1efm$;
  var MutableCollection = Kotlin.kotlin.collections.MutableCollection;
  var MutableIterator = Kotlin.kotlin.collections.MutableIterator;
  var MutableIterable = Kotlin.kotlin.collections.MutableIterable;
  var to = Kotlin.kotlin.to_ujzrz7$;
  var firstOrNull = Kotlin.kotlin.collections.firstOrNull_2p1efm$;
  var Iterable = Kotlin.kotlin.collections.Iterable;
  var LinkedHashMap_init = Kotlin.kotlin.collections.LinkedHashMap_init_q3lmfv$;
  var Exception = Kotlin.kotlin.Exception;
  var println = Kotlin.kotlin.io.println_s8jyv4$;
  var Annotation = Kotlin.kotlin.Annotation;
  var KClass = Kotlin.kotlin.reflect.KClass;
  var contentEquals = Kotlin.arrayEquals;
  var contentHashCode = Kotlin.arrayHashCode;
  var contentToString = Kotlin.arrayToString;
  var StringBuilder = Kotlin.kotlin.text.StringBuilder;
  var print = Kotlin.kotlin.io.print_s8jyv4$;
  var Map = Kotlin.kotlin.collections.Map;
  var List = Kotlin.kotlin.collections.List;
  var listOf = Kotlin.kotlin.collections.listOf_mh5how$;
  var toLongOrNull = Kotlin.kotlin.text.toLongOrNull_pdl1vz$;
  var toIntOrNull_0 = Kotlin.kotlin.text.toIntOrNull_pdl1vz$;
  var toDoubleOrNull = Kotlin.kotlin.text.toDoubleOrNull_pdl1vz$;
  var first = Kotlin.kotlin.text.first_gw00vp$;
  var DoubleCompanionObject = Kotlin.kotlin.js.internal.DoubleCompanionObject;
  var Regex = Kotlin.kotlin.text.Regex_61zpoe$;
  var startsWith = Kotlin.kotlin.text.startsWith_sgbm27$;
  var toInt = Kotlin.kotlin.text.toInt_pdl1vz$;
  var substring = Kotlin.kotlin.text.substring_fc3b62$;
  var split = Kotlin.kotlin.text.split_o64adg$;
  var split_0 = Kotlin.kotlin.text.split_ip8yn$;
  var trimStart = Kotlin.kotlin.text.trimStart_wqw3xr$;
  var contains = Kotlin.kotlin.text.contains_li3zpu$;
  var toBits = Kotlin.floatToBits;
  var toBits_0 = Kotlin.doubleToBits;
  var round = Kotlin.kotlin.math.round_14dthe$;
  var listOf_0 = Kotlin.kotlin.collections.listOf_i5x0yv$;
  var toMap = Kotlin.kotlin.collections.toMap_6hr0sd$;
  var equals = Kotlin.kotlin.text.equals_igcy3c$;
  var first_0 = Kotlin.kotlin.collections.first_2p1efm$;
  var plus = Kotlin.kotlin.collections.plus_mydzjv$;
  var toSet = Kotlin.kotlin.collections.toSet_7wnvza$;
  var toList_0 = Kotlin.kotlin.collections.toList_us0mfu$;
  var joinToString = Kotlin.kotlin.collections.joinToString_fmv235$;
  var filterNotNull = Kotlin.kotlin.collections.filterNotNull_m3lr2h$;
  var until = Kotlin.kotlin.ranges.until_dqglrj$;
  var slice = Kotlin.kotlin.collections.slice_6bjbi1$;
  var removeAll = Kotlin.kotlin.collections.removeAll_qafx1e$;
  var ArrayList_init_0 = Kotlin.kotlin.collections.ArrayList_init_mqih57$;
  var Boolean_0 = Boolean;
  var Byte = Number;
  var Char = Kotlin.BoxedChar;
  var toBoxedChar = Kotlin.toBoxedChar;
  var Long = Kotlin.Long;
  var Set = Kotlin.kotlin.collections.Set;
  var MutableList = Kotlin.kotlin.collections.MutableList;
  var toMutableList = Kotlin.kotlin.collections.toMutableList_4c7yge$;
  var String_0 = String;
  var CharRange = Kotlin.kotlin.ranges.CharRange;
  var unboxChar = Kotlin.unboxChar;
  var withIndex = Kotlin.kotlin.collections.withIndex_7wnvza$;
  var iterator = Kotlin.kotlin.text.iterator_gw00vp$;
  var toInt_0 = Kotlin.kotlin.text.toInt_6ic1pp$;
  var plus_0 = Kotlin.kotlin.collections.plus_2ws7j4$;
  var plus_1 = Kotlin.kotlin.collections.plus_qloxvw$;
  var IllegalArgumentException = Kotlin.kotlin.IllegalArgumentException;
  var toList_1 = Kotlin.kotlin.collections.toList_abgq59$;
  var firstOrNull_0 = Kotlin.kotlin.collections.firstOrNull_7wnvza$;
  var toLong = Kotlin.kotlin.text.toLong_pdl1vz$;
  var toDouble = Kotlin.kotlin.text.toDouble_pdl1vz$;
  var first_1 = Kotlin.kotlin.collections.first_7wnvza$;
  var Iterator = Kotlin.kotlin.collections.Iterator;
  var repeat = Kotlin.kotlin.text.repeat_94bcnn$;
  var isWhitespace = Kotlin.kotlin.text.isWhitespace_myv2d0$;
  var replace = Kotlin.kotlin.text.replace_680rmw$;
  var last_0 = Kotlin.kotlin.collections.last_964n91$;
  var Pair = Kotlin.kotlin.Pair;
  var indexOf = Kotlin.kotlin.collections.indexOf_jlnu8a$;
  var capitalize = Kotlin.kotlin.text.capitalize_pdl1vz$;
  var drop = Kotlin.kotlin.collections.drop_ba2ldo$;
  var zip = Kotlin.kotlin.collections.zip_45mdf7$;
  var Regex_0 = Kotlin.kotlin.text.Regex;
  var Comparable = Kotlin.kotlin.Comparable;
  var arrayListOf = Kotlin.kotlin.collections.arrayListOf_i5x0yv$;
  var MutableMap = Kotlin.kotlin.collections.MutableMap;
  var indexOf_0 = Kotlin.kotlin.text.indexOf_l5u8uk$;
  var toCollection = Kotlin.kotlin.collections.toCollection_5n4o2z$;
  var sorted = Kotlin.kotlin.collections.sorted_exjks8$;
  var reversed = Kotlin.kotlin.collections.reversed_7wnvza$;
  var distinct = Kotlin.kotlin.collections.distinct_7wnvza$;
  var joinToString_0 = Kotlin.kotlin.collections.joinToString_cgipc5$;
  var indexOf_1 = Kotlin.kotlin.text.indexOf_8eortd$;
  var get_lastIndex = Kotlin.kotlin.text.get_lastIndex_gw00vp$;
  var lastIndexOf = Kotlin.kotlin.text.lastIndexOf_8eortd$;
  var get_indices_0 = Kotlin.kotlin.collections.get_indices_355ntz$;
  var get_indices_1 = Kotlin.kotlin.collections.get_indices_i2lc79$;
  var get_indices_2 = Kotlin.kotlin.collections.get_indices_tmsbgo$;
  var get_indices_3 = Kotlin.kotlin.collections.get_indices_se6h4x$;
  var get_indices_4 = Kotlin.kotlin.collections.get_indices_rjqryz$;
  var get_indices_5 = Kotlin.kotlin.collections.get_indices_bvy38s$;
  var endsWith = Kotlin.kotlin.text.endsWith_sgbm27$;
  var experimental = Kotlin.kotlin.coroutines.experimental;
  var AbstractIterator = Kotlin.kotlin.collections.AbstractIterator;
  var toLongArray = Kotlin.kotlin.collections.toLongArray_558emf$;
  var substringBefore = Kotlin.kotlin.text.substringBefore_8cymmc$;
  var trim = Kotlin.kotlin.text.trim_wqw3xr$;
  var startsWith_0 = Kotlin.kotlin.text.startsWith_7epoxm$;
  var get_indices_6 = Kotlin.kotlin.text.get_indices_gw00vp$;
  var replace_0 = Kotlin.kotlin.text.replace_r2fvfm$;
  var substringAfterLast = Kotlin.kotlin.text.substringAfterLast_8cymmc$;
  var substringBeforeLast = Kotlin.kotlin.text.substringBeforeLast_8cymmc$;
  var substringAfter = Kotlin.kotlin.text.substringAfter_8cymmc$;
  var contains_0 = Kotlin.kotlin.text.contains_sgbm27$;
  var trimEnd = Kotlin.kotlin.text.trimEnd_wqw3xr$;
  var endsWith_0 = Kotlin.kotlin.text.endsWith_7epoxm$;
  var toTypedArray = Kotlin.kotlin.collections.toTypedArray_964n91$;
  var toList_2 = Kotlin.kotlin.collections.toList_964n91$;
  AsyncSignal$Node.prototype = Object.create(LinkedList2$Node.prototype);
  AsyncSignal$Node.prototype.constructor = AsyncSignal$Node;
  CoroutineCancelContext.prototype = Object.create(AbstractCoroutineContextElement.prototype);
  CoroutineCancelContext.prototype.constructor = CoroutineCancelContext;
  EventLoopCoroutineContext.prototype = Object.create(AbstractCoroutineContextElement.prototype);
  EventLoopCoroutineContext.prototype.constructor = EventLoopCoroutineContext;
  EventLoopFactoryTest.prototype = Object.create(EventLoopFactory.prototype);
  EventLoopFactoryTest.prototype.constructor = EventLoopFactoryTest;
  EventLoopTest.prototype = Object.create(EventLoop.prototype);
  EventLoopTest.prototype.constructor = EventLoopTest;
  Signal$Node.prototype = Object.create(LinkedList2$Node.prototype);
  Signal$Node.prototype.constructor = Signal$Node;
  SuspendingIteratorCoroutine$State.prototype = Object.create(Enum.prototype);
  SuspendingIteratorCoroutine$State.prototype.constructor = SuspendingIteratorCoroutine$State;
  AsyncHash$MessageDigestHash.prototype = Object.create(AsyncHash.prototype);
  AsyncHash$MessageDigestHash.prototype.constructor = AsyncHash$MessageDigestHash;
  AsyncHash$CRC32Hash.prototype = Object.create(AsyncHash.prototype);
  AsyncHash$CRC32Hash.prototype.constructor = AsyncHash$CRC32Hash;
  SyncHash$MessageDigestHash.prototype = Object.create(SyncHash.prototype);
  SyncHash$MessageDigestHash.prototype.constructor = SyncHash$MessageDigestHash;
  InvalidOperationException.prototype = Object.create(Exception.prototype);
  InvalidOperationException.prototype.constructor = InvalidOperationException;
  OutOfBoundsException.prototype = Object.create(Exception.prototype);
  OutOfBoundsException.prototype.constructor = OutOfBoundsException;
  KeyNotFoundException.prototype = Object.create(Exception.prototype);
  KeyNotFoundException.prototype.constructor = KeyNotFoundException;
  NotImplementedException.prototype = Object.create(Exception.prototype);
  NotImplementedException.prototype.constructor = NotImplementedException;
  InvalidArgumentException.prototype = Object.create(Exception.prototype);
  InvalidArgumentException.prototype.constructor = InvalidArgumentException;
  MustValidateCodeException.prototype = Object.create(Exception.prototype);
  MustValidateCodeException.prototype.constructor = MustValidateCodeException;
  MustOverrideException.prototype = Object.create(Exception.prototype);
  MustOverrideException.prototype.constructor = MustOverrideException;
  DeprecatedException.prototype = Object.create(Exception.prototype);
  DeprecatedException.prototype.constructor = DeprecatedException;
  UnexpectedException.prototype = Object.create(Exception.prototype);
  UnexpectedException.prototype.constructor = UnexpectedException;
  QExpr$BINOP.prototype = Object.create(QExpr.prototype);
  QExpr$BINOP.prototype.constructor = QExpr$BINOP;
  QExpr$AND.prototype = Object.create(QExpr.prototype);
  QExpr$AND.prototype.constructor = QExpr$AND;
  AsyncInjector$NotMappedException.prototype = Object.create(RuntimeException.prototype);
  AsyncInjector$NotMappedException.prototype.constructor = AsyncInjector$NotMappedException;
  UTC8CharsetBase.prototype = Object.create(Charset.prototype);
  UTC8CharsetBase.prototype.constructor = UTC8CharsetBase;
  UTF8Charset.prototype = Object.create(UTC8CharsetBase.prototype);
  UTF8Charset.prototype.constructor = UTF8Charset;
  ISO_8859_1Charset.prototype = Object.create(UTC8CharsetBase.prototype);
  ISO_8859_1Charset.prototype.constructor = ISO_8859_1Charset;
  threadLocal$local$ObjectLiteral.prototype = Object.create(ThreadLocal.prototype);
  threadLocal$local$ObjectLiteral.prototype.constructor = threadLocal$local$ObjectLiteral;
  Http$Methods.prototype = Object.create(Enum.prototype);
  Http$Methods.prototype.constructor = Http$Methods;
  IOException.prototype = Object.create(Exception.prototype);
  IOException.prototype.constructor = IOException;
  Http$HttpException.prototype = Object.create(IOException.prototype);
  Http$HttpException.prototype.constructor = Http$HttpException;
  Http$RedirectException.prototype = Object.create(Http$HttpException.prototype);
  Http$RedirectException.prototype.constructor = Http$RedirectException;
  DelayedHttpClient.prototype = Object.create(HttpClient.prototype);
  DelayedHttpClient.prototype.constructor = DelayedHttpClient;
  LogHttpClient.prototype = Object.create(HttpClient.prototype);
  LogHttpClient.prototype.constructor = LogHttpClient;
  FakeHttpClient.prototype = Object.create(HttpClient.prototype);
  FakeHttpClient.prototype.constructor = FakeHttpClient;
  HttpServer$WsRequest.prototype = Object.create(HttpServer$BaseRequest.prototype);
  HttpServer$WsRequest.prototype.constructor = HttpServer$WsRequest;
  HttpServer$Request.prototype = Object.create(HttpServer$BaseRequest.prototype);
  HttpServer$Request.prototype.constructor = HttpServer$Request;
  FakeRequest.prototype = Object.create(HttpServer$Request.prototype);
  FakeRequest.prototype.constructor = FakeRequest;
  WebSocketException.prototype = Object.create(IOException.prototype);
  WebSocketException.prototype.constructor = WebSocketException;
  Xml$Type.prototype = Object.create(Enum.prototype);
  Xml$Type.prototype.constructor = Xml$Type;
  XmlStream$Element$ProcessingInstructionTag.prototype = Object.create(XmlStream$Element.prototype);
  XmlStream$Element$ProcessingInstructionTag.prototype.constructor = XmlStream$Element$ProcessingInstructionTag;
  XmlStream$Element$OpenCloseTag.prototype = Object.create(XmlStream$Element.prototype);
  XmlStream$Element$OpenCloseTag.prototype.constructor = XmlStream$Element$OpenCloseTag;
  XmlStream$Element$OpenTag.prototype = Object.create(XmlStream$Element.prototype);
  XmlStream$Element$OpenTag.prototype.constructor = XmlStream$Element$OpenTag;
  XmlStream$Element$CommentTag.prototype = Object.create(XmlStream$Element.prototype);
  XmlStream$Element$CommentTag.prototype.constructor = XmlStream$Element$CommentTag;
  XmlStream$Element$CloseTag.prototype = Object.create(XmlStream$Element.prototype);
  XmlStream$Element$CloseTag.prototype.constructor = XmlStream$Element$CloseTag;
  XmlStream$Element$Text.prototype = Object.create(XmlStream$Element.prototype);
  XmlStream$Element$Text.prototype.constructor = XmlStream$Element$Text;
  toAsyncStream$ObjectLiteral.prototype = Object.create(AsyncStreamBase.prototype);
  toAsyncStream$ObjectLiteral.prototype.constructor = toAsyncStream$ObjectLiteral;
  SliceAsyncStreamBase.prototype = Object.create(AsyncStreamBase.prototype);
  SliceAsyncStreamBase.prototype.constructor = SliceAsyncStreamBase;
  BufferedStreamBase.prototype = Object.create(AsyncStreamBase.prototype);
  BufferedStreamBase.prototype.constructor = BufferedStreamBase;
  SyncAsyncStreamBase.prototype = Object.create(AsyncStreamBase.prototype);
  SyncAsyncStreamBase.prototype.constructor = SyncAsyncStreamBase;
  SyncAsyncStreamBaseInWorker.prototype = Object.create(AsyncStreamBase.prototype);
  SyncAsyncStreamBaseInWorker.prototype.constructor = SyncAsyncStreamBaseInWorker;
  SliceSyncStreamBase.prototype = Object.create(SyncStreamBase.prototype);
  SliceSyncStreamBase.prototype.constructor = SliceSyncStreamBase;
  FillSyncStreamBase.prototype = Object.create(SyncStreamBase.prototype);
  FillSyncStreamBase.prototype.constructor = FillSyncStreamBase;
  MemorySyncStreamBase.prototype = Object.create(SyncStreamBase.prototype);
  MemorySyncStreamBase.prototype.constructor = MemorySyncStreamBase;
  TimeProvider$Companion$invoke$ObjectLiteral.prototype = Object.create(TimeProvider_0.prototype);
  TimeProvider$Companion$invoke$ObjectLiteral.prototype.constructor = TimeProvider$Companion$invoke$ObjectLiteral;
  ExpectedException.prototype = Object.create(Exception.prototype);
  ExpectedException.prototype.constructor = ExpectedException;
  GeneratorIterator.prototype = Object.create(AbstractIterator.prototype);
  GeneratorIterator.prototype.constructor = GeneratorIterator;
  ISO$openVfs$lambda$ObjectLiteral.prototype = Object.create(Vfs.prototype);
  ISO$openVfs$lambda$ObjectLiteral.prototype.constructor = ISO$openVfs$lambda$ObjectLiteral;
  ISO$VolumeDescriptorHeader$TypeEnum.prototype = Object.create(Enum.prototype);
  ISO$VolumeDescriptorHeader$TypeEnum.prototype.constructor = ISO$VolumeDescriptorHeader$TypeEnum;
  Vfs$Proxy.prototype = Object.create(Vfs.prototype);
  Vfs$Proxy.prototype.constructor = Vfs$Proxy;
  JailVfs$ObjectLiteral.prototype = Object.create(Vfs$Proxy.prototype);
  JailVfs$ObjectLiteral.prototype.constructor = JailVfs$ObjectLiteral;
  LocalVfs.prototype = Object.create(Vfs.prototype);
  LocalVfs.prototype.constructor = LocalVfs;
  LogVfs$open$ObjectLiteral.prototype = Object.create(AsyncStreamBase.prototype);
  LogVfs$open$ObjectLiteral.prototype.constructor = LogVfs$open$ObjectLiteral;
  LogVfs.prototype = Object.create(Vfs$Proxy.prototype);
  LogVfs.prototype.constructor = LogVfs;
  MergedVfs.prototype = Object.create(Vfs$Proxy.prototype);
  MergedVfs.prototype.constructor = MergedVfs;
  MountableVfs$lambda$ObjectLiteral.prototype = Object.create(Vfs$Proxy.prototype);
  MountableVfs$lambda$ObjectLiteral.prototype.constructor = MountableVfs$lambda$ObjectLiteral;
  NodeVfs$open$ObjectLiteral.prototype = Object.create(AsyncStreamBase.prototype);
  NodeVfs$open$ObjectLiteral.prototype.constructor = NodeVfs$open$ObjectLiteral;
  NodeVfs.prototype = Object.create(Vfs.prototype);
  NodeVfs.prototype.constructor = NodeVfs;
  UrlVfs$open$ObjectLiteral.prototype = Object.create(AsyncStreamBase.prototype);
  UrlVfs$open$ObjectLiteral.prototype.constructor = UrlVfs$open$ObjectLiteral;
  UrlVfs_0.prototype = Object.create(Vfs.prototype);
  UrlVfs_0.prototype.constructor = UrlVfs_0;
  Vfs$Decorator.prototype = Object.create(Vfs$Proxy.prototype);
  Vfs$Decorator.prototype.constructor = Vfs$Decorator;
  VfsFile$execToString$ObjectLiteral.prototype = Object.create(VfsProcessHandler.prototype);
  VfsFile$execToString$ObjectLiteral.prototype.constructor = VfsFile$execToString$ObjectLiteral;
  VfsFile$passthru$ObjectLiteral.prototype = Object.create(VfsProcessHandler.prototype);
  VfsFile$passthru$ObjectLiteral.prototype.constructor = VfsFile$passthru$ObjectLiteral;
  VfsFile$redirected$ObjectLiteral.prototype = Object.create(Vfs$Proxy.prototype);
  VfsFile$redirected$ObjectLiteral.prototype.constructor = VfsFile$redirected$ObjectLiteral;
  VfsFile.prototype = Object.create(VfsNamed.prototype);
  VfsFile.prototype.constructor = VfsFile;
  VfsFileEvent$Kind.prototype = Object.create(Enum.prototype);
  VfsFileEvent$Kind.prototype.constructor = VfsFileEvent$Kind;
  VfsOpenMode.prototype = Object.create(Enum.prototype);
  VfsOpenMode.prototype.constructor = VfsOpenMode;
  VfsProcessException.prototype = Object.create(IOException.prototype);
  VfsProcessException.prototype.constructor = VfsProcessException;
  VfsStat.prototype = Object.create(VfsNamed.prototype);
  VfsStat.prototype.constructor = VfsStat;
  ZipVfs$Impl.prototype = Object.create(Vfs.prototype);
  ZipVfs$Impl.prototype.constructor = ZipVfs$Impl;
  EventLoopFactoryJs.prototype = Object.create(EventLoopFactory.prototype);
  EventLoopFactoryJs.prototype.constructor = EventLoopFactoryJs;
  EventLoopJs.prototype = Object.create(EventLoop.prototype);
  EventLoopJs.prototype.constructor = EventLoopJs;
  EOFException.prototype = Object.create(IOException.prototype);
  EOFException.prototype.constructor = EOFException;
  FileNotFoundException.prototype = Object.create(IOException.prototype);
  FileNotFoundException.prototype.constructor = FileNotFoundException;
  RuntimeException_0.prototype = Object.create(Exception.prototype);
  RuntimeException_0.prototype.constructor = RuntimeException_0;
  IllegalStateException_0.prototype = Object.create(RuntimeException_0.prototype);
  IllegalStateException_0.prototype.constructor = IllegalStateException_0;
  CancellationException.prototype = Object.create(IllegalStateException_0.prototype);
  CancellationException.prototype.constructor = CancellationException;
  HttpSeverNodeJs.prototype = Object.create(HttpServer.prototype);
  HttpSeverNodeJs.prototype.constructor = HttpSeverNodeJs;
  HttpClientNodeJs.prototype = Object.create(HttpClient.prototype);
  HttpClientNodeJs.prototype.constructor = HttpClientNodeJs;
  HttpClientBrowserJs.prototype = Object.create(HttpClient.prototype);
  HttpClientBrowserJs.prototype.constructor = HttpClientBrowserJs;
  JsWebSocketClientFactory.prototype = Object.create(WebSocketClientFactory.prototype);
  JsWebSocketClientFactory.prototype.constructor = JsWebSocketClientFactory;
  JsWebSocketClient.prototype = Object.create(WebSocketClient.prototype);
  JsWebSocketClient.prototype.constructor = JsWebSocketClient;
  function Korio(entry) {
    EventLoop$Companion_getInstance().main_6q182l$(entry);
  }
  function AsyncQueue() {
    this.promise_0 = Promise$Companion_getInstance().resolved_mh5how$(Unit);
  }
  function AsyncQueue$invoke$lambda(closure$func_0, this$AsyncQueue_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$AsyncQueue$invoke$lambda(closure$func_0, this$AsyncQueue_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$AsyncQueue$invoke$lambda(closure$func_0, this$AsyncQueue_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$closure$func = closure$func_0;
    this.local$this$AsyncQueue = this$AsyncQueue_0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$AsyncQueue$invoke$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$AsyncQueue$invoke$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$AsyncQueue$invoke$lambda.prototype.constructor = Coroutine$AsyncQueue$invoke$lambda;
  Coroutine$AsyncQueue$invoke$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            return this.local$this$AsyncQueue.invoke_l9xv2o$(this.local$$receiver, this.local$closure$func);
          case 1:
            throw this.exception_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  AsyncQueue.prototype.invoke_g2bo5h$ = function (func, continuation) {
    return withCoroutineContext(AsyncQueue$invoke$lambda(func, this), continuation);
  };
  function AsyncQueue$invoke$lambda_0(closure$func, closure$newDeferred, closure$context) {
    return function () {
      korioStartCoroutine_0(closure$func, closure$newDeferred.toContinuation_dvqyjb$(closure$context));
      return Unit;
    };
  }
  AsyncQueue.prototype.invoke_l9xv2o$ = function (context, func) {
    var oldPromise = this.promise_0;
    var newDeferred = new Promise$Deferred();
    this.promise_0 = newDeferred.promise;
    oldPromise.always_o14v8n$(AsyncQueue$invoke$lambda_0(func, newDeferred, context));
    return this;
  };
  AsyncQueue.prototype.await_g2bo5h$ = function (func_0, continuation_0, suspended) {
    var instance = new Coroutine$await_g2bo5h$(this, func_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$await_g2bo5h$($this, func_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$func = func_0;
  }
  Coroutine$await_g2bo5h$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$await_g2bo5h$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$await_g2bo5h$.prototype.constructor = Coroutine$await_g2bo5h$;
  Coroutine$await_g2bo5h$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.invoke_g2bo5h$(this.local$func, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.$this.await(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            return;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  AsyncQueue.prototype.await = function (continuation) {
    return this.promise_0.await(continuation);
  };
  AsyncQueue.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'AsyncQueue',
    interfaces: []
  };
  function withContext($receiver, ctx) {
    return new AsyncQueueWithContext($receiver, ctx);
  }
  function withContext_0($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$withContext($receiver_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$withContext($receiver_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$withContext.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$withContext.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$withContext.prototype.constructor = Coroutine$withContext;
  Coroutine$withContext.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = getCoroutineContext(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return new AsyncQueueWithContext(this.local$$receiver, this.result_0);
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function AsyncQueueWithContext(queue, context) {
    this.queue = queue;
    this.context = context;
  }
  AsyncQueueWithContext.prototype.invoke_g2bo5h$ = function (func) {
    return this.queue.invoke_l9xv2o$(this.context, func);
  };
  AsyncQueueWithContext.prototype.await_g2bo5h$ = function (func, continuation) {
    return this.queue.await_g2bo5h$(func, continuation);
  };
  AsyncQueueWithContext.prototype.await = function (continuation) {
    return this.queue.await(continuation);
  };
  AsyncQueueWithContext.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'AsyncQueueWithContext',
    interfaces: []
  };
  function AsyncThread() {
    this.lastPromise_0 = Promise$Companion_getInstance().resolved_mh5how$(Unit);
  }
  AsyncThread.prototype.cancel = function () {
    this.lastPromise_0.cancel_tcv7n7$();
    this.lastPromise_0 = Promise$Companion_getInstance().resolved_mh5how$(Unit);
    return this;
  };
  AsyncThread.prototype.cancelAndQueue_lnyleu$ = function (func, continuation) {
    this.cancel();
    return this.queue_lnyleu$(func, continuation);
  };
  AsyncThread.prototype.queue_lnyleu$ = function (func, continuation) {
    return this.invoke_lnyleu$(func, continuation);
  };
  function AsyncThread$invoke$lambda$lambda(closure$func, closure$newDeferred, this$) {
    return function () {
      korioStartCoroutine_0(closure$func, closure$newDeferred.toContinuation_dvqyjb$(this$));
      return Unit;
    };
  }
  function AsyncThread$invoke$lambda(this$AsyncThread_0, closure$func_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$AsyncThread$invoke$lambda(this$AsyncThread_0, closure$func_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$AsyncThread$invoke$lambda(this$AsyncThread_0, closure$func_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$this$AsyncThread = this$AsyncThread_0;
    this.local$closure$func = closure$func_0;
    this.local$tmp$ = void 0;
    this.local$newDeferred = void 0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$AsyncThread$invoke$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$AsyncThread$invoke$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$AsyncThread$invoke$lambda.prototype.constructor = Coroutine$AsyncThread$invoke$lambda;
  Coroutine$AsyncThread$invoke$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$newDeferred = new Promise$Deferred();
            this.local$this$AsyncThread.lastPromise_0.always_o14v8n$(AsyncThread$invoke$lambda$lambda(this.local$closure$func, this.local$newDeferred, this.local$$receiver));
            this.local$this$AsyncThread.lastPromise_0 = this.local$newDeferred.promise;
            this.state_0 = 2;
            this.result_0 = this.local$newDeferred.promise.await(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            var tmp$;
            return (tmp$ = this.local$tmp$ = this.result_0) == null || Kotlin.isType(tmp$, Any) ? this.local$tmp$ : Kotlin.throwCCE();
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  AsyncThread.prototype.invoke_lnyleu$ = function (func_0, continuation_0, suspended) {
    var instance = new Coroutine$invoke_lnyleu$(this, func_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$invoke_lnyleu$($this, func_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$func = func_0;
  }
  Coroutine$invoke_lnyleu$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$invoke_lnyleu$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$invoke_lnyleu$.prototype.constructor = Coroutine$invoke_lnyleu$;
  Coroutine$invoke_lnyleu$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = withCoroutineContext(AsyncThread$invoke$lambda(this.$this, this.local$func), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function AsyncThread$sync$lambda(closure$func_0, this$AsyncThread_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$AsyncThread$sync$lambda(closure$func_0, this$AsyncThread_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$AsyncThread$sync$lambda(closure$func_0, this$AsyncThread_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$closure$func = closure$func_0;
    this.local$this$AsyncThread = this$AsyncThread_0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$AsyncThread$sync$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$AsyncThread$sync$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$AsyncThread$sync$lambda.prototype.constructor = Coroutine$AsyncThread$sync$lambda;
  Coroutine$AsyncThread$sync$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            return this.local$this$AsyncThread.sync_g3zeo5$(this.local$$receiver, this.local$closure$func);
          case 1:
            throw this.exception_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  AsyncThread.prototype.sync_lnyleu$ = function (func, continuation) {
    return withCoroutineContext(AsyncThread$sync$lambda(func, this), continuation);
  };
  function AsyncThread$sync$lambda_0(closure$func, closure$newDeferred, closure$context) {
    return function () {
      korioStartCoroutine_0(closure$func, closure$newDeferred.toContinuation_dvqyjb$(closure$context));
      return Unit;
    };
  }
  AsyncThread.prototype.sync_g3zeo5$ = function (context, func) {
    var newDeferred = new Promise$Deferred();
    this.lastPromise_0.always_o14v8n$(AsyncThread$sync$lambda_0(func, newDeferred, context));
    this.lastPromise_0 = newDeferred.promise;
    return newDeferred.promise;
  };
  AsyncThread.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'AsyncThread',
    interfaces: []
  };
  function AsyncSemaphore() {
    this.available_0 = 0;
    this.signal_0 = new Signal();
  }
  AsyncSemaphore.prototype.release = function () {
    this.available_0 = this.available_0 + 1 | 0;
    this.signal_0.invoke_11rb$(Unit);
  };
  AsyncSemaphore.prototype.acquire = function (continuation_0, suspended) {
    var instance = new Coroutine$acquire(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$acquire($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
  }
  Coroutine$acquire.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$acquire.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$acquire.prototype.constructor = Coroutine$acquire;
  Coroutine$acquire.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            if (this.$this.available_0 > 0) {
              this.$this.available_0 = this.$this.available_0 - 1 | 0;
              return;
            }
             else {
              this.state_0 = 3;
              this.result_0 = waitOne_0(this.$this.signal_0, this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              break;
            }

          case 3:
            this.state_0 = 4;
            continue;
          case 4:
            this.state_0 = 2;
            continue;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  AsyncSemaphore.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'AsyncSemaphore',
    interfaces: []
  };
  function AsyncSignal(onRegister) {
    if (onRegister === void 0)
      onRegister = AsyncSignal_init$lambda;
    this.onRegister = onRegister;
    this.handlers_0 = new LinkedList2();
  }
  function AsyncSignal$Node($outer, once, item) {
    this.$outer = $outer;
    LinkedList2$Node.call(this);
    this.once = once;
    this.item = item;
  }
  AsyncSignal$Node.prototype.close = function () {
    this.$outer.handlers_0.remove_jvkhq7$(this);
  };
  AsyncSignal$Node.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'Node',
    interfaces: [Closeable, LinkedList2$Node]
  };
  Object.defineProperty(AsyncSignal.prototype, 'listenerCount', {
    get: function () {
      return this.handlers_0.size;
    }
  });
  AsyncSignal.prototype.once_25kf2w$ = function (handler) {
    return this._add_0(true, handler);
  };
  AsyncSignal.prototype.add_25kf2w$ = function (handler) {
    return this._add_0(false, handler);
  };
  AsyncSignal.prototype._add_0 = function (once, handler) {
    this.onRegister();
    var node = new AsyncSignal$Node(this, once, handler);
    this.handlers_0.add_jvkhq7$(node);
    return node;
  };
  AsyncSignal.prototype.invoke_11rb$ = function (value_0, continuation_0, suspended) {
    var instance = new Coroutine$invoke_11rb$(this, value_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$invoke_11rb$($this, value_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$it = void 0;
    this.local$node = void 0;
    this.local$value = value_0;
  }
  Coroutine$invoke_11rb$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$invoke_11rb$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$invoke_11rb$.prototype.constructor = Coroutine$invoke_11rb$;
  Coroutine$invoke_11rb$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$it = this.$this.handlers_0.iterator();
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            if (!this.local$it.hasNext()) {
              this.state_0 = 4;
              continue;
            }

            this.local$node = this.local$it.next();
            if (this.local$node.once)
              this.local$it.remove();
            this.state_0 = 3;
            this.result_0 = this.local$node.item(this.local$value, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            this.state_0 = 2;
            continue;
          case 4:
            return;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  AsyncSignal.prototype.invoke_25kf2w$ = function (handler) {
    return this.add_25kf2w$(handler);
  };
  function AsyncSignal$listen$lambda(this$AsyncSignal_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$AsyncSignal$listen$lambda(this$AsyncSignal_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$AsyncSignal$listen$lambda(this$AsyncSignal_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$this$AsyncSignal = this$AsyncSignal_0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$AsyncSignal$listen$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$AsyncSignal$listen$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$AsyncSignal$listen$lambda.prototype.constructor = Coroutine$AsyncSignal$listen$lambda;
  Coroutine$AsyncSignal$listen$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = waitOne(this.local$this$AsyncSignal, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            this.state_0 = 4;
            this.result_0 = this.local$$receiver.yield_11rb$(this.result_0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 4:
            this.state_0 = 2;
            continue;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  AsyncSignal.prototype.listen = function (continuation_0, suspended) {
    var instance = new Coroutine$listen(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$listen($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
  }
  Coroutine$listen.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$listen.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$listen.prototype.constructor = Coroutine$listen;
  Coroutine$listen.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = asyncGenerate_0(AsyncSignal$listen$lambda(this.$this), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function AsyncSignal_init$lambda() {
    return Unit;
  }
  AsyncSignal.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'AsyncSignal',
    interfaces: []
  };
  function mapSignal$lambda(closure$out_0, closure$transform_0) {
    return function (it_0, continuation_0, suspended) {
      var instance = new Coroutine$mapSignal$lambda(closure$out_0, closure$transform_0, it_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$mapSignal$lambda(closure$out_0, closure$transform_0, it_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$closure$out = closure$out_0;
    this.local$closure$transform = closure$transform_0;
    this.local$it = it_0;
  }
  Coroutine$mapSignal$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$mapSignal$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$mapSignal$lambda.prototype.constructor = Coroutine$mapSignal$lambda;
  Coroutine$mapSignal$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$closure$out.invoke_11rb$(this.local$closure$transform(this.local$it), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function mapSignal($receiver, transform) {
    var out = new AsyncSignal();
    $receiver.add_25kf2w$(mapSignal$lambda(out, transform));
    return out;
  }
  function invoke($receiver, continuation) {
    return $receiver.invoke_11rb$(Unit, continuation);
  }
  function waitOne$lambda$lambda(closure$close_0, closure$c_0) {
    return function (it_0, continuation_0, suspended) {
      var instance = new Coroutine$waitOne$lambda$lambda(closure$close_0, closure$c_0, it_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$waitOne$lambda$lambda(closure$close_0, closure$c_0, it_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$closure$close = closure$close_0;
    this.local$closure$c = closure$c_0;
    this.local$tmp$ = void 0;
    this.local$it = it_0;
  }
  Coroutine$waitOne$lambda$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$waitOne$lambda$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$waitOne$lambda$lambda.prototype.constructor = Coroutine$waitOne$lambda$lambda;
  Coroutine$waitOne$lambda$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            (this.local$tmp$ = this.local$closure$close.v) != null ? (this.local$tmp$.close(), Unit) : null;
            return this.local$closure$c.resume_11rb$(this.local$it), Unit;
          case 1:
            throw this.exception_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function waitOne$lambda$lambda_0(closure$close) {
    return function (it) {
      var tmp$;
      (tmp$ = closure$close.v) != null ? (tmp$.close(), Unit) : null;
      return Unit;
    };
  }
  function waitOne$lambda(this$waitOne) {
    return function (c) {
      var close = {v: null};
      close.v = this$waitOne.once_25kf2w$(waitOne$lambda$lambda(close, c));
      c.onCancel_4m4org$(waitOne$lambda$lambda_0(close));
      return Unit;
    };
  }
  function suspendCancellableCoroutine$lambda(closure$block) {
    return function (c) {
      closure$block(new CancellableContinuation(c));
      return Unit;
    };
  }
  function suspendCoroutineEL$lambda(closure$block) {
    return function (c) {
      closure$block(toEventLoop(c));
      return Unit;
    };
  }
  function _korioSuspendCoroutine$lambda(closure$block) {
    return function (c) {
      closure$block(c);
      return Unit;
    };
  }
  var SafeContinuation_init = Kotlin.kotlin.coroutines.experimental.SafeContinuation_init_n4f53e$;
  function suspendCoroutine$lambda(closure$block) {
    return function (c) {
      var safe = SafeContinuation_init(c);
      closure$block(safe);
      return safe.getResult();
    };
  }
  function waitOne($receiver, continuation) {
    return suspendCoroutine$lambda(_korioSuspendCoroutine$lambda(suspendCoroutineEL$lambda(suspendCancellableCoroutine$lambda(waitOne$lambda($receiver)))))(continuation.facade);
  }
  function addSuspend$lambda$lambda$lambda(closure$handler_0, closure$value_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$addSuspend$lambda$lambda$lambda(closure$handler_0, closure$value_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$addSuspend$lambda$lambda$lambda(closure$handler_0, closure$value_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$closure$handler = closure$handler_0;
    this.local$closure$value = closure$value_0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$addSuspend$lambda$lambda$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$addSuspend$lambda$lambda$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$addSuspend$lambda$lambda$lambda.prototype.constructor = Coroutine$addSuspend$lambda$lambda$lambda;
  Coroutine$addSuspend$lambda$lambda$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$closure$handler(this.local$closure$value, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function addSuspend$lambda$lambda(closure$handler, this$) {
    return function (value) {
      async_3(this$, addSuspend$lambda$lambda$lambda(closure$handler, value));
      return Unit;
    };
  }
  function addSuspend$lambda(this$addSuspend_0, closure$handler_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$addSuspend$lambda(this$addSuspend_0, closure$handler_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$addSuspend$lambda(this$addSuspend_0, closure$handler_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$this$addSuspend = this$addSuspend_0;
    this.local$closure$handler = closure$handler_0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$addSuspend$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$addSuspend$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$addSuspend$lambda.prototype.constructor = Coroutine$addSuspend$lambda;
  Coroutine$addSuspend$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            return this.local$this$addSuspend.invoke_qlkmfe$(addSuspend$lambda$lambda(this.local$closure$handler, this.local$$receiver));
          case 1:
            throw this.exception_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function addSuspend($receiver_0, handler_0, continuation_0, suspended) {
    var instance = new Coroutine$addSuspend($receiver_0, handler_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$addSuspend($receiver_0, handler_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
    this.local$handler = handler_0;
  }
  Coroutine$addSuspend.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$addSuspend.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$addSuspend.prototype.constructor = Coroutine$addSuspend;
  Coroutine$addSuspend.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = withCoroutineContext(addSuspend$lambda(this.local$$receiver, this.local$handler), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function addSuspend$lambda$lambda_0(closure$handler_0, closure$value_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$addSuspend$lambda$lambda(closure$handler_0, closure$value_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$addSuspend$lambda$lambda(closure$handler_0, closure$value_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$closure$handler = closure$handler_0;
    this.local$closure$value = closure$value_0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$addSuspend$lambda$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$addSuspend$lambda$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$addSuspend$lambda$lambda.prototype.constructor = Coroutine$addSuspend$lambda$lambda;
  Coroutine$addSuspend$lambda$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$closure$handler(this.local$closure$value, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function addSuspend$lambda_0(closure$context, closure$handler) {
    return function (value) {
      async_3(closure$context, addSuspend$lambda$lambda_0(closure$handler, value));
      return Unit;
    };
  }
  function addSuspend_0($receiver, context, handler) {
    return $receiver.invoke_qlkmfe$(addSuspend$lambda_0(context, handler));
  }
  var suspendCancellableCoroutine = defineInlineFunction('korio-js.com.soywiz.korio.async.suspendCancellableCoroutine_xa7kfx$', wrapFunction(function () {
    var CancellableContinuation_init = _.com.soywiz.korio.async.CancellableContinuation;
    var Unit = Kotlin.kotlin.Unit;
    function suspendCancellableCoroutine$lambda(closure$block) {
      return function (c) {
        closure$block(new CancellableContinuation_init(c));
        return Unit;
      };
    }
    var toEventLoop = _.com.soywiz.korio.async.toEventLoop_5cx0c9$;
    function suspendCoroutineEL$lambda(closure$block) {
      return function (c) {
        closure$block(toEventLoop(c));
        return Unit;
      };
    }
    function _korioSuspendCoroutine$lambda(closure$block) {
      return function (c) {
        closure$block(c);
        return Unit;
      };
    }
    var SafeContinuation_init = Kotlin.kotlin.coroutines.experimental.SafeContinuation_init_n4f53e$;
    function suspendCoroutine$lambda(closure$block) {
      return function (c) {
        var safe = SafeContinuation_init(c);
        closure$block(safe);
        return safe.getResult();
      };
    }
    return function (block, continuation) {
      return suspendCoroutine$lambda(_korioSuspendCoroutine$lambda(suspendCoroutineEL$lambda(suspendCancellableCoroutine$lambda(block))))(continuation.facade);
    };
  }));
  function CoroutineCancelContext() {
    CoroutineCancelContext$Key_getInstance();
    AbstractCoroutineContextElement.call(this, CoroutineCancelContext$Key_getInstance());
    this.handlers_0 = new LinkedList();
    this.c_0 = null;
  }
  function CoroutineCancelContext$Key() {
    CoroutineCancelContext$Key_instance = this;
  }
  CoroutineCancelContext$Key.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'Key',
    interfaces: [CoroutineContext$Key]
  };
  var CoroutineCancelContext$Key_instance = null;
  function CoroutineCancelContext$Key_getInstance() {
    if (CoroutineCancelContext$Key_instance === null) {
      new CoroutineCancelContext$Key();
    }
    return CoroutineCancelContext$Key_instance;
  }
  CoroutineCancelContext.prototype.exec_tcv7n7$ = function (c) {
    this.c_0 = c;
    this.flush_0();
  };
  CoroutineCancelContext.prototype.add_4m4org$ = function (handler) {
    this.handlers_0.add_11rb$(handler);
    this.flush_0();
    return handler;
  };
  CoroutineCancelContext.prototype.remove_4m4org$ = function (handler) {
    this.handlers_0.remove_11rb$(handler);
    return handler;
  };
  CoroutineCancelContext.prototype.flush_0 = function () {
    var tmp$;
    var c = this.c_0;
    if (c != null) {
      while (true) {
        tmp$ = this.handlers_0.isNotEmpty() ? this.handlers_0.removeFirst() : null;
        if (tmp$ == null) {
          break;
        }
        var f = tmp$;
        f(c);
      }
    }
  };
  CoroutineCancelContext.prototype.toString = function () {
    return 'CoroutineCancelSignal(' + this.handlers_0.size + ')';
  };
  CoroutineCancelContext.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'CoroutineCancelContext',
    interfaces: [AbstractCoroutineContextElement]
  };
  function CancellableContinuation(delegate) {
    this.delegate_0 = delegate;
    this.context_x0wggo$_0 = this.delegate_0.context.get_8oh8b3$(CoroutineCancelContext$Key_getInstance()) != null ? this.delegate_0.context : (new CoroutineCancelContext()).plus_dvqyjb$(this.delegate_0.context);
    var tmp$;
    this.cancelContext = (tmp$ = this.context.get_8oh8b3$(CoroutineCancelContext$Key_getInstance())) != null ? tmp$ : Kotlin.throwNPE();
    this.cancells_0 = ArrayList_init();
    this.completed = false;
    this._cancelled_0 = false;
    this._cancelledHandler_0 = false;
  }
  Object.defineProperty(CancellableContinuation.prototype, 'context', {
    get: function () {
      return this.context_x0wggo$_0;
    }
  });
  function CancellableContinuation$get_CancellableContinuation$cancelled$lambda(this$CancellableContinuation) {
    return function (it) {
      this$CancellableContinuation._cancelled_0 = true;
      return Unit;
    };
  }
  Object.defineProperty(CancellableContinuation.prototype, 'cancelled', {
    get: function () {
      if (!this._cancelledHandler_0) {
        this.cancelContext.add_4m4org$(CancellableContinuation$get_CancellableContinuation$cancelled$lambda(this));
        this._cancelledHandler_0 = true;
      }
      return this._cancelled_0;
    }
  });
  CancellableContinuation.prototype.resume_11rb$ = function (value) {
    if (this.completed || this._cancelled_0)
      return;
    this.completed = true;
    this.cancelHandlers_0();
    this.delegate_0.resume_11rb$(value);
  };
  CancellableContinuation.prototype.cancelHandlers_0 = function () {
    var tmp$;
    tmp$ = this.cancells_0.iterator();
    while (tmp$.hasNext()) {
      var c = tmp$.next();
      this.cancelContext.remove_4m4org$(c);
    }
    this.cancells_0.clear();
  };
  CancellableContinuation.prototype.onCancel_4m4org$ = function (handler) {
    var $receiver = this.cancells_0;
    var element = this.cancelContext.add_4m4org$(handler);
    $receiver.add_11rb$(element);
  };
  CancellableContinuation.prototype.cancel_tcv7n7$$default = function (e) {
    if (this.completed || this._cancelled_0)
      return;
    this._cancelled_0 = true;
    this.cancelContext.exec_tcv7n7$(e);
    this.delegate_0.resumeWithException_tcv7n7$(e);
    this.cancelHandlers_0();
  };
  CancellableContinuation.prototype.resumeWithException_tcv7n7$ = function (exception) {
    if (this.completed || this._cancelled_0)
      return;
    this.completed = true;
    this.cancelHandlers_0();
    this.delegate_0.resumeWithException_tcv7n7$(exception);
  };
  CancellableContinuation.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'CancellableContinuation',
    interfaces: [Cancellable$Listener, Cancellable, Continuation]
  };
  function EventLoopFactory() {
  }
  EventLoopFactory.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'EventLoopFactory',
    interfaces: []
  };
  var tasksInProgress;
  function EventLoop() {
    EventLoop$Companion_getInstance();
    this.coroutineContext = new EventLoopCoroutineContext(this);
    this.closeables_44r5w9$_0 = LinkedHashSet_init();
  }
  function EventLoop$Companion() {
    EventLoop$Companion_instance = this;
  }
  function EventLoop$Companion$main$lambda$ObjectLiteral(closure$eventLoop) {
    this.context_ytihda$_0 = new EventLoopCoroutineContext(closure$eventLoop);
  }
  Object.defineProperty(EventLoop$Companion$main$lambda$ObjectLiteral.prototype, 'context', {
    get: function () {
      return this.context_ytihda$_0;
    }
  });
  EventLoop$Companion$main$lambda$ObjectLiteral.prototype.resume_11rb$ = function (value) {
    tasksInProgress.decrementAndGet();
  };
  EventLoop$Companion$main$lambda$ObjectLiteral.prototype.resumeWithException_tcv7n7$ = function (exception) {
    tasksInProgress.decrementAndGet();
    printStackTrace(exception);
  };
  EventLoop$Companion$main$lambda$ObjectLiteral.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    interfaces: [Continuation]
  };
  function EventLoop$Companion$main$lambda(closure$entry, closure$eventLoop) {
    return function () {
      korioStartCoroutine(closure$entry, closure$eventLoop, new EventLoop$Companion$main$lambda$ObjectLiteral(closure$eventLoop));
      return Unit;
    };
  }
  EventLoop$Companion.prototype.main_3513f7$ = function (eventLoop, entry) {
    tasksInProgress.incrementAndGet();
    eventLoop.setImmediate_o14v8n$(EventLoop$Companion$main$lambda(entry, eventLoop));
    eventLoop.loop();
  };
  EventLoop$Companion.prototype.invoke_6q182l$ = function (entry) {
    this.main_6q182l$(entry);
  };
  function EventLoop$Companion$main$lambda_0(closure$entry_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$EventLoop$Companion$main$lambda(closure$entry_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$EventLoop$Companion$main$lambda(closure$entry_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$closure$entry = closure$entry_0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$EventLoop$Companion$main$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$EventLoop$Companion$main$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$EventLoop$Companion$main$lambda.prototype.constructor = Coroutine$EventLoop$Companion$main$lambda;
  Coroutine$EventLoop$Companion$main$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$closure$entry(this.local$$receiver, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  EventLoop$Companion.prototype.main_6q182l$ = function (entry) {
    this.main_3513f7$(eventLoopFactoryDefaultImpl.createEventLoop(), EventLoop$Companion$main$lambda_0(entry));
  };
  EventLoop$Companion.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var EventLoop$Companion_instance = null;
  function EventLoop$Companion_getInstance() {
    if (EventLoop$Companion_instance === null) {
      new EventLoop$Companion();
    }
    return EventLoop$Companion_instance;
  }
  function EventLoop$setIntervalInternal$step$lambda(closure$cancelled, closure$callback, closure$step) {
    return function () {
      if (!closure$cancelled.v) {
        closure$callback();
        closure$step();
      }
      return Unit;
    };
  }
  function EventLoop$setIntervalInternal$step(closure$ms, closure$cancelled, closure$callback, this$EventLoop) {
    return function closure$step() {
      this$EventLoop.setTimeoutInternal_n53o35$(closure$ms, EventLoop$setIntervalInternal$step$lambda(closure$cancelled, closure$callback, closure$step));
    };
  }
  function EventLoop$setIntervalInternal$lambda(closure$cancelled) {
    return function () {
      closure$cancelled.v = true;
      return Unit;
    };
  }
  EventLoop.prototype.setIntervalInternal_n53o35$ = function (ms, callback) {
    var cancelled = {v: false};
    var step = EventLoop$setIntervalInternal$step(ms, cancelled, callback, this);
    step();
    return Closeable_0(EventLoop$setIntervalInternal$lambda(cancelled));
  };
  EventLoop.prototype.setImmediateInternal_o14v8n$ = function (handler) {
    this.setTimeoutInternal_n53o35$(0, handler);
  };
  EventLoop.prototype.requestAnimationFrameInternal_o14v8n$ = function (callback) {
    return this.setTimeoutInternal_n53o35$(1000 / 60 | 0, callback);
  };
  EventLoop.prototype.loop = function () {
  };
  function EventLoop$capture$lambda(this$EventLoop, closure$closeable) {
    return function () {
      var $receiver = this$EventLoop.closeables_44r5w9$_0;
      var element = closure$closeable;
      $receiver.remove_11rb$(element);
      closure$closeable.close();
      return Unit;
    };
  }
  EventLoop.prototype.capture_hi4gnn$_0 = function ($receiver) {
    var closeable = $receiver;
    this.closeables_44r5w9$_0.add_11rb$(closeable);
    return Closeable_0(EventLoop$capture$lambda(this, closeable));
  };
  EventLoop.prototype.setImmediate_o14v8n$ = function (handler) {
    this.setImmediateInternal_o14v8n$(handler);
  };
  EventLoop.prototype.setTimeout_n53o35$ = function (ms, callback) {
    return this.capture_hi4gnn$_0(this.setTimeoutInternal_n53o35$(ms, callback));
  };
  EventLoop.prototype.setInterval_n53o35$ = function (ms, callback) {
    return this.capture_hi4gnn$_0(this.setIntervalInternal_n53o35$(ms, callback));
  };
  EventLoop.prototype.setIntervalImmediate_n53o35$ = function (ms, callback) {
    this.setImmediateInternal_o14v8n$(callback);
    return this.capture_hi4gnn$_0(this.setIntervalInternal_n53o35$(ms, callback));
  };
  EventLoop.prototype.requestAnimationFrame_o14v8n$ = function (callback) {
    return this.capture_hi4gnn$_0(this.requestAnimationFrameInternal_o14v8n$(callback));
  };
  EventLoop.prototype.queue_o14v8n$ = function (handler) {
    this.setImmediate_o14v8n$(handler);
  };
  function EventLoop$animationFrameLoop$lambda(closure$cancelled, closure$callback, this$EventLoop, closure$step, closure$closeable) {
    return function () {
      var tmp$, tmp$_0;
      if (!closure$cancelled.v) {
        closure$callback();
        tmp$_0 = (tmp$ = closure$step.v) != null ? tmp$ : Kotlin.throwNPE();
        closure$closeable.v = this$EventLoop.requestAnimationFrameInternal_o14v8n$(tmp$_0);
      }
      return Unit;
    };
  }
  function EventLoop$animationFrameLoop$lambda_0(closure$cancelled, closure$closeable) {
    return function () {
      var tmp$;
      closure$cancelled.v = true;
      (tmp$ = closure$closeable.v) != null ? (tmp$.close(), Unit) : null;
      return Unit;
    };
  }
  EventLoop.prototype.animationFrameLoop_o14v8n$ = function (callback) {
    var closeable = {v: null};
    var step = {v: null};
    var cancelled = {v: false};
    step.v = EventLoop$animationFrameLoop$lambda(cancelled, callback, this, step, closeable);
    step.v();
    return this.capture_hi4gnn$_0(Closeable_0(EventLoop$animationFrameLoop$lambda_0(cancelled, closeable)));
  };
  EventLoop.prototype.close = function () {
    var tmp$;
    tmp$ = this.closeables_44r5w9$_0.iterator();
    while (tmp$.hasNext()) {
      var closeable = tmp$.next();
      closeable.close();
    }
    this.closeables_44r5w9$_0.clear();
  };
  Object.defineProperty(EventLoop.prototype, 'time', {
    get: function () {
      return TimeProvider_getInstance().now();
    }
  });
  EventLoop.prototype.step_za3lpa$ = function (ms) {
  };
  function EventLoop$sleep$lambda$lambda(closure$c) {
    return function () {
      closure$c.resume_11rb$(Unit);
      return Unit;
    };
  }
  function EventLoop$sleep$lambda$lambda_0(closure$cc) {
    return function (it) {
      closure$cc.close();
      return Unit;
    };
  }
  function EventLoop$sleep$lambda(closure$ms, this$EventLoop) {
    return function (c) {
      var cc = this$EventLoop.setTimeout_n53o35$(closure$ms, EventLoop$sleep$lambda$lambda(c));
      c.onCancel_4m4org$(EventLoop$sleep$lambda$lambda_0(cc));
      return Unit;
    };
  }
  function suspendCancellableCoroutine$lambda_0(closure$block) {
    return function (c) {
      closure$block(new CancellableContinuation(c));
      return Unit;
    };
  }
  function suspendCoroutineEL$lambda_0(closure$block) {
    return function (c) {
      closure$block(toEventLoop(c));
      return Unit;
    };
  }
  function _korioSuspendCoroutine$lambda_0(closure$block) {
    return function (c) {
      closure$block(c);
      return Unit;
    };
  }
  function suspendCoroutine$lambda_0(closure$block) {
    return function (c) {
      var safe = SafeContinuation_init(c);
      closure$block(safe);
      return safe.getResult();
    };
  }
  EventLoop.prototype.sleep_za3lpa$ = function (ms, continuation) {
    return suspendCoroutine$lambda_0(_korioSuspendCoroutine$lambda_0(suspendCoroutineEL$lambda_0(suspendCancellableCoroutine$lambda_0(EventLoop$sleep$lambda(ms, this)))))(continuation.facade);
  };
  function EventLoop$sleepNextFrame$lambda$lambda(closure$c) {
    return function () {
      closure$c.resume_11rb$(Unit);
      return Unit;
    };
  }
  function EventLoop$sleepNextFrame$lambda$lambda_0(closure$cc) {
    return function (it) {
      closure$cc.close();
      return Unit;
    };
  }
  function EventLoop$sleepNextFrame$lambda(this$EventLoop) {
    return function (c) {
      var cc = this$EventLoop.requestAnimationFrame_o14v8n$(EventLoop$sleepNextFrame$lambda$lambda(c));
      c.onCancel_4m4org$(EventLoop$sleepNextFrame$lambda$lambda_0(cc));
      return Unit;
    };
  }
  EventLoop.prototype.sleepNextFrame = function (continuation) {
    return suspendCoroutine$lambda_0(_korioSuspendCoroutine$lambda_0(suspendCoroutineEL$lambda_0(suspendCancellableCoroutine$lambda_0(EventLoop$sleepNextFrame$lambda(this)))))(continuation.facade);
  };
  EventLoop.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'EventLoop',
    interfaces: [Closeable]
  };
  function EventLoopCoroutineContext(eventLoop) {
    EventLoopCoroutineContext$Key_getInstance();
    AbstractCoroutineContextElement.call(this, EventLoopCoroutineContext$Key_getInstance());
    this.eventLoop = eventLoop;
  }
  function EventLoopCoroutineContext$Key() {
    EventLoopCoroutineContext$Key_instance = this;
  }
  EventLoopCoroutineContext$Key.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'Key',
    interfaces: [CoroutineContext$Key]
  };
  var EventLoopCoroutineContext$Key_instance = null;
  function EventLoopCoroutineContext$Key_getInstance() {
    if (EventLoopCoroutineContext$Key_instance === null) {
      new EventLoopCoroutineContext$Key();
    }
    return EventLoopCoroutineContext$Key_instance;
  }
  EventLoopCoroutineContext.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'EventLoopCoroutineContext',
    interfaces: [AbstractCoroutineContextElement]
  };
  function get_eventLoop($receiver) {
    var tmp$, tmp$_0;
    return (tmp$_0 = (tmp$ = $receiver.get_8oh8b3$(EventLoopCoroutineContext$Key_getInstance())) != null ? tmp$.eventLoop : null) != null ? tmp$_0 : invalidOp('No EventLoop associated to this CoroutineContext');
  }
  function get_eventLoop_0($receiver) {
    return get_eventLoop($receiver.context);
  }
  function sleep($receiver, ms, continuation) {
    return get_eventLoop($receiver).sleep_za3lpa$(ms, continuation);
  }
  function EventLoopFactoryTest() {
    EventLoopFactory.call(this);
  }
  EventLoopFactoryTest.prototype.createEventLoop = function () {
    return new EventLoopTest();
  };
  EventLoopFactoryTest.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'EventLoopFactoryTest',
    interfaces: [EventLoopFactory]
  };
  function EventLoopTest() {
    EventLoop.call(this);
    this.time_nkvmqb$_0 = Kotlin.Long.ZERO;
    this.tasks_0 = new LinkedList();
    this.lock_0 = new Any();
    this.timers_0 = ArrayList_init();
    this.executing = false;
  }
  Object.defineProperty(EventLoopTest.prototype, 'time', {
    get: function () {
      return this.time_nkvmqb$_0;
    },
    set: function (time) {
      this.time_nkvmqb$_0 = time;
    }
  });
  function EventLoopTest$Entry(el, time, handler) {
    this.el = el;
    this.time = time;
    this.handler = handler;
  }
  EventLoopTest$Entry.prototype.close = function () {
    this.el.timers_0.remove_11rb$(this);
  };
  EventLoopTest$Entry.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'Entry',
    interfaces: [Closeable]
  };
  EventLoopTest$Entry.prototype.component1 = function () {
    return this.el;
  };
  EventLoopTest$Entry.prototype.component2 = function () {
    return this.time;
  };
  EventLoopTest$Entry.prototype.component3 = function () {
    return this.handler;
  };
  EventLoopTest$Entry.prototype.copy_ec257c$ = function (el, time, handler) {
    return new EventLoopTest$Entry(el === void 0 ? this.el : el, time === void 0 ? this.time : time, handler === void 0 ? this.handler : handler);
  };
  EventLoopTest$Entry.prototype.toString = function () {
    return 'Entry(el=' + Kotlin.toString(this.el) + (', time=' + Kotlin.toString(this.time)) + (', handler=' + Kotlin.toString(this.handler)) + ')';
  };
  EventLoopTest$Entry.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.el) | 0;
    result = result * 31 + Kotlin.hashCode(this.time) | 0;
    result = result * 31 + Kotlin.hashCode(this.handler) | 0;
    return result;
  };
  EventLoopTest$Entry.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.el, other.el) && Kotlin.equals(this.time, other.time) && Kotlin.equals(this.handler, other.handler)))));
  };
  function EventLoopTest$setIntervalInternal$step$lambda(closure$cancelled, closure$callback, closure$step) {
    return function () {
      if (!closure$cancelled.v) {
        closure$callback();
        closure$step();
      }
      return Unit;
    };
  }
  function EventLoopTest$setIntervalInternal$step(closure$ms, closure$cancelled, closure$callback, this$EventLoopTest) {
    return function closure$step() {
      this$EventLoopTest.setTimeoutInternal_n53o35$(closure$ms, EventLoopTest$setIntervalInternal$step$lambda(closure$cancelled, closure$callback, closure$step));
    };
  }
  function EventLoopTest$setIntervalInternal$lambda(closure$cancelled) {
    return function () {
      closure$cancelled.v = true;
      return Unit;
    };
  }
  EventLoopTest.prototype.setIntervalInternal_n53o35$ = function (ms, callback) {
    var cancelled = {v: false};
    var step = EventLoopTest$setIntervalInternal$step(ms, cancelled, callback, this);
    step();
    return Closeable_0(EventLoopTest$setIntervalInternal$lambda(cancelled));
  };
  EventLoopTest.prototype.setTimeoutInternal_n53o35$ = function (ms, callback) {
    var entry = new EventLoopTest$Entry(this, this.time.add(Kotlin.Long.fromInt(ms)), callback);
    this.timers_0.add_11rb$(entry);
    return entry;
  };
  EventLoopTest.prototype.executeTasks = function () {
    block$break: do {
      var tmp$;
      if (this.executing)
        break block$break;
      this.executing = true;
      try {
        do {
          var count = 0;
          if (this.tasks_0.isNotEmpty()) {
            this.tasks_0.removeFirst()();
            count = count + 1 | 0;
          }
          var $receiver = this.timers_0;
          var destination = ArrayList_init();
          var tmp$_0;
          tmp$_0 = $receiver.iterator();
          while (tmp$_0.hasNext()) {
            var element = tmp$_0.next();
            if (this.time.compareTo_11rb$(element.time) >= 0)
              destination.add_11rb$(element);
          }
          var stimers = destination;
          tmp$ = stimers.iterator();
          while (tmp$.hasNext()) {
            var entry = tmp$.next();
            entry.close();
            entry.handler();
            count = count + 1 | 0;
          }
        }
         while (count > 0);
      }
      finally {
        this.executing = false;
      }
    }
     while (false);
  };
  EventLoopTest.prototype.setImmediateInternal_o14v8n$ = function (handler) {
    this.tasks_0.add_11rb$(handler);
    this.executeTasks();
  };
  EventLoopTest.prototype.step_za3lpa$ = function (ms) {
    this.time = this.time.add(Kotlin.Long.fromInt(ms));
    this.executeTasks();
  };
  EventLoopTest.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'EventLoopTest',
    interfaces: [EventLoop]
  };
  function ExceptionHook() {
    ExceptionHook_instance = this;
  }
  ExceptionHook.prototype.hook_849n7l$ = function (exception) {
    Console_getInstance().error_s8jyv4$('ExceptionHook: ' + exception);
    printStackTrace(exception);
    return exception;
  };
  ExceptionHook.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'ExceptionHook',
    interfaces: []
  };
  var ExceptionHook_instance = null;
  function ExceptionHook_getInstance() {
    if (ExceptionHook_instance === null) {
      new ExceptionHook();
    }
    return ExceptionHook_instance;
  }
  function Promise() {
    Promise$Companion_getInstance();
    this.value_0 = null;
    this.error_0 = null;
    this.done_0 = false;
    this.resolvedHandlers_0 = new LinkedList();
    this.rejectedHandlers_0 = new LinkedList();
    this.onCancel_0 = new Signal();
  }
  function Promise$Deferred() {
    this.promise = new Promise();
    this.onCancel = this.promise.onCancel_0;
  }
  Promise$Deferred.prototype.resolve_11rb$ = function (value) {
    this.promise.complete_lboj6e$(value, null);
  };
  Promise$Deferred.prototype.reject_tcv7n7$ = function (error) {
    this.promise.complete_lboj6e$(null, error);
  };
  function Promise$Deferred$toContinuation$ObjectLiteral(closure$deferred, closure$ctx) {
    this.closure$deferred = closure$deferred;
    this.context_cvh3de$_0 = closure$ctx;
  }
  Object.defineProperty(Promise$Deferred$toContinuation$ObjectLiteral.prototype, 'context', {
    get: function () {
      return this.context_cvh3de$_0;
    }
  });
  Promise$Deferred$toContinuation$ObjectLiteral.prototype.resume_11rb$ = function (value) {
    this.closure$deferred.resolve_11rb$(value);
  };
  Promise$Deferred$toContinuation$ObjectLiteral.prototype.resumeWithException_tcv7n7$ = function (exception) {
    this.closure$deferred.reject_tcv7n7$(exception);
  };
  Promise$Deferred$toContinuation$ObjectLiteral.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    interfaces: [Continuation]
  };
  function Promise$Deferred$toContinuation$lambda(closure$cc) {
    return function (it) {
      closure$cc.cancel_tcv7n7$();
      return Unit;
    };
  }
  function Promise$Deferred$toContinuation$lambda_0(this$Deferred, closure$cc) {
    return function (it) {
      this$Deferred.promise.cancel_tcv7n7$();
      closure$cc.cancel_tcv7n7$();
      return Unit;
    };
  }
  Promise$Deferred.prototype.toContinuation_dvqyjb$ = function (ctx) {
    var deferred = this;
    var cc = new CancellableContinuation(new Promise$Deferred$toContinuation$ObjectLiteral(deferred, ctx));
    this.onCancel.invoke_qlkmfe$(Promise$Deferred$toContinuation$lambda(cc));
    cc.onCancel_4m4org$(Promise$Deferred$toContinuation$lambda_0(this, cc));
    return cc;
  };
  Promise$Deferred.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'Deferred',
    interfaces: []
  };
  function Promise$Companion() {
    Promise$Companion_instance = this;
  }
  Promise$Companion.prototype.resolved_mh5how$ = function (value) {
    return (new Promise()).complete_lboj6e$(value, null);
  };
  Promise$Companion.prototype.rejected_lsqlk3$ = function (error) {
    return (new Promise()).complete_lboj6e$(null, error);
  };
  Promise$Companion.prototype.create_rqqhdb$ = function (callback_0, continuation_0, suspended) {
    var instance = new Coroutine$create_rqqhdb$(this, callback_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$create_rqqhdb$($this, callback_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$deferred = void 0;
    this.local$callback = callback_0;
  }
  Coroutine$create_rqqhdb$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$create_rqqhdb$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$create_rqqhdb$.prototype.constructor = Coroutine$create_rqqhdb$;
  Coroutine$create_rqqhdb$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$deferred = new Promise$Deferred();
            this.state_0 = 2;
            this.result_0 = this.local$callback(this.local$deferred, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.local$deferred.promise.await(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  Promise$Companion.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Promise$Companion_instance = null;
  function Promise$Companion_getInstance() {
    if (Promise$Companion_instance === null) {
      new Promise$Companion();
    }
    return Promise$Companion_instance;
  }
  Promise.prototype.flush_0 = function () {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    if (!this.done_0)
      return;
    if (this.error_0 != null) {
      while (true) {
        tmp$ = this.rejectedHandlers_0.isNotEmpty() ? this.rejectedHandlers_0.removeFirst() : null;
        if (tmp$ == null) {
          break;
        }
        var handler = tmp$;
        handler((tmp$_0 = this.error_0) != null ? tmp$_0 : new RuntimeException());
      }
    }
     else {
      while (true) {
        tmp$_1 = this.resolvedHandlers_0.isNotEmpty() ? this.resolvedHandlers_0.removeFirst() : null;
        if (tmp$_1 == null) {
          break;
        }
        var handler_0 = tmp$_1;
        handler_0((tmp$_2 = this.value_0) == null || Kotlin.isType(tmp$_2, Any) ? tmp$_2 : Kotlin.throwCCE());
      }
    }
  };
  Promise.prototype.complete_lboj6e$ = function (value, error) {
    if (!this.done_0) {
      this.value_0 = value;
      this.error_0 = error;
      this.done_0 = true;
      var tmp$ = error != null;
      if (tmp$) {
        tmp$ = this.rejectedHandlers_0.isEmpty();
      }
      if (tmp$ && !Kotlin.isType(error, CancellationException)) {
        Console_getInstance().error_s8jyv4$('## Not handled Promise exception:');
        printStackTrace(error);
      }
      this.flush_0();
    }
    return this;
  };
  Promise.prototype.then_qlkmfe$ = function (resolved) {
    this.resolvedHandlers_0.add_11rb$(resolved);
    this.flush_0();
  };
  function Promise$always$lambda(closure$resolved) {
    return function (it) {
      closure$resolved();
      return Unit;
    };
  }
  function Promise$always$lambda_0(closure$resolved) {
    return function (it) {
      closure$resolved();
      return Unit;
    };
  }
  Promise.prototype.always_o14v8n$ = function (resolved) {
    this.then_m8e4a6$(Promise$always$lambda(resolved), Promise$always$lambda_0(resolved));
  };
  Promise.prototype.then_m8e4a6$ = function (resolved, rejected) {
    this.resolvedHandlers_0.add_11rb$(resolved);
    this.rejectedHandlers_0.add_11rb$(rejected);
    this.flush_0();
  };
  function Promise$then$lambda(closure$c) {
    return function (it) {
      closure$c.resume_11rb$(it);
      return Unit;
    };
  }
  function Promise$then$lambda_0(closure$c) {
    return function (it) {
      closure$c.resumeWithException_tcv7n7$(it);
      return Unit;
    };
  }
  Promise.prototype.then_sahbb5$ = function (c) {
    this.then_m8e4a6$(Promise$then$lambda(c), Promise$then$lambda_0(c));
  };
  Promise.prototype.cancel_tcv7n7$$default = function (e) {
    this.onCancel_0.invoke_11rb$(e);
    this.complete_lboj6e$(null, new CancellationException(''));
  };
  function korioSuspendCoroutine$lambda(closure$block) {
    return function (c) {
      closure$block(toEventLoop(c));
      return Unit;
    };
  }
  function _korioSuspendCoroutine$lambda_1(closure$block) {
    return function (c) {
      closure$block(c);
      return Unit;
    };
  }
  function suspendCoroutine$lambda_1(closure$block) {
    return function (c) {
      var safe = SafeContinuation_init(c);
      closure$block(safe);
      return safe.getResult();
    };
  }
  Promise.prototype.await = function (continuation) {
    return suspendCoroutine$lambda_1(_korioSuspendCoroutine$lambda_1(korioSuspendCoroutine$lambda(Kotlin.getCallableRef('then', function ($receiver, c) {
      return $receiver.then_sahbb5$(c), Unit;
    }.bind(null, this)))))(continuation.facade);
  };
  Promise.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'Promise',
    interfaces: [Cancellable]
  };
  function await_0($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$await($receiver_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$await($receiver_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$tmp$ = void 0;
    this.local$out = void 0;
    this.local$p = void 0;
    this.local$element = void 0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$await.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$await.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$await.prototype.constructor = Coroutine$await;
  Coroutine$await.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$out = ArrayList_init();
            this.local$tmp$ = this.local$$receiver.iterator();
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            if (!this.local$tmp$.hasNext()) {
              this.state_0 = 4;
              continue;
            }

            this.local$p = this.local$tmp$.next();
            this.state_0 = 3;
            this.result_0 = this.local$p.await(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            this.local$element = this.result_0;
            this.local$out.add_11rb$(this.local$element);
            this.state_0 = 2;
            continue;
          case 4:
            return this.local$out;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function Signal(onRegister) {
    if (onRegister === void 0)
      onRegister = Signal_init$lambda;
    this.onRegister = onRegister;
    this.handlers_0 = new LinkedList2();
  }
  function Signal$Node($outer, once, item) {
    this.$outer = $outer;
    LinkedList2$Node.call(this);
    this.once = once;
    this.item = item;
  }
  Signal$Node.prototype.close = function () {
    this.$outer.handlers_0.remove_jvkhq7$(this);
  };
  Signal$Node.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'Node',
    interfaces: [Closeable, LinkedList2$Node]
  };
  Object.defineProperty(Signal.prototype, 'listenerCount', {
    get: function () {
      return this.handlers_0.size;
    }
  });
  Signal.prototype.once_qlkmfe$ = function (handler) {
    return this._add_0(true, handler);
  };
  Signal.prototype.add_qlkmfe$ = function (handler) {
    return this._add_0(false, handler);
  };
  Signal.prototype._add_0 = function (once, handler) {
    this.onRegister();
    var node = new Signal$Node(this, once, handler);
    this.handlers_0.add_jvkhq7$(node);
    return node;
  };
  Signal.prototype.invoke_11rb$ = function (value) {
    var it = this.handlers_0.iterator();
    while (it.hasNext()) {
      var node = it.next();
      if (node.once)
        it.remove();
      node.item(value);
    }
  };
  Signal.prototype.invoke_qlkmfe$ = function (handler) {
    return this.add_qlkmfe$(handler);
  };
  function Signal$listen$lambda(this$Signal_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$Signal$listen$lambda(this$Signal_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$Signal$listen$lambda(this$Signal_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$this$Signal = this$Signal_0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$Signal$listen$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$Signal$listen$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$Signal$listen$lambda.prototype.constructor = Coroutine$Signal$listen$lambda;
  Coroutine$Signal$listen$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = waitOne_0(this.local$this$Signal, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            this.state_0 = 4;
            this.result_0 = this.local$$receiver.yield_11rb$(this.result_0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 4:
            this.state_0 = 2;
            continue;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  Signal.prototype.listen = function (continuation_0, suspended) {
    var instance = new Coroutine$listen_0(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$listen_0($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
  }
  Coroutine$listen_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$listen_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$listen_0.prototype.constructor = Coroutine$listen_0;
  Coroutine$listen_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = asyncGenerate_0(Signal$listen$lambda(this.$this), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function Signal_init$lambda() {
    return Unit;
  }
  Signal.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'Signal',
    interfaces: []
  };
  function mapSignal$lambda_0(closure$out, closure$transform) {
    return function (it) {
      closure$out.invoke_11rb$(closure$transform(it));
      return Unit;
    };
  }
  function mapSignal_0($receiver, transform) {
    var out = new Signal();
    $receiver.add_qlkmfe$(mapSignal$lambda_0(out, transform));
    return out;
  }
  function invoke_0($receiver) {
    $receiver.invoke_11rb$(Unit);
  }
  function waitOne$lambda$lambda_1(closure$close, closure$c) {
    return function (it) {
      var tmp$;
      (tmp$ = closure$close.v) != null ? (tmp$.close(), Unit) : null;
      closure$c.resume_11rb$(it);
      return Unit;
    };
  }
  function waitOne$lambda$lambda_2(closure$close) {
    return function (it) {
      var tmp$;
      (tmp$ = closure$close.v) != null ? (tmp$.close(), Unit) : null;
      return Unit;
    };
  }
  function waitOne$lambda_0(this$waitOne) {
    return function (c) {
      var close = {v: null};
      close.v = this$waitOne.once_qlkmfe$(waitOne$lambda$lambda_1(close, c));
      c.onCancel_4m4org$(waitOne$lambda$lambda_2(close));
      return Unit;
    };
  }
  function suspendCancellableCoroutine$lambda_1(closure$block) {
    return function (c) {
      closure$block(new CancellableContinuation(c));
      return Unit;
    };
  }
  function suspendCoroutineEL$lambda_1(closure$block) {
    return function (c) {
      closure$block(toEventLoop(c));
      return Unit;
    };
  }
  function _korioSuspendCoroutine$lambda_2(closure$block) {
    return function (c) {
      closure$block(c);
      return Unit;
    };
  }
  function suspendCoroutine$lambda_2(closure$block) {
    return function (c) {
      var safe = SafeContinuation_init(c);
      closure$block(safe);
      return safe.getResult();
    };
  }
  function waitOne_0($receiver, continuation) {
    return suspendCoroutine$lambda_2(_korioSuspendCoroutine$lambda_2(suspendCoroutineEL$lambda_1(suspendCancellableCoroutine$lambda_1(waitOne$lambda_0($receiver)))))(continuation.facade);
  }
  var suspendCoroutineEL = defineInlineFunction('korio-js.com.soywiz.korio.async.suspendCoroutineEL_z3e1t3$', wrapFunction(function () {
    var toEventLoop = _.com.soywiz.korio.async.toEventLoop_5cx0c9$;
    var Unit = Kotlin.kotlin.Unit;
    function suspendCoroutineEL$lambda(closure$block) {
      return function (c) {
        closure$block(toEventLoop(c));
        return Unit;
      };
    }
    function _korioSuspendCoroutine$lambda(closure$block) {
      return function (c) {
        closure$block(c);
        return Unit;
      };
    }
    var SafeContinuation_init = Kotlin.kotlin.coroutines.experimental.SafeContinuation_init_n4f53e$;
    function suspendCoroutine$lambda(closure$block) {
      return function (c) {
        var safe = SafeContinuation_init(c);
        closure$block(safe);
        return safe.getResult();
      };
    }
    return function (block, continuation) {
      return suspendCoroutine$lambda(_korioSuspendCoroutine$lambda(suspendCoroutineEL$lambda(block)))(continuation.facade);
    };
  }));
  function toEventLoop$ObjectLiteral(closure$parent) {
    this.closure$parent = closure$parent;
    this.context_f1iof7$_0 = closure$parent.context;
  }
  Object.defineProperty(toEventLoop$ObjectLiteral.prototype, 'context', {
    get: function () {
      return this.context_f1iof7$_0;
    }
  });
  function toEventLoop$ObjectLiteral$resume$lambda$lambda(closure$parent, closure$value) {
    return function () {
      closure$parent.resume_11rb$(closure$value);
      return Unit;
    };
  }
  toEventLoop$ObjectLiteral.prototype.resume_11rb$ = function (value) {
    this.closure$parent;
    var closure$parent = this.closure$parent;
    get_eventLoop(this.context).queue_o14v8n$(toEventLoop$ObjectLiteral$resume$lambda$lambda(closure$parent, value));
  };
  function toEventLoop$ObjectLiteral$resumeWithException$lambda$lambda(closure$parent, closure$e) {
    return function () {
      closure$parent.resumeWithException_tcv7n7$(closure$e);
      return Unit;
    };
  }
  toEventLoop$ObjectLiteral.prototype.resumeWithException_tcv7n7$ = function (exception) {
    this.closure$parent;
    var closure$parent = this.closure$parent;
    var e = ExceptionHook_getInstance().hook_849n7l$(exception);
    get_eventLoop(this.context).queue_o14v8n$(toEventLoop$ObjectLiteral$resumeWithException$lambda$lambda(closure$parent, e));
  };
  toEventLoop$ObjectLiteral.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    interfaces: [Continuation]
  };
  function toEventLoop($receiver) {
    var parent = $receiver;
    return new toEventLoop$ObjectLiteral(parent);
  }
  function CheckRunning() {
  }
  CheckRunning.$metadata$ = {
    kind: Kotlin.Kind.INTERFACE,
    simpleName: 'CheckRunning',
    interfaces: []
  };
  function get_eventLoop_1($receiver) {
    return get_eventLoop($receiver.coroutineContext);
  }
  function parallel$lambda(closure$tasks_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$parallel$lambda(closure$tasks_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$parallel$lambda(closure$tasks_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$closure$tasks = closure$tasks_0;
    this.local$$receiver = void 0;
    this.local$destination = void 0;
    this.local$tmp$ = void 0;
    this.local$item = void 0;
    this.local$$receiver_0 = $receiver_0;
  }
  Coroutine$parallel$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$parallel$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$parallel$lambda.prototype.constructor = Coroutine$parallel$lambda;
  Coroutine$parallel$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$$receiver = this.local$closure$tasks;
            this.local$destination = ArrayList_init(this.local$$receiver.length);
            for (this.local$tmp$ = 0; this.local$tmp$ !== this.local$$receiver.length; ++this.local$tmp$) {
              this.local$item = this.local$$receiver[this.local$tmp$];
              this.local$destination.add_11rb$(go(this.local$$receiver_0, this.local$item));
            }

            this.state_0 = 2;
            this.result_0 = await_0(this.local$destination, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function parallel(tasks, continuation) {
    return withCoroutineContext(parallel$lambda(tasks), continuation);
  }
  function spawn(context, task) {
    var deferred = new Promise$Deferred();
    korioStartCoroutine_0(task, deferred.toContinuation_dvqyjb$(context));
    return deferred.promise;
  }
  function spawn$lambda(closure$task_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$spawn$lambda(closure$task_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$spawn$lambda(closure$task_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$closure$task = closure$task_0;
    this.local$deferred = void 0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$spawn$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$spawn$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$spawn$lambda.prototype.constructor = Coroutine$spawn$lambda;
  Coroutine$spawn$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$deferred = new Promise$Deferred();
            korioStartCoroutine_0(this.local$closure$task, this.local$deferred.toContinuation_dvqyjb$(this.local$$receiver));
            return this.local$deferred.promise;
          case 1:
            throw this.exception_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function spawn_0(task, continuation) {
    return withCoroutineContext(spawn$lambda(task), continuation);
  }
  function CoroutineContextHolder() {
  }
  CoroutineContextHolder.$metadata$ = {
    kind: Kotlin.Kind.INTERFACE,
    simpleName: 'CoroutineContextHolder',
    interfaces: []
  };
  function async(context, task) {
    return spawn(context, task);
  }
  function go(context, task) {
    return spawn(context, task);
  }
  function go_0($receiver, task) {
    return spawn($receiver.coroutineContext, task);
  }
  function async_0($receiver, task) {
    return spawn($receiver.coroutineContext, task);
  }
  function spawn_1($receiver, task) {
    return spawn($receiver.coroutineContext, task);
  }
  function async$lambda$lambda(closure$task_0, this$_0) {
    return function (continuation_0, suspended) {
      var instance = new Coroutine$async$lambda$lambda(closure$task_0, this$_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$async$lambda$lambda(closure$task_0, this$_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$closure$task = closure$task_0;
    this.local$this$ = this$_0;
  }
  Coroutine$async$lambda$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$async$lambda$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$async$lambda$lambda.prototype.constructor = Coroutine$async$lambda$lambda;
  Coroutine$async$lambda$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$closure$task(this.local$this$, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function async$lambda(closure$task_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$async$lambda(closure$task_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$async$lambda(closure$task_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$closure$task = closure$task_0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$async$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$async$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$async$lambda.prototype.constructor = Coroutine$async$lambda;
  Coroutine$async$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            return spawn(this.local$$receiver, async$lambda$lambda(this.local$closure$task, this.local$$receiver));
          case 1:
            throw this.exception_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function async_1(task, continuation) {
    return withCoroutineContext(async$lambda(task), continuation);
  }
  function go$lambda$lambda(closure$task_0, this$_0) {
    return function (continuation_0, suspended) {
      var instance = new Coroutine$go$lambda$lambda(closure$task_0, this$_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$go$lambda$lambda(closure$task_0, this$_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$closure$task = closure$task_0;
    this.local$this$ = this$_0;
  }
  Coroutine$go$lambda$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$go$lambda$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$go$lambda$lambda.prototype.constructor = Coroutine$go$lambda$lambda;
  Coroutine$go$lambda$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$closure$task(this.local$this$, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function go$lambda(closure$task_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$go$lambda(closure$task_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$go$lambda(closure$task_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$closure$task = closure$task_0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$go$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$go$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$go$lambda.prototype.constructor = Coroutine$go$lambda;
  Coroutine$go$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            return spawn(this.local$$receiver, go$lambda$lambda(this.local$closure$task, this.local$$receiver));
          case 1:
            throw this.exception_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function go_1(task, continuation) {
    return withCoroutineContext(go$lambda(task), continuation);
  }
  function async$lambda_0(closure$task_0, this$async_0) {
    return function (continuation_0, suspended) {
      var instance = new Coroutine$async$lambda_0(closure$task_0, this$async_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$async$lambda_0(closure$task_0, this$async_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$closure$task = closure$task_0;
    this.local$this$async = this$async_0;
  }
  Coroutine$async$lambda_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$async$lambda_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$async$lambda_0.prototype.constructor = Coroutine$async$lambda_0;
  Coroutine$async$lambda_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$closure$task(this.local$this$async.coroutineContext, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function async_2($receiver, task) {
    return spawn($receiver.coroutineContext, async$lambda_0(task, $receiver));
  }
  function async$lambda_1(closure$task_0, this$async_0) {
    return function (continuation_0, suspended) {
      var instance = new Coroutine$async$lambda_1(closure$task_0, this$async_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$async$lambda_1(closure$task_0, this$async_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$closure$task = closure$task_0;
    this.local$this$async = this$async_0;
  }
  Coroutine$async$lambda_1.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$async$lambda_1.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$async$lambda_1.prototype.constructor = Coroutine$async$lambda_1;
  Coroutine$async$lambda_1.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$closure$task(this.local$this$async, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function async_3($receiver, task) {
    return spawn($receiver, async$lambda_1(task, $receiver));
  }
  function go$lambda_0(closure$task_0, this$go_0) {
    return function (continuation_0, suspended) {
      var instance = new Coroutine$go$lambda_0(closure$task_0, this$go_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$go$lambda_0(closure$task_0, this$go_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$closure$task = closure$task_0;
    this.local$this$go = this$go_0;
  }
  Coroutine$go$lambda_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$go$lambda_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$go$lambda_0.prototype.constructor = Coroutine$go$lambda_0;
  Coroutine$go$lambda_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$closure$task(this.local$this$go.coroutineContext, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function go_2($receiver, task) {
    return spawn($receiver.coroutineContext, go$lambda_0(task, $receiver));
  }
  function go$lambda_1(closure$task_0, this$go_0) {
    return function (continuation_0, suspended) {
      var instance = new Coroutine$go$lambda_1(closure$task_0, this$go_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$go$lambda_1(closure$task_0, this$go_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$closure$task = closure$task_0;
    this.local$this$go = this$go_0;
  }
  Coroutine$go$lambda_1.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$go$lambda_1.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$go$lambda_1.prototype.constructor = Coroutine$go$lambda_1;
  Coroutine$go$lambda_1.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$closure$task(this.local$this$go, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function go_3($receiver, task) {
    return spawn($receiver, go$lambda_1(task, $receiver));
  }
  function await$lambda(this$await, closure$receiver) {
    return function (c) {
      korioStartCoroutine(this$await, closure$receiver, c);
      return Unit;
    };
  }
  function korioSuspendCoroutine$lambda_0(closure$block) {
    return function (c) {
      closure$block(toEventLoop(c));
      return Unit;
    };
  }
  function _korioSuspendCoroutine$lambda_3(closure$block) {
    return function (c) {
      closure$block(c);
      return Unit;
    };
  }
  function suspendCoroutine$lambda_3(closure$block) {
    return function (c) {
      var safe = SafeContinuation_init(c);
      closure$block(safe);
      return safe.getResult();
    };
  }
  function await_1($receiver, receiver, continuation) {
    return suspendCoroutine$lambda_3(_korioSuspendCoroutine$lambda_3(korioSuspendCoroutine$lambda_0(await$lambda($receiver, receiver))))(continuation.facade);
  }
  function await$lambda_0(this$await) {
    return function (c) {
      korioStartCoroutine_0(this$await, c);
      return Unit;
    };
  }
  function await_2($receiver, continuation) {
    return suspendCoroutine$lambda_3(_korioSuspendCoroutine$lambda_3(korioSuspendCoroutine$lambda_0(await$lambda_0($receiver))))(continuation.facade);
  }
  function execAndForget$lambda(this$execAndForget_0, closure$receiver_0) {
    return function (continuation_0, suspended) {
      var instance = new Coroutine$execAndForget$lambda(this$execAndForget_0, closure$receiver_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$execAndForget$lambda(this$execAndForget_0, closure$receiver_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$this$execAndForget = this$execAndForget_0;
    this.local$closure$receiver = closure$receiver_0;
  }
  Coroutine$execAndForget$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$execAndForget$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$execAndForget$lambda.prototype.constructor = Coroutine$execAndForget$lambda;
  Coroutine$execAndForget$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = await_1(this.local$this$execAndForget, this.local$closure$receiver, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function execAndForget($receiver, context, receiver) {
    var tmp$;
    korioStartCoroutine_0(execAndForget$lambda($receiver, receiver), Kotlin.isType(tmp$ = new EmptyContinuation(context), Continuation) ? tmp$ : Kotlin.throwCCE());
  }
  function execAndForget$lambda_0(this$execAndForget_0) {
    return function (continuation_0, suspended) {
      var instance = new Coroutine$execAndForget$lambda_0(this$execAndForget_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$execAndForget$lambda_0(this$execAndForget_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$this$execAndForget = this$execAndForget_0;
  }
  Coroutine$execAndForget$lambda_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$execAndForget$lambda_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$execAndForget$lambda_0.prototype.constructor = Coroutine$execAndForget$lambda_0;
  Coroutine$execAndForget$lambda_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = await_2(this.local$this$execAndForget, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function execAndForget_0($receiver, context) {
    var tmp$;
    korioStartCoroutine_0(execAndForget$lambda_0($receiver), Kotlin.isType(tmp$ = new EmptyContinuation(context), Continuation) ? tmp$ : Kotlin.throwCCE());
  }
  function EmptyContinuation(context) {
    this.context_t0vs1j$_0 = context;
  }
  Object.defineProperty(EmptyContinuation.prototype, 'context', {
    get: function () {
      return this.context_t0vs1j$_0;
    }
  });
  EmptyContinuation.prototype.resume_11rb$ = function (value) {
  };
  EmptyContinuation.prototype.resumeWithException_tcv7n7$ = function (exception) {
    printStackTrace(ExceptionHook_getInstance().hook_849n7l$(exception));
  };
  EmptyContinuation.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'EmptyContinuation',
    interfaces: [Continuation]
  };
  var spawnAndForget = defineInlineFunction('korio-js.com.soywiz.korio.async.spawnAndForget_g3zeo5$', wrapFunction(function () {
    var EmptyContinuation_init = _.com.soywiz.korio.async.EmptyContinuation;
    var Continuation = Kotlin.kotlin.coroutines.experimental.Continuation;
    var korioStartCoroutine = _.com.soywiz.korio.coroutine.korioStartCoroutine_xtwlez$;
    return function (context, task) {
      var tmp$;
      korioStartCoroutine(task, Kotlin.isType(tmp$ = new EmptyContinuation_init(context), Continuation) ? tmp$ : Kotlin.throwCCE());
    };
  }));
  function spawnAndForget$lambda(closure$task_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$spawnAndForget$lambda(closure$task_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$spawnAndForget$lambda(closure$task_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$closure$task = closure$task_0;
    this.local$tmp$ = void 0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$spawnAndForget$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$spawnAndForget$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$spawnAndForget$lambda.prototype.constructor = Coroutine$spawnAndForget$lambda;
  Coroutine$spawnAndForget$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            korioStartCoroutine_0(this.local$closure$task, Kotlin.isType(this.local$tmp$ = new EmptyContinuation(this.local$$receiver), Continuation) ? this.local$tmp$ : Kotlin.throwCCE());
            return Unit;
          case 1:
            throw this.exception_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function spawnAndForget_0(task, continuation) {
    return withCoroutineContext(spawnAndForget$lambda(task), continuation);
  }
  var spawnAndForget_1 = defineInlineFunction('korio-js.com.soywiz.korio.async.spawnAndForget_3fah24$', wrapFunction(function () {
    var EmptyContinuation_init = _.com.soywiz.korio.async.EmptyContinuation;
    var korioStartCoroutine = _.com.soywiz.korio.coroutine.korioStartCoroutine_uao1qo$;
    return function (context, value, task) {
      korioStartCoroutine(task, value, new EmptyContinuation_init(context));
    };
  }));
  function syncTest(block) {
    sync(new EventLoopTest(), 10, block);
  }
  function sync$ObjectLiteral(closure$result, closure$el) {
    this.closure$result = closure$result;
    this.context_syir6n$_0 = closure$el.coroutineContext;
  }
  Object.defineProperty(sync$ObjectLiteral.prototype, 'context', {
    get: function () {
      return this.context_syir6n$_0;
    }
  });
  sync$ObjectLiteral.prototype.resume_11rb$ = function (value) {
    this.closure$result;
    var closure$result = this.closure$result;
    tasksInProgress.decrementAndGet();
    closure$result.v = value;
  };
  sync$ObjectLiteral.prototype.resumeWithException_tcv7n7$ = function (exception) {
    this.closure$result;
    var closure$result = this.closure$result;
    var e = ExceptionHook_getInstance().hook_849n7l$(exception);
    tasksInProgress.decrementAndGet();
    closure$result.v = e;
  };
  sync$ObjectLiteral.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    interfaces: [Continuation]
  };
  function sync(el, step, block) {
    if (step === void 0)
      step = 10;
    var tmp$;
    if (OS_getInstance().isJs)
      throw new UnsupportedOperationException('sync block is not supported on javascript target. It is intended for testing.');
    var result = {v: null};
    tasksInProgress.incrementAndGet();
    korioStartCoroutine(block, el, new sync$ObjectLiteral(result, el));
    while (result.v == null) {
      Thread_sleep(Kotlin.Long.ONE);
      el.step_za3lpa$(step);
    }
    if (Kotlin.isType(result.v, Throwable))
      throw Kotlin.isType(tmp$ = result.v, Throwable) ? tmp$ : Kotlin.throwCCE();
    return Unit;
  }
  function sync$ObjectLiteral_0(closure$result, closure$el) {
    this.closure$result = closure$result;
    this.context_syir6n$_0 = (new CoroutineCancelContext()).plus_dvqyjb$(new EventLoopCoroutineContext(closure$el));
  }
  Object.defineProperty(sync$ObjectLiteral_0.prototype, 'context', {
    get: function () {
      return this.context_syir6n$_0;
    }
  });
  sync$ObjectLiteral_0.prototype.resume_11rb$ = function (value) {
    this.closure$result;
    var closure$result = this.closure$result;
    tasksInProgress.decrementAndGet();
    closure$result.v = value;
  };
  sync$ObjectLiteral_0.prototype.resumeWithException_tcv7n7$ = function (exception) {
    this.closure$result;
    var closure$result = this.closure$result;
    var e = ExceptionHook_getInstance().hook_849n7l$(exception);
    tasksInProgress.decrementAndGet();
    closure$result.v = e;
  };
  sync$ObjectLiteral_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    interfaces: [Continuation]
  };
  function sync_0(block) {
    var tmp$, tmp$_0;
    if (OS_getInstance().isJs)
      throw new UnsupportedOperationException('sync block is not supported on javascript target. It is intended for testing.');
    var result = {v: null};
    var el = eventLoopFactoryDefaultImpl.createEventLoop();
    tasksInProgress.incrementAndGet();
    korioStartCoroutine_0(block, new sync$ObjectLiteral_0(result, el));
    while (result.v == null)
      Thread_sleep(Kotlin.Long.ONE);
    if (Kotlin.isType(result.v, Throwable))
      throw Kotlin.isType(tmp$ = result.v, Throwable) ? tmp$ : Kotlin.throwCCE();
    return (tmp$_0 = result.v) == null || Kotlin.isType(tmp$_0, Any) ? tmp$_0 : Kotlin.throwCCE();
  }
  function SuspendingSequenceBuilder() {
  }
  SuspendingSequenceBuilder.$metadata$ = {
    kind: Kotlin.Kind.INTERFACE,
    simpleName: 'SuspendingSequenceBuilder',
    interfaces: []
  };
  function SuspendingSequence() {
  }
  SuspendingSequence.$metadata$ = {
    kind: Kotlin.Kind.INTERFACE,
    simpleName: 'SuspendingSequence',
    interfaces: []
  };
  function SuspendingIterator() {
  }
  SuspendingIterator.$metadata$ = {
    kind: Kotlin.Kind.INTERFACE,
    simpleName: 'SuspendingIterator',
    interfaces: []
  };
  function suspendingSequence$ObjectLiteral(closure$context, closure$block) {
    this.closure$context = closure$context;
    this.closure$block = closure$block;
  }
  suspendingSequence$ObjectLiteral.prototype.iterator = function () {
    return suspendingIterator(this.closure$context, this.closure$block);
  };
  suspendingSequence$ObjectLiteral.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    interfaces: [SuspendingSequence]
  };
  function suspendingSequence(context, block) {
    return new suspendingSequence$ObjectLiteral(context, block);
  }
  function suspendingIterator(context, block) {
    var $receiver = new SuspendingIteratorCoroutine(context);
    $receiver.nextStep = korioCreateCoroutine_0(block, $receiver, $receiver);
    return $receiver;
  }
  function SuspendingIteratorCoroutine(context) {
    this.context_v8m0nr$_0 = context;
    this.state = SuspendingIteratorCoroutine$State$INITIAL_getInstance();
    this.nextValue = null;
    this.nextStep = null;
    this.computeContinuation = null;
  }
  Object.defineProperty(SuspendingIteratorCoroutine.prototype, 'context', {
    get: function () {
      return this.context_v8m0nr$_0;
    }
  });
  function SuspendingIteratorCoroutine$State(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function SuspendingIteratorCoroutine$State_initFields() {
    SuspendingIteratorCoroutine$State_initFields = function () {
    };
    SuspendingIteratorCoroutine$State$INITIAL_instance = new SuspendingIteratorCoroutine$State('INITIAL', 0);
    SuspendingIteratorCoroutine$State$COMPUTING_HAS_NEXT_instance = new SuspendingIteratorCoroutine$State('COMPUTING_HAS_NEXT', 1);
    SuspendingIteratorCoroutine$State$COMPUTING_NEXT_instance = new SuspendingIteratorCoroutine$State('COMPUTING_NEXT', 2);
    SuspendingIteratorCoroutine$State$COMPUTED_instance = new SuspendingIteratorCoroutine$State('COMPUTED', 3);
    SuspendingIteratorCoroutine$State$DONE_instance = new SuspendingIteratorCoroutine$State('DONE', 4);
  }
  var SuspendingIteratorCoroutine$State$INITIAL_instance;
  function SuspendingIteratorCoroutine$State$INITIAL_getInstance() {
    SuspendingIteratorCoroutine$State_initFields();
    return SuspendingIteratorCoroutine$State$INITIAL_instance;
  }
  var SuspendingIteratorCoroutine$State$COMPUTING_HAS_NEXT_instance;
  function SuspendingIteratorCoroutine$State$COMPUTING_HAS_NEXT_getInstance() {
    SuspendingIteratorCoroutine$State_initFields();
    return SuspendingIteratorCoroutine$State$COMPUTING_HAS_NEXT_instance;
  }
  var SuspendingIteratorCoroutine$State$COMPUTING_NEXT_instance;
  function SuspendingIteratorCoroutine$State$COMPUTING_NEXT_getInstance() {
    SuspendingIteratorCoroutine$State_initFields();
    return SuspendingIteratorCoroutine$State$COMPUTING_NEXT_instance;
  }
  var SuspendingIteratorCoroutine$State$COMPUTED_instance;
  function SuspendingIteratorCoroutine$State$COMPUTED_getInstance() {
    SuspendingIteratorCoroutine$State_initFields();
    return SuspendingIteratorCoroutine$State$COMPUTED_instance;
  }
  var SuspendingIteratorCoroutine$State$DONE_instance;
  function SuspendingIteratorCoroutine$State$DONE_getInstance() {
    SuspendingIteratorCoroutine$State_initFields();
    return SuspendingIteratorCoroutine$State$DONE_instance;
  }
  SuspendingIteratorCoroutine$State.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'State',
    interfaces: [Enum]
  };
  function SuspendingIteratorCoroutine$State$values() {
    return [SuspendingIteratorCoroutine$State$INITIAL_getInstance(), SuspendingIteratorCoroutine$State$COMPUTING_HAS_NEXT_getInstance(), SuspendingIteratorCoroutine$State$COMPUTING_NEXT_getInstance(), SuspendingIteratorCoroutine$State$COMPUTED_getInstance(), SuspendingIteratorCoroutine$State$DONE_getInstance()];
  }
  SuspendingIteratorCoroutine$State.values = SuspendingIteratorCoroutine$State$values;
  function SuspendingIteratorCoroutine$State$valueOf(name) {
    switch (name) {
      case 'INITIAL':
        return SuspendingIteratorCoroutine$State$INITIAL_getInstance();
      case 'COMPUTING_HAS_NEXT':
        return SuspendingIteratorCoroutine$State$COMPUTING_HAS_NEXT_getInstance();
      case 'COMPUTING_NEXT':
        return SuspendingIteratorCoroutine$State$COMPUTING_NEXT_getInstance();
      case 'COMPUTED':
        return SuspendingIteratorCoroutine$State$COMPUTED_getInstance();
      case 'DONE':
        return SuspendingIteratorCoroutine$State$DONE_getInstance();
      default:Kotlin.throwISE('No enum constant com.soywiz.korio.async.SuspendingIteratorCoroutine.State.' + name);
    }
  }
  SuspendingIteratorCoroutine$State.valueOf_61zpoe$ = SuspendingIteratorCoroutine$State$valueOf;
  function SuspendingIteratorCoroutine$computeHasNext$lambda(this$SuspendingIteratorCoroutine) {
    return function (c) {
      var tmp$;
      this$SuspendingIteratorCoroutine.state = SuspendingIteratorCoroutine$State$COMPUTING_HAS_NEXT_getInstance();
      this$SuspendingIteratorCoroutine.computeContinuation = c;
      ((tmp$ = this$SuspendingIteratorCoroutine.nextStep) != null ? tmp$ : Kotlin.throwNPE()).resume_11rb$(Unit);
      return Unit;
    };
  }
  function korioSuspendCoroutine$lambda_1(closure$block) {
    return function (c) {
      closure$block(toEventLoop(c));
      return Unit;
    };
  }
  function _korioSuspendCoroutine$lambda_4(closure$block) {
    return function (c) {
      closure$block(c);
      return Unit;
    };
  }
  function suspendCoroutine$lambda_4(closure$block) {
    return function (c) {
      var safe = SafeContinuation_init(c);
      closure$block(safe);
      return safe.getResult();
    };
  }
  SuspendingIteratorCoroutine.prototype.computeHasNext = function (continuation) {
    return suspendCoroutine$lambda_4(_korioSuspendCoroutine$lambda_4(korioSuspendCoroutine$lambda_1(SuspendingIteratorCoroutine$computeHasNext$lambda(this))))(continuation.facade);
  };
  function SuspendingIteratorCoroutine$computeNext$lambda(this$SuspendingIteratorCoroutine) {
    return function (c) {
      var tmp$;
      this$SuspendingIteratorCoroutine.state = SuspendingIteratorCoroutine$State$COMPUTING_NEXT_getInstance();
      this$SuspendingIteratorCoroutine.computeContinuation = c;
      ((tmp$ = this$SuspendingIteratorCoroutine.nextStep) != null ? tmp$ : Kotlin.throwNPE()).resume_11rb$(Unit);
      return Unit;
    };
  }
  SuspendingIteratorCoroutine.prototype.computeNext = function (continuation) {
    return suspendCoroutine$lambda_4(_korioSuspendCoroutine$lambda_4(korioSuspendCoroutine$lambda_1(SuspendingIteratorCoroutine$computeNext$lambda(this))))(continuation.facade);
  };
  SuspendingIteratorCoroutine.prototype.hasNext = function (continuation) {
    var tmp$;
    tmp$ = this.state;
    if (Kotlin.equals(tmp$, SuspendingIteratorCoroutine$State$INITIAL_getInstance()))
      return this.computeHasNext(continuation);
    else if (Kotlin.equals(tmp$, SuspendingIteratorCoroutine$State$COMPUTED_getInstance()))
      return true;
    else if (Kotlin.equals(tmp$, SuspendingIteratorCoroutine$State$DONE_getInstance()))
      return false;
    else
      throw new IllegalStateException('Recursive dependency detected -- already computing next');
  };
  SuspendingIteratorCoroutine.prototype.next = function (continuation) {
    var tmp$, tmp$_0;
    tmp$ = this.state;
    if (Kotlin.equals(tmp$, SuspendingIteratorCoroutine$State$INITIAL_getInstance()))
      return this.computeNext(continuation);
    else if (Kotlin.equals(tmp$, SuspendingIteratorCoroutine$State$COMPUTED_getInstance())) {
      this.state = SuspendingIteratorCoroutine$State$INITIAL_getInstance();
      return (tmp$_0 = this.nextValue) == null || Kotlin.isType(tmp$_0, Any) ? tmp$_0 : Kotlin.throwCCE();
    }
     else if (Kotlin.equals(tmp$, SuspendingIteratorCoroutine$State$DONE_getInstance()))
      throw new NoSuchElementException();
    else
      throw new IllegalStateException('Recursive dependency detected -- already computing next');
  };
  SuspendingIteratorCoroutine.prototype.resumeIterator_6taknv$ = function (hasNext) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    tmp$ = this.state;
    if (Kotlin.equals(tmp$, SuspendingIteratorCoroutine$State$COMPUTING_HAS_NEXT_getInstance())) {
      this.state = SuspendingIteratorCoroutine$State$COMPUTED_getInstance();
      (Kotlin.isType(tmp$_0 = this.computeContinuation, Continuation) ? tmp$_0 : Kotlin.throwCCE()).resume_11rb$(hasNext);
    }
     else if (Kotlin.equals(tmp$, SuspendingIteratorCoroutine$State$COMPUTING_NEXT_getInstance())) {
      this.state = SuspendingIteratorCoroutine$State$INITIAL_getInstance();
      (Kotlin.isType(tmp$_1 = this.computeContinuation, Continuation) ? tmp$_1 : Kotlin.throwCCE()).resume_11rb$((tmp$_2 = this.nextValue) == null || Kotlin.isType(tmp$_2, Any) ? tmp$_2 : Kotlin.throwCCE());
    }
     else
      throw new IllegalStateException('Was not supposed to be computing next value. Spurious yield?');
  };
  SuspendingIteratorCoroutine.prototype.resume_11rb$ = function (value) {
    this.nextStep = null;
    this.resumeIterator_6taknv$(false);
  };
  SuspendingIteratorCoroutine.prototype.resumeWithException_tcv7n7$ = function (exception) {
    var tmp$;
    this.nextStep = null;
    this.state = SuspendingIteratorCoroutine$State$DONE_getInstance();
    ((tmp$ = this.computeContinuation) != null ? tmp$ : Kotlin.throwNPE()).resumeWithException_tcv7n7$(exception);
  };
  function SuspendingIteratorCoroutine$yield$lambda(closure$value, this$SuspendingIteratorCoroutine) {
    return function (c) {
      this$SuspendingIteratorCoroutine.nextValue = closure$value;
      this$SuspendingIteratorCoroutine.nextStep = c;
      this$SuspendingIteratorCoroutine.resumeIterator_6taknv$(true);
      return Unit;
    };
  }
  SuspendingIteratorCoroutine.prototype.yield_11rb$ = function (value, continuation) {
    return suspendCoroutine$lambda_4(_korioSuspendCoroutine$lambda_4(korioSuspendCoroutine$lambda_1(SuspendingIteratorCoroutine$yield$lambda(value, this))))(continuation.facade);
  };
  SuspendingIteratorCoroutine.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'SuspendingIteratorCoroutine',
    interfaces: [Continuation, SuspendingSequenceBuilder, SuspendingIterator]
  };
  function asyncGenerate$ObjectLiteral(closure$context, closure$block) {
    this.closure$context = closure$context;
    this.closure$block = closure$block;
  }
  asyncGenerate$ObjectLiteral.prototype.iterator = function () {
    return suspendingIterator(this.closure$context, this.closure$block);
  };
  asyncGenerate$ObjectLiteral.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    interfaces: [SuspendingSequence]
  };
  function asyncGenerate(context, block) {
    return new asyncGenerate$ObjectLiteral(context, block);
  }
  function asyncGenerate$lambda(closure$block_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$asyncGenerate$lambda(closure$block_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$asyncGenerate$lambda(closure$block_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$closure$block = closure$block_0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$asyncGenerate$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$asyncGenerate$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$asyncGenerate$lambda.prototype.constructor = Coroutine$asyncGenerate$lambda;
  Coroutine$asyncGenerate$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            return asyncGenerate(this.local$$receiver, this.local$closure$block);
          case 1:
            throw this.exception_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function asyncGenerate_0(block, continuation) {
    return withCoroutineContext(asyncGenerate$lambda(block), continuation);
  }
  var map = defineInlineFunction('korio-js.com.soywiz.korio.async.map_g3zs6d$', wrapFunction(function () {
    var Unit = Kotlin.kotlin.Unit;
    var asyncGenerate = _.com.soywiz.korio.async.asyncGenerate_33q1hl$;
    var withCoroutineContext = _.com.soywiz.korio.coroutine.withCoroutineContext_3hy5wj$;
    function map$lambda$lambda(this$map, closure$transform) {
      return function ($receiver, continuation) {
        var tmp$;
        tmp$ = this$map.iterator();
        while (true) {
          tmp$.hasNext($this$);
          if (!$this$.$$coroutineResult$$)
            break;
          tmp$.next($this$);
          var e = $this$.$$coroutineResult$$;
          $receiver.yield_11rb$(closure$transform(e), $this$);
          $this$;
        }
        return Unit;
      };
    }
    function map$lambda(this$map, closure$transform) {
      return function ($receiver, continuation) {
        return asyncGenerate($receiver, map$lambda$lambda(this$map, closure$transform));
      };
    }
    return function ($receiver_0, transform_0, continuation_0, suspended) {
      var instance = new Coroutine$map($receiver_0, transform_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }));
  function Coroutine$map($receiver_0, transform_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
    this.local$transform = transform_0;
  }
  Coroutine$map.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$map.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$map.prototype.constructor = Coroutine$map;
  Coroutine$map.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = withCoroutineContext(map$lambda(this.local$$receiver, this.local$transform), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  var filter = defineInlineFunction('korio-js.com.soywiz.korio.async.filter_socpx8$', wrapFunction(function () {
    var Unit = Kotlin.kotlin.Unit;
    var asyncGenerate = _.com.soywiz.korio.async.asyncGenerate_33q1hl$;
    var withCoroutineContext = _.com.soywiz.korio.coroutine.withCoroutineContext_3hy5wj$;
    function filter$lambda$lambda(this$filter, closure$filter) {
      return function ($receiver, continuation) {
        var tmp$;
        tmp$ = this$filter.iterator();
        while (true) {
          tmp$.hasNext($this$);
          if (!$this$.$$coroutineResult$$)
            break;
          tmp$.next($this$);
          var e = $this$.$$coroutineResult$$;
          if (closure$filter(e)) {
            $receiver.yield_11rb$(e, $this$);
            $this$;
          }
        }
        return Unit;
      };
    }
    function filter$lambda(this$filter, closure$filter) {
      return function ($receiver, continuation) {
        return asyncGenerate($receiver, filter$lambda$lambda(this$filter, closure$filter));
      };
    }
    return function ($receiver_0, filter_0, continuation_0, suspended) {
      var instance = new Coroutine$filter($receiver_0, filter_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }));
  function Coroutine$filter($receiver_0, filter_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
    this.local$filter = filter_0;
  }
  Coroutine$filter.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$filter.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$filter.prototype.constructor = Coroutine$filter;
  Coroutine$filter.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = withCoroutineContext(filter$lambda(this.local$$receiver, this.local$filter), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function chunks$lambda$lambda(this$chunks_0, closure$count_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$chunks$lambda$lambda(this$chunks_0, closure$count_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$chunks$lambda$lambda(this$chunks_0, closure$count_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$this$chunks = this$chunks_0;
    this.local$closure$count = closure$count_0;
    this.local$tmp$ = void 0;
    this.local$chunk = void 0;
    this.local$e = void 0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$chunks$lambda$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$chunks$lambda$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$chunks$lambda$lambda.prototype.constructor = Coroutine$chunks$lambda$lambda;
  Coroutine$chunks$lambda$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$chunk = ArrayList_init();
            this.local$tmp$ = this.local$this$chunks.iterator();
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.local$tmp$.hasNext(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            if (!this.result_0) {
              this.state_0 = 8;
              continue;
            }
             else {
              this.state_0 = 4;
              continue;
            }

          case 4:
            this.state_0 = 5;
            this.result_0 = this.local$tmp$.next(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 5:
            this.local$e = this.result_0;
            this.local$chunk.add_11rb$(this.local$e);
            if (this.local$chunk.size > this.local$closure$count) {
              this.state_0 = 6;
              this.result_0 = this.local$$receiver.yield_11rb$(toList(this.local$chunk), this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              break;
            }
             else {
              this.state_0 = 7;
              continue;
            }

          case 6:
            this.local$chunk.clear();
            this.state_0 = 7;
            continue;
          case 7:
            this.state_0 = 2;
            continue;
          case 8:
            if (this.local$chunk.size > 0) {
              this.state_0 = 9;
              this.result_0 = this.local$$receiver.yield_11rb$(toList(this.local$chunk), this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              break;
            }
             else {
              this.state_0 = 10;
              continue;
            }

          case 9:
            return Unit;
          case 10:
            return Unit;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function chunks$lambda(this$chunks_0, closure$count_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$chunks$lambda(this$chunks_0, closure$count_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$chunks$lambda(this$chunks_0, closure$count_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$this$chunks = this$chunks_0;
    this.local$closure$count = closure$count_0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$chunks$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$chunks$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$chunks$lambda.prototype.constructor = Coroutine$chunks$lambda;
  Coroutine$chunks$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            return asyncGenerate(this.local$$receiver, chunks$lambda$lambda(this.local$this$chunks, this.local$closure$count));
          case 1:
            throw this.exception_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function chunks($receiver_0, count_0, continuation_0, suspended) {
    var instance = new Coroutine$chunks($receiver_0, count_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$chunks($receiver_0, count_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
    this.local$count = count_0;
  }
  Coroutine$chunks.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$chunks.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$chunks.prototype.constructor = Coroutine$chunks;
  Coroutine$chunks.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = withCoroutineContext(chunks$lambda(this.local$$receiver, this.local$count), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function toList_3($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$toList($receiver_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$toList($receiver_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$tmp$ = void 0;
    this.local$out = void 0;
    this.local$e = void 0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$toList.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$toList.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$toList.prototype.constructor = Coroutine$toList;
  Coroutine$toList.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$out = ArrayList_init();
            this.local$tmp$ = this.local$$receiver.iterator();
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.local$tmp$.hasNext(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            if (!this.result_0) {
              this.state_0 = 6;
              continue;
            }
             else {
              this.state_0 = 4;
              continue;
            }

          case 4:
            this.state_0 = 5;
            this.result_0 = this.local$tmp$.next(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 5:
            this.local$e = this.result_0;
            this.local$out.add_11rb$(this.local$e);
            this.state_0 = 2;
            continue;
          case 6:
            return this.local$out;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  var fold = defineInlineFunction('korio-js.com.soywiz.korio.async.fold_u821dp$', function ($receiver_0, initial_0, folder_0, continuation_0, suspended) {
    var instance = new Coroutine$fold($receiver_0, initial_0, folder_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  });
  function Coroutine$fold($receiver_0, initial_0, folder_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$tmp$ = void 0;
    this.local$result = void 0;
    this.local$e = void 0;
    this.local$$receiver = $receiver_0;
    this.local$initial = initial_0;
    this.local$folder = folder_0;
  }
  Coroutine$fold.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$fold.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$fold.prototype.constructor = Coroutine$fold;
  Coroutine$fold.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$result = this.local$initial;
            this.local$tmp$ = this.local$$receiver.iterator();
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.local$tmp$.hasNext(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            if (!this.result_0) {
              this.state_0 = 6;
              continue;
            }
             else {
              this.state_0 = 4;
              continue;
            }

          case 4:
            this.state_0 = 5;
            this.result_0 = this.local$tmp$.next(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 5:
            this.local$e = this.result_0;
            this.local$result = this.local$folder(this.local$e, this.local$result);
            this.state_0 = 2;
            continue;
          case 6:
            return this.local$result;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function sum$lambda(a, b) {
    return a + b | 0;
  }
  function sum($receiver, continuation) {
    var tmp$;
    var result = 0;
    tmp$ = $receiver.iterator();
    while (true) {
      tmp$.hasNext($this$);
      if (!$this$.$$coroutineResult$$)
        break;
      tmp$.next($this$);
      var e = $this$.$$coroutineResult$$;
      result = sum$lambda(e, result);
    }
    return result;
  }
  function isEmpty($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$isEmpty($receiver_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$isEmpty($receiver_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$tmp$ = void 0;
    this.local$hasItems = void 0;
    this.local$e = void 0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$isEmpty.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$isEmpty.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$isEmpty.prototype.constructor = Coroutine$isEmpty;
  Coroutine$isEmpty.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$hasItems = false;
            this.local$tmp$ = this.local$$receiver.iterator();
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.local$tmp$.hasNext(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            if (!this.result_0) {
              this.state_0 = 6;
              continue;
            }
             else {
              this.state_0 = 4;
              continue;
            }

          case 4:
            this.state_0 = 5;
            this.result_0 = this.local$tmp$.next(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 5:
            this.local$e = this.result_0;
            this.local$hasItems = true;
            this.state_0 = 6;
            continue;
          case 6:
            return this.local$hasItems;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function isNotEmpty($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$isNotEmpty($receiver_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$isNotEmpty($receiver_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$tmp$ = void 0;
    this.local$hasItems = void 0;
    this.local$e = void 0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$isNotEmpty.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$isNotEmpty.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$isNotEmpty.prototype.constructor = Coroutine$isNotEmpty;
  Coroutine$isNotEmpty.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$hasItems = false;
            this.local$tmp$ = this.local$$receiver.iterator();
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.local$tmp$.hasNext(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            if (!this.result_0) {
              this.state_0 = 6;
              continue;
            }
             else {
              this.state_0 = 4;
              continue;
            }

          case 4:
            this.state_0 = 5;
            this.result_0 = this.local$tmp$.next(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 5:
            this.local$e = this.result_0;
            this.local$hasItems = true;
            this.state_0 = 6;
            continue;
          case 6:
            return !this.local$hasItems;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function firstOrNull_1($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$firstOrNull($receiver_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$firstOrNull($receiver_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$tmp$ = void 0;
    this.local$result = void 0;
    this.local$e = void 0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$firstOrNull.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$firstOrNull.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$firstOrNull.prototype.constructor = Coroutine$firstOrNull;
  Coroutine$firstOrNull.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$result = null;
            this.local$tmp$ = this.local$$receiver.iterator();
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.local$tmp$.hasNext(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            if (!this.result_0) {
              this.state_0 = 6;
              continue;
            }
             else {
              this.state_0 = 4;
              continue;
            }

          case 4:
            this.state_0 = 5;
            this.result_0 = this.local$tmp$.next(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 5:
            this.local$e = this.result_0;
            this.local$result = this.local$e;
            this.state_0 = 6;
            continue;
          case 6:
            return this.local$result;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function take$lambda$lambda(this$take_0, closure$count_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$take$lambda$lambda(this$take_0, closure$count_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$take$lambda$lambda(this$take_0, closure$count_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$this$take = this$take_0;
    this.local$closure$count = closure$count_0;
    this.local$tmp$ = void 0;
    this.local$current = void 0;
    this.local$iterator = void 0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$take$lambda$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$take$lambda$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$take$lambda$lambda.prototype.constructor = Coroutine$take$lambda$lambda;
  Coroutine$take$lambda$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$current = 0;
            this.local$iterator = this.local$this$take.iterator();
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            if (this.local$current < this.local$closure$count) {
              this.state_0 = 3;
              this.result_0 = this.local$iterator.hasNext(this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              break;
            }
             else {
              this.local$tmp$ = false;
              this.state_0 = 4;
              continue;
            }

          case 3:
            this.local$tmp$ = this.result_0;
            this.state_0 = 4;
            continue;
          case 4:
            if (!this.local$tmp$) {
              this.state_0 = 8;
              continue;
            }
             else {
              this.state_0 = 5;
              continue;
            }

          case 5:
            this.state_0 = 6;
            this.result_0 = this.local$iterator.next(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 6:
            this.state_0 = 7;
            this.result_0 = this.local$$receiver.yield_11rb$(this.result_0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 7:
            this.local$current = this.local$current + 1 | 0;
            this.state_0 = 2;
            continue;
          case 8:
            return Unit;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function take$lambda(this$take_0, closure$count_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$take$lambda(this$take_0, closure$count_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$take$lambda(this$take_0, closure$count_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$this$take = this$take_0;
    this.local$closure$count = closure$count_0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$take$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$take$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$take$lambda.prototype.constructor = Coroutine$take$lambda;
  Coroutine$take$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            return asyncGenerate(this.local$$receiver, take$lambda$lambda(this.local$this$take, this.local$closure$count));
          case 1:
            throw this.exception_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function take($receiver_0, count_0, continuation_0, suspended) {
    var instance = new Coroutine$take($receiver_0, count_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$take($receiver_0, count_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
    this.local$count = count_0;
  }
  Coroutine$take.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$take.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$take.prototype.constructor = Coroutine$take;
  Coroutine$take.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = withCoroutineContext(take$lambda(this.local$$receiver, this.local$count), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function AsyncSequenceEmitter() {
    this.$delegate_x4y2y5$_0 = new Extra$Mixin();
    this.signal_0 = new Signal();
    this.queuedElements_0 = ArrayList_init();
    this.closed_0 = false;
  }
  AsyncSequenceEmitter.prototype.close = function () {
    this.closed_0 = true;
    invoke_0(this.signal_0);
  };
  AsyncSequenceEmitter.prototype.emit_trkh7z$ = function (v) {
    this.queuedElements_0.add_11rb$(v);
    invoke_0(this.signal_0);
  };
  AsyncSequenceEmitter.prototype.invoke_trkh7z$ = function (v) {
    this.emit_trkh7z$(v);
  };
  function AsyncSequenceEmitter$toSequence$ObjectLiteral(this$AsyncSequenceEmitter) {
    this.this$AsyncSequenceEmitter = this$AsyncSequenceEmitter;
  }
  function AsyncSequenceEmitter$toSequence$ObjectLiteral$iterator$ObjectLiteral(this$AsyncSequenceEmitter) {
    this.this$AsyncSequenceEmitter = this$AsyncSequenceEmitter;
  }
  AsyncSequenceEmitter$toSequence$ObjectLiteral$iterator$ObjectLiteral.prototype.hasNext = function (continuation_0, suspended) {
    var instance = new Coroutine$hasNext(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$hasNext($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$this$AsyncSequenceEmitter = void 0;
  }
  Coroutine$hasNext.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$hasNext.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$hasNext.prototype.constructor = Coroutine$hasNext;
  Coroutine$hasNext.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.$this.this$AsyncSequenceEmitter;
            this.$this.this$AsyncSequenceEmitter;
            this.local$this$AsyncSequenceEmitter = this.$this.this$AsyncSequenceEmitter;
            if (!(this.local$this$AsyncSequenceEmitter.queuedElements_0.isEmpty() && !this.local$this$AsyncSequenceEmitter.closed_0)) {
              this.state_0 = 5;
              continue;
            }
             else {
              this.state_0 = 3;
              continue;
            }

          case 3:
            this.state_0 = 4;
            this.result_0 = waitOne_0(this.$this.this$AsyncSequenceEmitter.signal_0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 4:
            this.state_0 = 2;
            continue;
          case 5:
            return !this.$this.this$AsyncSequenceEmitter.queuedElements_0.isEmpty() || !this.$this.this$AsyncSequenceEmitter.closed_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  AsyncSequenceEmitter$toSequence$ObjectLiteral$iterator$ObjectLiteral.prototype.next = function (continuation_0, suspended) {
    var instance = new Coroutine$next(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$next($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$this$AsyncSequenceEmitter = void 0;
    this.local$this$AsyncSequenceEmitter_0 = void 0;
  }
  Coroutine$next.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$next.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$next.prototype.constructor = Coroutine$next;
  Coroutine$next.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.$this.this$AsyncSequenceEmitter;
            this.$this.this$AsyncSequenceEmitter;
            this.local$this$AsyncSequenceEmitter = this.$this.this$AsyncSequenceEmitter;
            if (!(this.local$this$AsyncSequenceEmitter.queuedElements_0.isEmpty() && !this.local$this$AsyncSequenceEmitter.closed_0)) {
              this.state_0 = 5;
              continue;
            }
             else {
              this.state_0 = 3;
              continue;
            }

          case 3:
            this.state_0 = 4;
            this.result_0 = waitOne_0(this.$this.this$AsyncSequenceEmitter.signal_0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 4:
            this.state_0 = 2;
            continue;
          case 5:
            if (this.$this.this$AsyncSequenceEmitter.queuedElements_0.isEmpty() && this.$this.this$AsyncSequenceEmitter.closed_0)
              throw new RuntimeException('Already closed');
            this.$this.this$AsyncSequenceEmitter;
            this.$this.this$AsyncSequenceEmitter;
            this.local$this$AsyncSequenceEmitter_0 = this.$this.this$AsyncSequenceEmitter;
            return this.local$this$AsyncSequenceEmitter_0.queuedElements_0.removeAt_za3lpa$(this.local$this$AsyncSequenceEmitter_0.queuedElements_0.size - 1 | 0);
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  AsyncSequenceEmitter$toSequence$ObjectLiteral$iterator$ObjectLiteral.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    interfaces: [SuspendingIterator]
  };
  AsyncSequenceEmitter$toSequence$ObjectLiteral.prototype.iterator = function () {
    return new AsyncSequenceEmitter$toSequence$ObjectLiteral$iterator$ObjectLiteral(this.this$AsyncSequenceEmitter);
  };
  AsyncSequenceEmitter$toSequence$ObjectLiteral.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    interfaces: [SuspendingSequence]
  };
  AsyncSequenceEmitter.prototype.toSequence = function () {
    return new AsyncSequenceEmitter$toSequence$ObjectLiteral(this);
  };
  Object.defineProperty(AsyncSequenceEmitter.prototype, 'extra', {
    get: function () {
      return this.$delegate_x4y2y5$_0.extra;
    },
    set: function (tmp$) {
      this.$delegate_x4y2y5$_0.extra = tmp$;
    }
  });
  AsyncSequenceEmitter.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'AsyncSequenceEmitter',
    interfaces: [Extra]
  };
  function SuspendingSequenceBuilder2() {
    this.emitter = new AsyncSequenceEmitter();
  }
  SuspendingSequenceBuilder2.prototype.yield_trkh7z$ = function (value) {
    this.emitter.emit_trkh7z$(value);
  };
  SuspendingSequenceBuilder2.prototype.close = function () {
    this.emitter.close();
  };
  SuspendingSequenceBuilder2.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'SuspendingSequenceBuilder2',
    interfaces: []
  };
  function SuspendingSequence2() {
  }
  SuspendingSequence2.$metadata$ = {
    kind: Kotlin.Kind.INTERFACE,
    simpleName: 'SuspendingSequence2',
    interfaces: []
  };
  function asyncGenerate2$ObjectLiteral(closure$block) {
    this.closure$block = closure$block;
  }
  asyncGenerate2$ObjectLiteral.prototype.iterator = function (continuation_0, suspended) {
    var instance = new Coroutine$iterator(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$iterator($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$builder = void 0;
  }
  Coroutine$iterator.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$iterator.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$iterator.prototype.constructor = Coroutine$iterator;
  Coroutine$iterator.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$builder = new SuspendingSequenceBuilder2();
            this.state_0 = 2;
            this.result_0 = this.$this.closure$block(this.local$builder, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.local$builder.emitter.toSequence().iterator();
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  asyncGenerate2$ObjectLiteral.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    interfaces: [SuspendingSequence2]
  };
  function asyncGenerate2(block_0, continuation_0, suspended) {
    var instance = new Coroutine$asyncGenerate2(block_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$asyncGenerate2(block_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$block = block_0;
  }
  Coroutine$asyncGenerate2.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$asyncGenerate2.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$asyncGenerate2.prototype.constructor = Coroutine$asyncGenerate2;
  Coroutine$asyncGenerate2.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            return new asyncGenerate2$ObjectLiteral(this.local$block);
          case 1:
            throw this.exception_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function asyncGenerate3$ObjectLiteral(closure$block) {
    this.closure$block = closure$block;
  }
  asyncGenerate3$ObjectLiteral.prototype.iterator = function () {
    var builder = new SuspendingSequenceBuilder2();
    this.closure$block(builder);
    return builder.emitter.toSequence().iterator();
  };
  asyncGenerate3$ObjectLiteral.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    interfaces: [SuspendingSequence]
  };
  function asyncGenerate3(block) {
    return new asyncGenerate3$ObjectLiteral(block);
  }
  function Consumer() {
  }
  Consumer.prototype.consume_4l50dc$ = function (cancel, continuation, callback$default) {
    if (cancel === void 0)
      cancel = null;
    return callback$default ? callback$default(cancel, continuation) : this.consume_4l50dc$$default(cancel, continuation);
  };
  Consumer.$metadata$ = {
    kind: Kotlin.Kind.INTERFACE,
    simpleName: 'Consumer',
    interfaces: [Closeable]
  };
  function Producer() {
  }
  Producer.$metadata$ = {
    kind: Kotlin.Kind.INTERFACE,
    simpleName: 'Producer',
    interfaces: [Closeable]
  };
  function ProduceConsumer() {
    this.items_fetw3w$_0 = new LinkedList();
    this.consumers_29a91z$_0 = new LinkedList();
    this.closed_17zdik$_0 = false;
  }
  Object.defineProperty(ProduceConsumer.prototype, 'availableCount', {
    get: function () {
      return this.items_fetw3w$_0.size;
    }
  });
  ProduceConsumer.prototype.produce_11rb$ = function (v) {
    this.items_fetw3w$_0.addLast_11rb$(v);
    this.flush_gy2s28$_0();
  };
  ProduceConsumer.prototype.close = function () {
    this.items_fetw3w$_0.addLast_11rb$(null);
    this.closed_17zdik$_0 = true;
    this.flush_gy2s28$_0();
  };
  ProduceConsumer.prototype.flush_gy2s28$_0 = function () {
    var tmp$;
    while (true) {
      var done = {v: false};
      var consumer = {v: null};
      var item = {v: null};
      if (this.consumers_29a91z$_0.isNotEmpty() && this.items_fetw3w$_0.isNotEmpty()) {
        consumer.v = this.consumers_29a91z$_0.removeFirst();
        item.v = this.items_fetw3w$_0.removeFirst();
      }
       else {
        done.v = true;
      }
      if (done.v)
        break;
      ((tmp$ = consumer.v) != null ? tmp$ : Kotlin.throwNPE())(item.v);
    }
  };
  function ProduceConsumer$consume$lambda$lambda(closure$c) {
    return function (it) {
      closure$c.resume_11rb$(it);
      return Unit;
    };
  }
  function ProduceConsumer$consume$lambda$lambda_0(this$ProduceConsumer, closure$consumer, closure$c) {
    return function (it) {
      var this$ProduceConsumer_0 = this$ProduceConsumer;
      var closure$consumer_0 = closure$consumer;
      this$ProduceConsumer_0.consumers_29a91z$_0.remove_11rb$(closure$consumer_0);
      closure$c.resumeWithException_tcv7n7$(new CancellationException(''));
      return Unit;
    };
  }
  function ProduceConsumer$consume$lambda(closure$cancel, this$ProduceConsumer) {
    return function (c) {
      var consumer = ProduceConsumer$consume$lambda$lambda(c);
      if (closure$cancel != null) {
        closure$cancel.invoke_qlkmfe$(ProduceConsumer$consume$lambda$lambda_0(this$ProduceConsumer, consumer, c));
      }
      this$ProduceConsumer.consumers_29a91z$_0.add_11rb$(consumer);
      this$ProduceConsumer.flush_gy2s28$_0();
      return Unit;
    };
  }
  function korioSuspendCoroutine$lambda_2(closure$block) {
    return function (c) {
      closure$block(toEventLoop(c));
      return Unit;
    };
  }
  function _korioSuspendCoroutine$lambda_5(closure$block) {
    return function (c) {
      closure$block(c);
      return Unit;
    };
  }
  function suspendCoroutine$lambda_5(closure$block) {
    return function (c) {
      var safe = SafeContinuation_init(c);
      closure$block(safe);
      return safe.getResult();
    };
  }
  ProduceConsumer.prototype.consume_4l50dc$$default = function (cancel, continuation) {
    return suspendCoroutine$lambda_5(_korioSuspendCoroutine$lambda_5(korioSuspendCoroutine$lambda_2(ProduceConsumer$consume$lambda(cancel, this))))(continuation.facade);
  };
  ProduceConsumer.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'ProduceConsumer',
    interfaces: [Producer, Consumer]
  };
  function asyncProducer(context, callback) {
    var p = new ProduceConsumer();
    korioStartCoroutine(callback, p, new EmptyContinuation(context));
    return p;
  }
  function toAsyncOutputStream($receiver) {
    return new AsyncProducerStream($receiver);
  }
  function toAsyncInputStream($receiver) {
    return new AsyncConsumerStream($receiver);
  }
  function AsyncProducerStream(producer) {
    this.producer = producer;
  }
  AsyncProducerStream.prototype.write_mj6st8$$default = function (buffer, offset, len, continuation) {
    var tmp$ = this.producer;
    var toIndex = offset + len | 0;
    tmp$.produce_11rb$(buffer.slice(offset, toIndex));
  };
  AsyncProducerStream.prototype.close = function (continuation) {
    this.producer.close();
  };
  AsyncProducerStream.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'AsyncProducerStream',
    interfaces: [AsyncOutputStream]
  };
  function AsyncConsumerStream(consumer) {
    this.consumer = consumer;
    this.eof = false;
    this.current = BYTES_EMPTY;
    this.currentPos = 0;
  }
  Object.defineProperty(AsyncConsumerStream.prototype, 'available', {
    get: function () {
      return this.current.length - this.currentPos | 0;
    }
  });
  AsyncConsumerStream.prototype.ensureNonEmptyBuffer_0 = function (continuation_0, suspended) {
    var instance = new Coroutine$ensureNonEmptyBuffer_0(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$ensureNonEmptyBuffer_0($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$item = void 0;
  }
  Coroutine$ensureNonEmptyBuffer_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$ensureNonEmptyBuffer_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$ensureNonEmptyBuffer_0.prototype.constructor = Coroutine$ensureNonEmptyBuffer_0;
  Coroutine$ensureNonEmptyBuffer_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            if (this.$this.available !== 0) {
              this.state_0 = 5;
              continue;
            }

            this.$this.currentPos = 0;
            this.state_0 = 3;
            this.result_0 = this.$this.consumer.consume_4l50dc$(void 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            this.local$item = this.result_0;
            if (this.local$item != null) {
              this.$this.current = this.local$item;
              this.state_0 = 4;
              continue;
            }
             else {
              this.$this.current = BYTES_EMPTY;
              this.$this.eof = true;
              this.state_0 = 5;
              continue;
            }

          case 4:
            this.state_0 = 2;
            continue;
          case 5:
            return;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  var Math_0 = Math;
  AsyncConsumerStream.prototype.read_mj6st8$ = function (buffer_0, offset_0, len_0, continuation_0, suspended) {
    var instance = new Coroutine$read_mj6st8$(this, buffer_0, offset_0, len_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$read_mj6st8$($this, buffer_0, offset_0, len_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$b = void 0;
    this.local$actualRead = void 0;
    this.local$buffer = buffer_0;
    this.local$offset = offset_0;
    this.local$len = len_0;
  }
  Coroutine$read_mj6st8$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$read_mj6st8$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$read_mj6st8$.prototype.constructor = Coroutine$read_mj6st8$;
  Coroutine$read_mj6st8$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.ensureNonEmptyBuffer_0(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            if (this.$this.eof) {
              return -1;
            }
             else {
              this.state_0 = 3;
              continue;
            }

          case 3:
            this.local$b = this.$this.available;
            this.local$actualRead = Math_0.min(this.local$len, this.local$b);
            copyRangeTo_1(this.$this.current, this.$this.currentPos, this.local$buffer, this.local$offset, this.local$actualRead);
            this.$this.currentPos = this.$this.currentPos + this.local$actualRead | 0;
            return this.local$actualRead;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  AsyncConsumerStream.prototype.close = function (continuation) {
    this.consumer.close();
  };
  AsyncConsumerStream.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'AsyncConsumerStream',
    interfaces: [AsyncInputStream]
  };
  function withTimeout$lambda$lambda(closure$c) {
    return function () {
      closure$c.cancel_tcv7n7$(new CancellationException(''));
      return Unit;
    };
  }
  function withTimeout$lambda$lambda_0(closure$cancelled, closure$timer, closure$c) {
    return function (it) {
      closure$cancelled.v = true;
      closure$timer.close();
      closure$c.cancel_tcv7n7$();
      return Unit;
    };
  }
  function withTimeout$lambda$ObjectLiteral(closure$cancelled, closure$timer, closure$c) {
    this.closure$cancelled = closure$cancelled;
    this.closure$timer = closure$timer;
    this.closure$c = closure$c;
    this.context_87yum2$_0 = closure$c.context;
  }
  Object.defineProperty(withTimeout$lambda$ObjectLiteral.prototype, 'context', {
    get: function () {
      return this.context_87yum2$_0;
    }
  });
  withTimeout$lambda$ObjectLiteral.prototype.resume_11rb$ = function (value) {
    if (this.closure$cancelled.v)
      return;
    this.closure$timer.close();
    this.closure$c.resume_11rb$(Unit);
  };
  withTimeout$lambda$ObjectLiteral.prototype.resumeWithException_tcv7n7$ = function (exception) {
    if (this.closure$cancelled.v)
      return;
    this.closure$timer.close();
    this.closure$c.resumeWithException_tcv7n7$(exception);
  };
  withTimeout$lambda$ObjectLiteral.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    interfaces: [Continuation]
  };
  function withTimeout$lambda(closure$ms, closure$callback) {
    return function (c) {
      var cancelled = {v: false};
      var timer = get_eventLoop_0(c).setTimeout_n53o35$(closure$ms, withTimeout$lambda$lambda(c));
      c.onCancel_4m4org$(withTimeout$lambda$lambda_0(cancelled, timer, c));
      korioStartCoroutine_0(closure$callback, new withTimeout$lambda$ObjectLiteral(cancelled, timer, c));
      return Unit;
    };
  }
  function suspendCancellableCoroutine$lambda_2(closure$block) {
    return function (c) {
      closure$block(new CancellableContinuation(c));
      return Unit;
    };
  }
  function suspendCoroutineEL$lambda_2(closure$block) {
    return function (c) {
      closure$block(toEventLoop(c));
      return Unit;
    };
  }
  function _korioSuspendCoroutine$lambda_6(closure$block) {
    return function (c) {
      closure$block(c);
      return Unit;
    };
  }
  function suspendCoroutine$lambda_6(closure$block) {
    return function (c) {
      var safe = SafeContinuation_init(c);
      closure$block(safe);
      return safe.getResult();
    };
  }
  function withTimeout(ms, name, callback, continuation) {
    if (name === void 0)
      name = 'timeout';
    return suspendCoroutine$lambda_6(_korioSuspendCoroutine$lambda_6(suspendCoroutineEL$lambda_2(suspendCancellableCoroutine$lambda_2(withTimeout$lambda(ms, callback)))))(continuation.facade);
  }
  function uncompressGzip($receiver, continuation) {
    return Compression_getInstance().uncompressGzip_fqrh44$($receiver, continuation);
  }
  function uncompressZlib($receiver, continuation) {
    return Compression_getInstance().uncompressZlib_fqrh44$($receiver, continuation);
  }
  function compressGzip($receiver, level, continuation) {
    if (level === void 0)
      level = 6;
    return Compression_getInstance().compressGzip_ir89t6$($receiver, level, continuation);
  }
  function compressZlib($receiver, level, continuation) {
    if (level === void 0)
      level = 6;
    return Compression_getInstance().compressZlib_ir89t6$($receiver, level, continuation);
  }
  var COROUTINE_SUSPENDED_0;
  function getCoroutineContext$lambda(c) {
    c.resume_11rb$(c.context);
    return Unit;
  }
  function korioSuspendCoroutine$lambda_3(closure$block) {
    return function (c) {
      closure$block(toEventLoop(c));
      return Unit;
    };
  }
  function _korioSuspendCoroutine$lambda_7(closure$block) {
    return function (c) {
      closure$block(c);
      return Unit;
    };
  }
  function suspendCoroutine$lambda_7(closure$block) {
    return function (c) {
      var safe = SafeContinuation_init(c);
      closure$block(safe);
      return safe.getResult();
    };
  }
  function getCoroutineContext(continuation) {
    return suspendCoroutine$lambda_7(_korioSuspendCoroutine$lambda_7(korioSuspendCoroutine$lambda_3(getCoroutineContext$lambda)))(continuation.facade);
  }
  function withCoroutineContext$lambda(closure$callback) {
    return function (c) {
      startCoroutine(closure$callback, c.context, c);
      return Unit;
    };
  }
  function withCoroutineContext(callback, continuation) {
    return suspendCoroutine$lambda_7(_korioSuspendCoroutine$lambda_7(korioSuspendCoroutine$lambda_3(withCoroutineContext$lambda(callback))))(continuation.facade);
  }
  function withEventLoop$lambda(closure$callback) {
    return function (c) {
      startCoroutine(closure$callback, get_eventLoop(c.context), c);
      return Unit;
    };
  }
  function withEventLoop(callback, continuation) {
    return suspendCoroutine$lambda_7(_korioSuspendCoroutine$lambda_7(korioSuspendCoroutine$lambda_3(withEventLoop$lambda(callback))))(continuation.facade);
  }
  var korioSuspendCoroutine = defineInlineFunction('korio-js.com.soywiz.korio.coroutine.korioSuspendCoroutine_z3e1t3$', wrapFunction(function () {
    var toEventLoop = _.com.soywiz.korio.async.toEventLoop_5cx0c9$;
    var Unit = Kotlin.kotlin.Unit;
    function korioSuspendCoroutine$lambda(closure$block) {
      return function (c) {
        closure$block(toEventLoop(c));
        return Unit;
      };
    }
    function _korioSuspendCoroutine$lambda(closure$block) {
      return function (c) {
        closure$block(c);
        return Unit;
      };
    }
    var SafeContinuation_init = Kotlin.kotlin.coroutines.experimental.SafeContinuation_init_n4f53e$;
    function suspendCoroutine$lambda(closure$block) {
      return function (c) {
        var safe = SafeContinuation_init(c);
        closure$block(safe);
        return safe.getResult();
      };
    }
    return function (block, continuation) {
      return suspendCoroutine$lambda(_korioSuspendCoroutine$lambda(korioSuspendCoroutine$lambda(block)))(continuation.facade);
    };
  }));
  var _korioSuspendCoroutine = defineInlineFunction('korio-js.com.soywiz.korio.coroutine._korioSuspendCoroutine_z3e1t3$', wrapFunction(function () {
    var Unit = Kotlin.kotlin.Unit;
    function _korioSuspendCoroutine$lambda(closure$block) {
      return function (c) {
        closure$block(c);
        return Unit;
      };
    }
    var SafeContinuation_init = Kotlin.kotlin.coroutines.experimental.SafeContinuation_init_n4f53e$;
    function suspendCoroutine$lambda(closure$block) {
      return function (c) {
        var safe = SafeContinuation_init(c);
        closure$block(safe);
        return safe.getResult();
      };
    }
    return function (block, continuation) {
      return suspendCoroutine$lambda(_korioSuspendCoroutine$lambda(block))(continuation.facade);
    };
  }));
  function korioStartCoroutine($receiver, receiver, completion) {
    startCoroutine($receiver, receiver, completion);
  }
  function korioStartCoroutine_0($receiver, completion) {
    startCoroutine_0($receiver, completion);
  }
  function korioCreateCoroutine($receiver, completion) {
    return createCoroutine($receiver, completion);
  }
  function korioCreateCoroutine_0($receiver, receiver, completion) {
    return createCoroutine_0($receiver, receiver, completion);
  }
  function AsyncHash() {
    AsyncHash$Companion_getInstance();
  }
  function AsyncHash$Companion() {
    AsyncHash$Companion_instance = this;
    this.MD5_4c1cn5$_0 = lazy(AsyncHash$Companion$MD5$lambda);
    this.SHA1_7sfs9e$_0 = lazy(AsyncHash$Companion$SHA1$lambda);
    this.SHA256_rwk7u8$_0 = lazy(AsyncHash$Companion$SHA256$lambda);
    this.CRC32_kz2h3e$_0 = lazy(AsyncHash$Companion$CRC32$lambda);
  }
  Object.defineProperty(AsyncHash$Companion.prototype, 'MD5', {
    get: function () {
      var $receiver = this.MD5_4c1cn5$_0;
      new Kotlin.PropertyMetadata('MD5');
      return $receiver.value;
    }
  });
  Object.defineProperty(AsyncHash$Companion.prototype, 'SHA1', {
    get: function () {
      var $receiver = this.SHA1_7sfs9e$_0;
      new Kotlin.PropertyMetadata('SHA1');
      return $receiver.value;
    }
  });
  Object.defineProperty(AsyncHash$Companion.prototype, 'SHA256', {
    get: function () {
      var $receiver = this.SHA256_rwk7u8$_0;
      new Kotlin.PropertyMetadata('SHA256');
      return $receiver.value;
    }
  });
  Object.defineProperty(AsyncHash$Companion.prototype, 'CRC32', {
    get: function () {
      var $receiver = this.CRC32_kz2h3e$_0;
      new Kotlin.PropertyMetadata('CRC32');
      return $receiver.value;
    }
  });
  function AsyncHash$Companion$MD5$lambda() {
    return new AsyncHash$MessageDigestHash('MD5');
  }
  function AsyncHash$Companion$SHA1$lambda() {
    return new AsyncHash$MessageDigestHash('SHA1');
  }
  function AsyncHash$Companion$SHA256$lambda() {
    return new AsyncHash$MessageDigestHash('SHA-256');
  }
  function AsyncHash$Companion$CRC32$lambda() {
    return new AsyncHash$CRC32Hash();
  }
  AsyncHash$Companion.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var AsyncHash$Companion_instance = null;
  function AsyncHash$Companion_getInstance() {
    if (AsyncHash$Companion_instance === null) {
      new AsyncHash$Companion();
    }
    return AsyncHash$Companion_instance;
  }
  AsyncHash.prototype.hashSync_fqrh44$ = function (content, continuation) {
    return this.hashSync_6wkrl8$(openAsync(content), continuation);
  };
  AsyncHash.prototype.hashSync_6zdodq$ = function (content, charset, continuation) {
    if (charset === void 0)
      charset = Charsets_getInstance().UTF_8;
    return this.hashSync_fqrh44$(toByteArray(content, charset), continuation);
  };
  function AsyncHash$hashSync$lambda(this$AsyncHash_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$AsyncHash$hashSync$lambda(this$AsyncHash_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$AsyncHash$hashSync$lambda(this$AsyncHash_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$this$AsyncHash = this$AsyncHash_0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$AsyncHash$hashSync$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$AsyncHash$hashSync$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$AsyncHash$hashSync$lambda.prototype.constructor = Coroutine$AsyncHash$hashSync$lambda;
  Coroutine$AsyncHash$hashSync$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$this$AsyncHash.hashSync_6wkrl8$(this.local$$receiver, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  AsyncHash.prototype.hashSync_87mmnk$ = function (openable_0, continuation_0, suspended) {
    var instance = new Coroutine$hashSync_87mmnk$(this, openable_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$hashSync_87mmnk$($this, openable_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 7;
    this.$this = $this;
    this.local$$receiver = void 0;
    this.local$openable = openable_0;
  }
  Coroutine$hashSync_87mmnk$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$hashSync_87mmnk$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$hashSync_87mmnk$.prototype.constructor = Coroutine$hashSync_87mmnk$;
  Coroutine$hashSync_87mmnk$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 1;
            this.result_0 = this.local$openable.openRead(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            this.local$$receiver = this.result_0;
            this.exceptionState_0 = 4;
            this.state_0 = 2;
            this.result_0 = await_1(AsyncHash$hashSync$lambda(this.$this), this.local$$receiver, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 2:
            this.result_0 = this.result_0;
            this.exceptionState_0 = 7;
            this.finallyPath_0 = [3];
            this.state_0 = 5;
            continue;
          case 3:
            return this.result_0;
          case 4:
            this.finallyPath_0 = [7];
            this.state_0 = 5;
            continue;
          case 5:
            this.state_0 = 6;
            this.result_0 = this.local$$receiver.close(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 6:
            this.state_0 = this.finallyPath_0.shift();
            continue;
          case 7:
            throw this.exception_0;
        }
      }
       catch (e) {
        if (this.state_0 === 7)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function AsyncHash$hash$lambda(closure$content_0, this$AsyncHash_0) {
    return function (continuation_0, suspended) {
      var instance = new Coroutine$AsyncHash$hash$lambda(closure$content_0, this$AsyncHash_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$AsyncHash$hash$lambda(closure$content_0, this$AsyncHash_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$closure$content = closure$content_0;
    this.local$this$AsyncHash = this$AsyncHash_0;
  }
  Coroutine$AsyncHash$hash$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$AsyncHash$hash$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$AsyncHash$hash$lambda.prototype.constructor = Coroutine$AsyncHash$hash$lambda;
  Coroutine$AsyncHash$hash$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$this$AsyncHash.hashSync_6wkrl8$(this.local$closure$content, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  AsyncHash.prototype.hash_6wkrl8$ = function (content, continuation) {
    return executeInWorker(AsyncHash$hash$lambda(content, this), continuation);
  };
  function AsyncHash$hash$lambda_0(closure$content_0, this$AsyncHash_0) {
    return function (continuation_0, suspended) {
      var instance = new Coroutine$AsyncHash$hash$lambda_0(closure$content_0, this$AsyncHash_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$AsyncHash$hash$lambda_0(closure$content_0, this$AsyncHash_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$closure$content = closure$content_0;
    this.local$this$AsyncHash = this$AsyncHash_0;
  }
  Coroutine$AsyncHash$hash$lambda_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$AsyncHash$hash$lambda_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$AsyncHash$hash$lambda_0.prototype.constructor = Coroutine$AsyncHash$hash$lambda_0;
  Coroutine$AsyncHash$hash$lambda_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$this$AsyncHash.hashSync_fqrh44$(this.local$closure$content, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  AsyncHash.prototype.hash_fqrh44$ = function (content, continuation) {
    return executeInWorker(AsyncHash$hash$lambda_0(content, this), continuation);
  };
  function AsyncHash$hash$lambda_1(closure$content_0, this$AsyncHash_0) {
    return function (continuation_0, suspended) {
      var instance = new Coroutine$AsyncHash$hash$lambda_1(closure$content_0, this$AsyncHash_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$AsyncHash$hash$lambda_1(closure$content_0, this$AsyncHash_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$closure$content = closure$content_0;
    this.local$this$AsyncHash = this$AsyncHash_0;
  }
  Coroutine$AsyncHash$hash$lambda_1.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$AsyncHash$hash$lambda_1.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$AsyncHash$hash$lambda_1.prototype.constructor = Coroutine$AsyncHash$hash$lambda_1;
  Coroutine$AsyncHash$hash$lambda_1.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$this$AsyncHash.hashSync_6zdodq$(this.local$closure$content, void 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  AsyncHash.prototype.hash_6zdodq$ = function (content, charset, continuation) {
    if (charset === void 0)
      charset = Charsets_getInstance().UTF_8;
    return executeInWorker(AsyncHash$hash$lambda_1(content, this), continuation);
  };
  function AsyncHash$hash$lambda_2(closure$openable_0, this$AsyncHash_0) {
    return function (continuation_0, suspended) {
      var instance = new Coroutine$AsyncHash$hash$lambda_2(closure$openable_0, this$AsyncHash_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$AsyncHash$hash$lambda_2(closure$openable_0, this$AsyncHash_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$closure$openable = closure$openable_0;
    this.local$this$AsyncHash = this$AsyncHash_0;
  }
  Coroutine$AsyncHash$hash$lambda_2.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$AsyncHash$hash$lambda_2.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$AsyncHash$hash$lambda_2.prototype.constructor = Coroutine$AsyncHash$hash$lambda_2;
  Coroutine$AsyncHash$hash$lambda_2.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$this$AsyncHash.hashSync_87mmnk$(this.local$closure$openable, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  AsyncHash.prototype.hash_87mmnk$ = function (openable, continuation) {
    return executeInWorker(AsyncHash$hash$lambda_2(openable, this), continuation);
  };
  function AsyncHash$MessageDigestHash(algo) {
    AsyncHash.call(this);
    this.algo = algo;
  }
  AsyncHash$MessageDigestHash.prototype.hashSync_6wkrl8$ = function (content_0, continuation_0, suspended) {
    var instance = new Coroutine$hashSync_6wkrl8$(this, content_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$hashSync_6wkrl8$($this, content_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$temp = void 0;
    this.local$md = void 0;
    this.local$read = void 0;
    this.local$content = content_0;
  }
  Coroutine$hashSync_6wkrl8$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$hashSync_6wkrl8$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$hashSync_6wkrl8$.prototype.constructor = Coroutine$hashSync_6wkrl8$;
  Coroutine$hashSync_6wkrl8$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$temp = new Int8Array(4096);
            this.local$md = new SimplerMessageDigest(this.$this.algo);
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.local$content.read_mj6st8$(this.local$temp, 0, this.local$temp.length, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            this.local$read = this.result_0;
            if (this.local$read <= 0) {
              this.state_0 = 6;
              continue;
            }
             else {
              this.state_0 = 4;
              continue;
            }

          case 4:
            this.state_0 = 5;
            this.result_0 = this.local$md.update_mj6st8$(this.local$temp, 0, this.local$read, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 5:
            this.state_0 = 2;
            continue;
          case 6:
            this.state_0 = 7;
            this.result_0 = this.local$md.digest(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 7:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  AsyncHash$MessageDigestHash.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'MessageDigestHash',
    interfaces: [AsyncHash]
  };
  function AsyncHash$CRC32Hash() {
    AsyncHash.call(this);
  }
  AsyncHash$CRC32Hash.prototype.hashSync_6wkrl8$ = function (content_0, continuation_0, suspended) {
    var instance = new Coroutine$hashSync_6wkrl8$_0(this, content_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$hashSync_6wkrl8$_0($this, content_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$temp = void 0;
    this.local$crc32 = void 0;
    this.local$read = void 0;
    this.local$out = void 0;
    this.local$content = content_0;
  }
  Coroutine$hashSync_6wkrl8$_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$hashSync_6wkrl8$_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$hashSync_6wkrl8$_0.prototype.constructor = Coroutine$hashSync_6wkrl8$_0;
  Coroutine$hashSync_6wkrl8$_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$temp = new Int8Array(4096);
            this.local$crc32 = new NativeCRC32();
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.local$content.read_mj6st8$(this.local$temp, 0, this.local$temp.length, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            this.local$read = this.result_0;
            if (this.local$read <= 0) {
              this.state_0 = 5;
              continue;
            }
             else {
              this.state_0 = 4;
              continue;
            }

          case 4:
            this.local$crc32.update_mj6st8$(this.local$temp, 0, this.local$read);
            this.state_0 = 2;
            continue;
          case 5:
            this.local$out = new Int8Array(4);
            write32_le_3(this.local$out, 0, this.local$crc32.digest());
            return this.local$out;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  AsyncHash$CRC32Hash.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'CRC32Hash',
    interfaces: [AsyncHash]
  };
  AsyncHash.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'AsyncHash',
    interfaces: []
  };
  function hashSync($receiver, hash, continuation) {
    return hash.hashSync_fqrh44$($receiver, continuation);
  }
  function hashSync_0($receiver, hash, continuation) {
    return hash.hashSync_6wkrl8$($receiver, continuation);
  }
  function hashSync_1($receiver, hash, continuation) {
    return hash.hashSync_87mmnk$($receiver, continuation);
  }
  function hash($receiver, hash, continuation) {
    return hash.hash_fqrh44$($receiver, continuation);
  }
  function hash_0($receiver, hash, continuation) {
    return hash.hash_6wkrl8$($receiver, continuation);
  }
  function hash_1($receiver, hash, continuation) {
    return hash.hash_87mmnk$($receiver, continuation);
  }
  function Base64() {
    Base64_instance = this;
    this.TABLE_0 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
    this.DECODE_d4nfqi$_0 = lazy(Base64$DECODE$lambda(this));
  }
  Object.defineProperty(Base64.prototype, 'DECODE_0', {
    get: function () {
      var $receiver = this.DECODE_d4nfqi$_0;
      new Kotlin.PropertyMetadata('DECODE');
      return $receiver.value;
    }
  });
  Base64.prototype.decode_61zpoe$ = function (str) {
    var src = toByteArray(str, Charsets_getInstance().UTF_8);
    var dst = new Int8Array(src.length);
    return copyOf(dst, this.decode_r9qwmk$(src, dst));
  };
  Base64.prototype.decode_r9qwmk$ = function (src, dst) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5;
    var m = 0;
    var srcu = new UByteArray(src);
    var n = 0;
    while (n < src.length) {
      var d = this.DECODE_0[srcu.data[n] & 255];
      if (d < 0) {
        n = n + 1 | 0;
        continue;
      }
      var b0 = this.DECODE_0[srcu.data[tmp$ = n, n = tmp$ + 1 | 0, tmp$] & 255];
      var b1 = this.DECODE_0[srcu.data[tmp$_0 = n, n = tmp$_0 + 1 | 0, tmp$_0] & 255];
      var b2 = this.DECODE_0[srcu.data[tmp$_1 = n, n = tmp$_1 + 1 | 0, tmp$_1] & 255];
      var b3 = this.DECODE_0[srcu.data[tmp$_2 = n, n = tmp$_2 + 1 | 0, tmp$_2] & 255];
      dst[tmp$_3 = m, m = tmp$_3 + 1 | 0, tmp$_3] = Kotlin.toByte(b0 << 2 | b1 >> 4);
      if (b2 < 64) {
        dst[tmp$_4 = m, m = tmp$_4 + 1 | 0, tmp$_4] = Kotlin.toByte(b1 << 4 | b2 >> 2);
        if (b3 < 64) {
          dst[tmp$_5 = m, m = tmp$_5 + 1 | 0, tmp$_5] = Kotlin.toByte(b2 << 6 | b3);
        }
      }
    }
    return m;
  };
  Base64.prototype.encode_6zdodq$ = function (src, charset) {
    return this.encode_6zdodq$(src, Charsets_getInstance().UTF_8);
  };
  Base64.prototype.encode_fqrh44$ = function (src) {
    var tmp$, tmp$_0, tmp$_1;
    var out = StringBuilder_init(((src.length * 4 | 0) / 3 | 0) + 4 | 0);
    var ipos = 0;
    var extraBytes = src.length % 3;
    while (ipos < (src.length - 2 | 0)) {
      var num = readU24_be_1(src, ipos);
      ipos = ipos + 3 | 0;
      out.append_s8itvh$(this.TABLE_0.charCodeAt(num >>> 18 & 63));
      out.append_s8itvh$(this.TABLE_0.charCodeAt(num >>> 12 & 63));
      out.append_s8itvh$(this.TABLE_0.charCodeAt(num >>> 6 & 63));
      out.append_s8itvh$(this.TABLE_0.charCodeAt(num >>> 0 & 63));
    }
    if (extraBytes === 1) {
      var num_0 = readU8_1(src, (tmp$ = ipos, ipos = tmp$ + 1 | 0, tmp$));
      out.append_s8itvh$(this.TABLE_0.charCodeAt(num_0 >>> 2));
      out.append_s8itvh$(this.TABLE_0.charCodeAt(num_0 << 4 & 63));
      out.append_s8itvh$(61);
      out.append_s8itvh$(61);
    }
     else if (extraBytes === 2) {
      var tmp = readU8_1(src, (tmp$_0 = ipos, ipos = tmp$_0 + 1 | 0, tmp$_0)) << 8 | readU8_1(src, (tmp$_1 = ipos, ipos = tmp$_1 + 1 | 0, tmp$_1));
      out.append_s8itvh$(this.TABLE_0.charCodeAt(tmp >>> 10));
      out.append_s8itvh$(this.TABLE_0.charCodeAt(tmp >>> 4 & 63));
      out.append_s8itvh$(this.TABLE_0.charCodeAt(tmp << 2 & 63));
      out.append_s8itvh$(61);
    }
    return out.toString();
  };
  function Base64$DECODE$lambda(this$Base64) {
    return function () {
      var tmp$;
      var out = new Int32Array(256);
      for (var n = 0; n <= 255; n++)
        out[n] = -1;
      tmp$ = this$Base64.TABLE_0.length;
      for (var n_0 = 0; n_0 < tmp$; n_0++) {
        out[this$Base64.TABLE_0.charCodeAt(n_0) | 0] = n_0;
      }
      return out;
    };
  }
  Base64.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'Base64',
    interfaces: []
  };
  var Base64_instance = null;
  function Base64_getInstance() {
    if (Base64_instance === null) {
      new Base64();
    }
    return Base64_instance;
  }
  function fromBase64($receiver) {
    return Base64_getInstance().decode_61zpoe$($receiver);
  }
  function toBase64($receiver) {
    return Base64_getInstance().encode_fqrh44$($receiver);
  }
  function Hex() {
    Hex_instance = this;
    this.DIGITS = '0123456789ABCDEF';
    this.DIGITS_UPPER = this.DIGITS.toUpperCase();
    this.DIGITS_LOWER = this.DIGITS.toLowerCase();
  }
  Hex.prototype.decode_61zpoe$ = function (str) {
    var tmp$;
    var out = new Int8Array(str.length / 2 | 0);
    for (var n = 0; n < out.length; n++) {
      out[n] = Kotlin.toByte((tmp$ = toIntOrNull(substr_0(str, n * 2 | 0, 2), 16)) != null ? tmp$ : 0);
    }
    return out;
  };
  Hex.prototype.encode_fqrh44$ = function (src) {
    return this.encodeBase_0(src, this.DIGITS_LOWER);
  };
  Hex.prototype.encodeLower_fqrh44$ = function (src) {
    return this.encodeBase_0(src, this.DIGITS_LOWER);
  };
  Hex.prototype.encodeUpper_fqrh44$ = function (src) {
    return this.encodeBase_0(src, this.DIGITS_UPPER);
  };
  Hex.prototype.encodeBase_0 = function (data, digits) {
    if (digits === void 0)
      digits = this.DIGITS;
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    var out = StringBuilder_init(data.length * 2 | 0);
    tmp$ = get_indices(data);
    tmp$_0 = tmp$.first;
    tmp$_1 = tmp$.last;
    tmp$_2 = tmp$.step;
    for (var n = tmp$_0; n <= tmp$_1; n += tmp$_2) {
      var v = data[n] & 255;
      out.append_s8itvh$(digits.charCodeAt(v >>> 4 & 15));
      out.append_s8itvh$(digits.charCodeAt(v >>> 0 & 15));
    }
    return out.toString();
  };
  Hex.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'Hex',
    interfaces: []
  };
  var Hex_instance = null;
  function Hex_getInstance() {
    if (Hex_instance === null) {
      new Hex();
    }
    return Hex_instance;
  }
  function SyncHash() {
    SyncHash$Companion_getInstance();
  }
  function SyncHash$Companion() {
    SyncHash$Companion_instance = this;
    this.MD5_ye0btm$_0 = lazy(SyncHash$Companion$MD5$lambda);
    this.SHA1_i7smt$_0 = lazy(SyncHash$Companion$SHA1$lambda);
  }
  Object.defineProperty(SyncHash$Companion.prototype, 'MD5', {
    get: function () {
      var $receiver = this.MD5_ye0btm$_0;
      new Kotlin.PropertyMetadata('MD5');
      return $receiver.value;
    }
  });
  Object.defineProperty(SyncHash$Companion.prototype, 'SHA1', {
    get: function () {
      var $receiver = this.SHA1_i7smt$_0;
      new Kotlin.PropertyMetadata('SHA1');
      return $receiver.value;
    }
  });
  function SyncHash$Companion$MD5$lambda() {
    return new SyncHash$MessageDigestHash('MD5');
  }
  function SyncHash$Companion$SHA1$lambda() {
    return new SyncHash$MessageDigestHash('SHA1');
  }
  SyncHash$Companion.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var SyncHash$Companion_instance = null;
  function SyncHash$Companion_getInstance() {
    if (SyncHash$Companion_instance === null) {
      new SyncHash$Companion();
    }
    return SyncHash$Companion_instance;
  }
  SyncHash.prototype.hash_fqrh44$ = function (content) {
    return this.hash_sayfrj$(openSync(content));
  };
  SyncHash.prototype.hash_6zdodq$ = function (content, charset) {
    if (charset === void 0)
      charset = Charsets_getInstance().UTF_8;
    return this.hash_fqrh44$(toByteArray(content, charset));
  };
  function SyncHash$MessageDigestHash(algo) {
    SyncHash.call(this);
    this.algo = algo;
  }
  var NotImplementedError_init = Kotlin.kotlin.NotImplementedError;
  SyncHash$MessageDigestHash.prototype.hash_sayfrj$ = function (content) {
    throw new NotImplementedError_init();
  };
  SyncHash$MessageDigestHash.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'MessageDigestHash',
    interfaces: [SyncHash]
  };
  SyncHash.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'SyncHash',
    interfaces: []
  };
  function md5($receiver) {
    return SyncHash$Companion_getInstance().MD5.hash_fqrh44$($receiver);
  }
  function sha1($receiver) {
    return SyncHash$Companion_getInstance().SHA1.hash_fqrh44$($receiver);
  }
  function update($receiver, data, continuation) {
    return $receiver.update_mj6st8$(data, 0, data.length, continuation);
  }
  function digest($receiver_0, data_0, continuation_0, suspended) {
    var instance = new Coroutine$digest($receiver_0, data_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$digest($receiver_0, data_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
    this.local$data = data_0;
  }
  Coroutine$digest.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$digest.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$digest.prototype.constructor = Coroutine$digest;
  Coroutine$digest.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = update(this.local$$receiver, this.local$data, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.local$$receiver.digest(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function update_0($receiver, data, continuation) {
    return $receiver.update_mj6st8$(data, 0, data.length, continuation);
  }
  function finalize($receiver_0, data_0, continuation_0, suspended) {
    var instance = new Coroutine$finalize($receiver_0, data_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$finalize($receiver_0, data_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
    this.local$data = data_0;
  }
  Coroutine$finalize.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$finalize.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$finalize.prototype.constructor = Coroutine$finalize;
  Coroutine$finalize.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = update_0(this.local$$receiver, this.local$data, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.local$$receiver.finalize(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function AsyncPool(maxItems, create) {
    if (maxItems === void 0)
      maxItems = IntCompanionObject.MAX_VALUE;
    this.maxItems = maxItems;
    this.create = create;
    this.createdItems = new AtomicInteger();
    this.freedItem_0 = new ProduceConsumer();
  }
  AsyncPool.prototype.tempAlloc_v7st1v$ = function (callback_0, continuation_0, suspended) {
    var instance = new Coroutine$tempAlloc_v7st1v$(this, callback_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$tempAlloc_v7st1v$($this, callback_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 7;
    this.$this = $this;
    this.local$item = void 0;
    this.local$callback = callback_0;
  }
  Coroutine$tempAlloc_v7st1v$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$tempAlloc_v7st1v$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$tempAlloc_v7st1v$.prototype.constructor = Coroutine$tempAlloc_v7st1v$;
  Coroutine$tempAlloc_v7st1v$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 1;
            this.result_0 = this.$this.alloc(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            this.local$item = this.result_0;
            this.exceptionState_0 = 5;
            this.state_0 = 2;
            this.result_0 = this.local$callback(this.local$item, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 2:
            this.exceptionState_0 = 7;
            this.finallyPath_0 = [3];
            this.state_0 = 6;
            this.$returnValue = this.result_0;
            continue;
          case 3:
            return this.$returnValue;
          case 4:
            return;
          case 5:
            this.finallyPath_0 = [7];
            this.state_0 = 6;
            continue;
          case 6:
            this.$this.free_11rb$(this.local$item);
            this.state_0 = this.finallyPath_0.shift();
            continue;
          case 7:
            throw this.exception_0;
        }
      }
       catch (e) {
        if (this.state_0 === 7)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  AsyncPool.prototype.alloc = function (continuation_0, suspended) {
    var instance = new Coroutine$alloc(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$alloc($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$tmp$ = void 0;
    this.local$tmp$_0 = void 0;
  }
  Coroutine$alloc.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$alloc.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$alloc.prototype.constructor = Coroutine$alloc;
  Coroutine$alloc.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.$this.createdItems.get() >= this.$this.maxItems) {
              this.state_0 = 3;
              this.result_0 = this.$this.freedItem_0.consume_4l50dc$(void 0, this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              break;
            }
             else {
              this.$this.createdItems.addAndGet_za3lpa$(1);
              this.state_0 = 2;
              this.result_0 = this.$this.create(this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              break;
            }

          case 1:
            throw this.exception_0;
          case 2:
            this.local$tmp$_0 = this.result_0;
            this.state_0 = 4;
            continue;
          case 3:
            this.local$tmp$ = this.result_0;
            this.local$tmp$_0 = this.local$tmp$ != null ? this.local$tmp$ : Kotlin.throwNPE();
            this.state_0 = 4;
            continue;
          case 4:
            return this.local$tmp$_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  AsyncPool.prototype.free_11rb$ = function (item) {
    this.freedItem_0.produce_11rb$(item);
  };
  AsyncPool.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'AsyncPool',
    interfaces: []
  };
  function BitSet(size) {
    this.size = size;
    this.data = new Int32Array((this.size + 31 & 31) / 32 | 0);
  }
  BitSet.prototype.part_0 = function (index) {
    return index >>> 5;
  };
  BitSet.prototype.bit_0 = function (index) {
    return index & 31;
  };
  BitSet.prototype.get_za3lpa$ = function (index) {
    return (this.data[this.part_0(index)] >>> this.bit_0(index) & 1) !== 0;
  };
  BitSet.prototype.set_fzusl$ = function (index, value) {
    var i = this.part_0(index);
    var b = this.bit_0(index);
    if (value) {
      this.data[i] = this.data[i] | 1 << b;
    }
     else {
      this.data[i] = this.data[i] & ~(1 << b);
    }
  };
  BitSet.prototype.set_za3lpa$ = function (index) {
    this.set_fzusl$(index, true);
  };
  BitSet.prototype.unset_za3lpa$ = function (index) {
    this.set_fzusl$(index, false);
  };
  BitSet.prototype.clear = function () {
    fill_3(this.data, 0);
  };
  BitSet.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'BitSet',
    interfaces: []
  };
  function LinkedList(list) {
    if (list === void 0) {
      list = ArrayList_init();
    }
    this.list_0 = list;
  }
  Object.defineProperty(LinkedList.prototype, 'size', {
    get: function () {
      return this.list_0.size;
    }
  });
  LinkedList.prototype.isNotEmpty = function () {
    return this.size !== 0;
  };
  LinkedList.prototype.isEmpty = function () {
    return this.size === 0;
  };
  LinkedList.prototype.addAll_p1ys8y$ = function (items) {
    return addAll(this.list_0, items);
  };
  LinkedList.prototype.addFirst_11rb$ = function (item) {
    this.list_0.add_wxm5ur$(0, item);
  };
  LinkedList.prototype.addLast_11rb$ = function (item) {
    return this.list_0.add_11rb$(item);
  };
  LinkedList.prototype.removeFirst = function () {
    return this.list_0.removeAt_za3lpa$(0);
  };
  LinkedList.prototype.removeLast = function () {
    return this.list_0.removeAt_za3lpa$(this.list_0.size - 1 | 0);
  };
  Object.defineProperty(LinkedList.prototype, 'last', {
    get: function () {
      return last(this.list_0);
    }
  });
  LinkedList.prototype.add_11rb$ = function (element) {
    return this.list_0.add_11rb$(element);
  };
  LinkedList.prototype.addAll_brywnq$ = function (elements) {
    return this.list_0.addAll_brywnq$(elements);
  };
  LinkedList.prototype.clear = function () {
    return this.list_0.clear();
  };
  LinkedList.prototype.contains_11rb$ = function (element) {
    return this.list_0.contains_11rb$(element);
  };
  LinkedList.prototype.containsAll_brywnq$ = function (elements) {
    return this.list_0.containsAll_brywnq$(elements);
  };
  LinkedList.prototype.iterator = function () {
    return this.list_0.iterator();
  };
  LinkedList.prototype.remove_11rb$ = function (element) {
    return this.list_0.remove_11rb$(element);
  };
  LinkedList.prototype.removeAll_brywnq$ = function (elements) {
    return this.list_0.removeAll_brywnq$(elements);
  };
  LinkedList.prototype.retainAll_brywnq$ = function (elements) {
    return this.list_0.retainAll_brywnq$(elements);
  };
  LinkedList.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'LinkedList',
    interfaces: [MutableCollection]
  };
  function LinkedList2() {
    this._size_0 = 0;
    this.head_0 = null;
    this.tail_0 = null;
  }
  function LinkedList2$iterator$ObjectLiteral(this$LinkedList2) {
    this.this$LinkedList2 = this$LinkedList2;
    this.current = null;
    this._next = this$LinkedList2.head_0;
  }
  LinkedList2$iterator$ObjectLiteral.prototype.hasNext = function () {
    return this._next != null;
  };
  LinkedList2$iterator$ObjectLiteral.prototype.remove = function () {
    this.this$LinkedList2;
    this.this$LinkedList2;
    var this$LinkedList2 = this.this$LinkedList2;
    var tmp$;
    if (this.current != null) {
      this$LinkedList2.remove_jvkhq7$((tmp$ = this.current) != null ? tmp$ : Kotlin.throwNPE());
    }
  };
  LinkedList2$iterator$ObjectLiteral.prototype.next = function () {
    this.this$LinkedList2;
    var tmp$;
    var res = this._next;
    this._next = (tmp$ = this._next) != null ? tmp$.next_8be2vx$ : null;
    this.current = res;
    return res != null ? res : Kotlin.throwNPE();
  };
  LinkedList2$iterator$ObjectLiteral.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    interfaces: [MutableIterator]
  };
  LinkedList2.prototype.iterator = function () {
    return new LinkedList2$iterator$ObjectLiteral(this);
  };
  Object.defineProperty(LinkedList2.prototype, 'size', {
    get: function () {
      return this._size_0;
    }
  });
  function LinkedList2$Node() {
    this.list_8be2vx$ = null;
    this.prev_8be2vx$ = null;
    this.next_8be2vx$ = null;
  }
  LinkedList2$Node.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'Node',
    interfaces: []
  };
  LinkedList2.prototype.remove_jvkhq7$ = function (item) {
    block$break: do {
      var tmp$, tmp$_0, tmp$_1;
      if (item.list_8be2vx$ == null)
        break block$break;
      if (!Kotlin.equals(item.list_8be2vx$, this)) {
        ((tmp$ = item.list_8be2vx$) != null ? tmp$ : Kotlin.throwNPE()).remove_jvkhq7$(item);
        break block$break;
      }
      (tmp$_0 = item.prev_8be2vx$) != null ? (tmp$_0.next_8be2vx$ = item.next_8be2vx$) : null;
      (tmp$_1 = item.next_8be2vx$) != null ? (tmp$_1.prev_8be2vx$ = item.prev_8be2vx$) : null;
      if (Kotlin.equals(item, this.head_0))
        this.head_0 = item.next_8be2vx$;
      if (Kotlin.equals(item, this.tail_0))
        this.tail_0 = item.prev_8be2vx$;
      item.list_8be2vx$ = null;
      this._size_0 = this._size_0 - 1 | 0;
    }
     while (false);
  };
  LinkedList2.prototype.add_jvkhq7$ = function (item) {
    var tmp$, tmp$_0;
    if (item.list_8be2vx$ != null) {
      ((tmp$ = item.list_8be2vx$) != null ? tmp$ : Kotlin.throwNPE()).remove_jvkhq7$(item);
    }
    if (this.head_0 == null)
      this.head_0 = item;
    if (this.tail_0 == null) {
      this.tail_0 = item;
    }
     else {
      ((tmp$_0 = this.tail_0) != null ? tmp$_0 : Kotlin.throwNPE()).next_8be2vx$ = item;
      item.prev_8be2vx$ = this.tail_0;
      this.tail_0 = item;
    }
    item.list_8be2vx$ = this;
    this._size_0 = this._size_0 + 1 | 0;
  };
  LinkedList2.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'LinkedList2',
    interfaces: [MutableIterable]
  };
  function getCyclic($receiver, index) {
    return $receiver.get_za3lpa$(index % $receiver.size);
  }
  function MapList() {
    this.map = lmapOf([]);
  }
  var collectionSizeOrDefault = Kotlin.kotlin.collections.collectionSizeOrDefault_ba2ldo$;
  MapList.prototype.iterator = function () {
    var $receiver = this.map.entries;
    var destination = ArrayList_init(collectionSizeOrDefault($receiver, 10));
    var tmp$;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      destination.add_11rb$(to(item.key, item.value));
    }
    return destination.iterator();
  };
  MapList.prototype.flatMapIterator = function () {
    var $receiver = this.map.entries;
    var destination = ArrayList_init();
    var tmp$;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      var $receiver_0 = element.value;
      var destination_0 = ArrayList_init(collectionSizeOrDefault($receiver_0, 10));
      var tmp$_0;
      tmp$_0 = $receiver_0.iterator();
      while (tmp$_0.hasNext()) {
        var item = tmp$_0.next();
        destination_0.add_11rb$(to(element.key, item));
      }
      var list = destination_0;
      addAll(destination, list);
    }
    return destination.iterator();
  };
  MapList.prototype.append_xwzc9p$ = function (key, value) {
    var tmp$;
    var $receiver = this.map;
    var tmp$_0;
    var value_0 = $receiver.get_11rb$(key);
    if (value_0 == null) {
      var answer = ArrayList_init();
      $receiver.put_xwzc9p$(key, answer);
      tmp$_0 = answer;
    }
     else {
      tmp$_0 = value_0;
    }
    ((tmp$ = this.map.get_11rb$(key)) != null ? tmp$ : Kotlin.throwNPE()).add_11rb$(value);
    return this;
  };
  MapList.prototype.replace_xwzc9p$ = function (key, value) {
    this.map.remove_11rb$(key);
    this.append_xwzc9p$(key, value);
    return this;
  };
  MapList.prototype.appendAll_5csooj$ = function (items) {
    var tmp$;
    for (tmp$ = 0; tmp$ !== items.length; ++tmp$) {
      var tmp$_0 = items[tmp$];
      var k = tmp$_0.component1()
      , v = tmp$_0.component2();
      this.append_xwzc9p$(k, v);
    }
    return this;
  };
  MapList.prototype.replaceAll_5csooj$ = function (items) {
    var tmp$;
    for (tmp$ = 0; tmp$ !== items.length; ++tmp$) {
      var tmp$_0 = items[tmp$];
      var k = tmp$_0.component1()
      , v = tmp$_0.component2();
      this.replace_xwzc9p$(k, v);
    }
    return this;
  };
  MapList.prototype.get_11rb$ = function (key) {
    return this.map.get_11rb$(key);
  };
  MapList.prototype.getFirst_11rb$ = function (key) {
    var tmp$;
    return (tmp$ = this.map.get_11rb$(key)) != null ? firstOrNull(tmp$) : null;
  };
  MapList.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'MapList',
    interfaces: [Iterable]
  };
  function MapList_init(items, $this) {
    $this = $this || Object.create(MapList.prototype);
    MapList.call($this);
    var tmp$;
    tmp$ = items.iterator();
    while (tmp$.hasNext()) {
      var tmp$_0 = tmp$.next();
      var k = tmp$_0.component1()
      , v = tmp$_0.component2();
      $this.append_xwzc9p$(k, v);
    }
    return $this;
  }
  function MapList_init_0(items, $this) {
    $this = $this || Object.create(MapList.prototype);
    MapList.call($this);
    var tmp$;
    tmp$ = items.entries.iterator();
    while (tmp$.hasNext()) {
      var tmp$_0 = tmp$.next();
      var k = tmp$_0.key;
      var v = tmp$_0.value;
      $this.append_xwzc9p$(k, v);
    }
    return $this;
  }
  function MapList_init_1(items, $this) {
    $this = $this || Object.create(MapList.prototype);
    MapList.call($this);
    var tmp$, tmp$_0;
    tmp$ = items.iterator();
    while (tmp$.hasNext()) {
      var tmp$_1 = tmp$.next();
      var k = tmp$_1.component1()
      , values = tmp$_1.component2();
      tmp$_0 = values.iterator();
      while (tmp$_0.hasNext()) {
        var v = tmp$_0.next();
        $this.append_xwzc9p$(k, v);
      }
    }
    return $this;
  }
  function ByteArrayBuilder() {
    this.chunks_0 = ArrayList_init();
    this.size_a4mzng$_0 = 0;
  }
  Object.defineProperty(ByteArrayBuilder.prototype, 'size', {
    get: function () {
      return this.size_a4mzng$_0;
    },
    set: function (size) {
      this.size_a4mzng$_0 = size;
    }
  });
  ByteArrayBuilder.prototype.append_fqrh44$ = function (chunk) {
    this.chunks_0.add_11rb$(chunk);
    this.size = this.size + chunk.length | 0;
  };
  ByteArrayBuilder.prototype.clear = function () {
    this.chunks_0.clear();
    this.size = 0;
  };
  ByteArrayBuilder.prototype.append_mj6st8$ = function (chunk, offset, length) {
    var toIndex = offset + length | 0;
    var achunk = chunk.slice(offset, toIndex);
    this.chunks_0.add_11rb$(achunk);
    this.size = this.size + achunk.length | 0;
  };
  ByteArrayBuilder.prototype.append_bbow61$ = function (buffer) {
    var tmp$;
    tmp$ = buffer.chunks_0.iterator();
    while (tmp$.hasNext()) {
      var c = tmp$.next();
      this.append_fqrh44$(c);
    }
  };
  ByteArrayBuilder.prototype.append_s8j3t7$ = function (v) {
    this.append_fqrh44$(new Int8Array([v]));
  };
  ByteArrayBuilder.prototype.toByteArray = function () {
    var tmp$;
    var out = new Int8Array(this.size);
    var offset = 0;
    tmp$ = this.chunks_0.iterator();
    while (tmp$.hasNext()) {
      var chunk = tmp$.next();
      copyRangeTo_1(chunk, 0, out, offset, chunk.length);
      offset = offset + chunk.length | 0;
    }
    return out;
  };
  ByteArrayBuilder.prototype.toString_qa9gbo$ = function (charset) {
    return toString(this.toByteArray(), charset);
  };
  ByteArrayBuilder.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'ByteArrayBuilder',
    interfaces: []
  };
  function ByteArrayBuilder_init($this) {
    $this = $this || Object.create(ByteArrayBuilder.prototype);
    ByteArrayBuilder.call($this);
    return $this;
  }
  function ByteArrayBuilder_init_0(chunk, $this) {
    $this = $this || Object.create(ByteArrayBuilder.prototype);
    ByteArrayBuilder.call($this);
    $this.append_fqrh44$(chunk);
    return $this;
  }
  function ByteArrayBuilder_init_1(chunks, $this) {
    $this = $this || Object.create(ByteArrayBuilder.prototype);
    ByteArrayBuilder.call($this);
    var tmp$;
    tmp$ = chunks.iterator();
    while (tmp$.hasNext()) {
      var chunk = tmp$.next();
      $this.append_fqrh44$(chunk);
    }
    return $this;
  }
  function Stack() {
    this.items_0 = ArrayList_init();
  }
  Object.defineProperty(Stack.prototype, 'size', {
    get: function () {
      return this.items_0.size;
    }
  });
  Stack.prototype.push_11rb$ = function (v) {
    this.items_0.add_11rb$(v);
  };
  Stack.prototype.pop = function () {
    return this.items_0.removeAt_za3lpa$(this.items_0.size - 1 | 0);
  };
  Stack.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'Stack',
    interfaces: []
  };
  function Stack_init(items, $this) {
    $this = $this || Object.create(Stack.prototype);
    Stack.call($this);
    var tmp$;
    for (tmp$ = 0; tmp$ !== items.length; ++tmp$) {
      var item = items[tmp$];
      $this.push_11rb$(item);
    }
    return $this;
  }
  function Queue() {
    this.items_0 = new LinkedList();
  }
  Object.defineProperty(Queue.prototype, 'size', {
    get: function () {
      return this.items_0.size;
    }
  });
  Queue.prototype.queue_11rb$ = function (v) {
    this.items_0.addLast_11rb$(v);
  };
  Queue.prototype.dequeue = function () {
    return this.items_0.removeFirst();
  };
  Queue.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'Queue',
    interfaces: []
  };
  function Queue_init(items, $this) {
    $this = $this || Object.create(Queue.prototype);
    Queue.call($this);
    var tmp$;
    for (tmp$ = 0; tmp$ !== items.length; ++tmp$) {
      var item = items[tmp$];
      $this.queue_11rb$(item);
    }
    return $this;
  }
  function lmapOf(pairs) {
    var tmp$;
    var out = LinkedHashMap_init();
    for (tmp$ = 0; tmp$ !== pairs.length; ++tmp$) {
      var tmp$_0 = pairs[tmp$];
      var key = tmp$_0.component1()
      , value = tmp$_0.component2();
      out.put_xwzc9p$(key, value);
    }
    return out;
  }
  function toLinkedMap($receiver) {
    var tmp$;
    var out = LinkedHashMap_init();
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var tmp$_0 = tmp$.next();
      var key = tmp$_0.component1()
      , value = tmp$_0.component2();
      out.put_xwzc9p$(key, value);
    }
    return out;
  }
  function InvalidOperationException(str) {
    if (str === void 0)
      str = 'Invalid Operation';
    Exception.call(this, str);
    this.name = 'InvalidOperationException';
  }
  InvalidOperationException.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'InvalidOperationException',
    interfaces: [Exception]
  };
  function OutOfBoundsException(index, str) {
    if (index === void 0)
      index = -1;
    if (str === void 0)
      str = 'Out Of Bounds';
    Exception.call(this, str);
    this.name = 'OutOfBoundsException';
  }
  OutOfBoundsException.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'OutOfBoundsException',
    interfaces: [Exception]
  };
  function KeyNotFoundException(str) {
    if (str === void 0)
      str = 'Key Not Found';
    Exception.call(this, str);
    this.name = 'KeyNotFoundException';
  }
  KeyNotFoundException.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'KeyNotFoundException',
    interfaces: [Exception]
  };
  function NotImplementedException(str) {
    if (str === void 0)
      str = 'Not Implemented';
    Exception.call(this, str);
    this.name = 'NotImplementedException';
  }
  NotImplementedException.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'NotImplementedException',
    interfaces: [Exception]
  };
  function InvalidArgumentException(str) {
    if (str === void 0)
      str = 'Invalid Argument';
    Exception.call(this, str);
    this.name = 'InvalidArgumentException';
  }
  InvalidArgumentException.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'InvalidArgumentException',
    interfaces: [Exception]
  };
  function MustValidateCodeException(str) {
    if (str === void 0)
      str = 'Must Validate Code';
    Exception.call(this, str);
    this.name = 'MustValidateCodeException';
  }
  MustValidateCodeException.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'MustValidateCodeException',
    interfaces: [Exception]
  };
  function MustOverrideException(str) {
    if (str === void 0)
      str = 'Must Override';
    Exception.call(this, str);
    this.name = 'MustOverrideException';
  }
  MustOverrideException.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'MustOverrideException',
    interfaces: [Exception]
  };
  function DeprecatedException(str) {
    if (str === void 0)
      str = 'Deprecated';
    Exception.call(this, str);
    this.name = 'DeprecatedException';
  }
  DeprecatedException.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'DeprecatedException',
    interfaces: [Exception]
  };
  function UnexpectedException(str) {
    if (str === void 0)
      str = 'Unexpected';
    Exception.call(this, str);
    this.name = 'UnexpectedException';
  }
  UnexpectedException.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'UnexpectedException',
    interfaces: [Exception]
  };
  function get_deprecated() {
    throw new MustValidateCodeException();
  }
  function get_mustValidate() {
    throw new NotImplementedException();
  }
  function get_noImpl() {
    throw new NotImplementedException();
  }
  function get_invalidOp() {
    throw new InvalidOperationException();
  }
  function get_invalidArg() {
    throw new InvalidArgumentException();
  }
  function deprecated(msg) {
    throw new DeprecatedException(msg);
  }
  function mustValidate(msg) {
    throw new MustValidateCodeException(msg);
  }
  function noImpl(msg) {
    throw new NotImplementedException(msg);
  }
  function invalidOp(msg) {
    throw new InvalidOperationException(msg);
  }
  function invalidArg(msg) {
    throw new InvalidArgumentException(msg);
  }
  function unsupported(msg) {
    throw new UnsupportedOperationException(msg);
  }
  function unsupported_0() {
    throw new UnsupportedOperationException();
  }
  function invalidArgument(msg) {
    throw new InvalidArgumentException(msg);
  }
  function unexpected(msg) {
    throw new UnexpectedException(msg);
  }
  function untestedWarn(msg) {
    println('Untested: ' + msg);
  }
  function noImplWarn(msg) {
    println('Not implemented: ' + msg);
  }
  var ignoreErrors = defineInlineFunction('korio-js.com.soywiz.korio.error.ignoreErrors_nkfre5$', wrapFunction(function () {
    var printStackTrace = _.com.soywiz.korio.lang.printStackTrace_dbl4o4$;
    var Throwable = Error;
    return function (show, action) {
      if (show === void 0)
        show = false;
      try {
        return action();
      }
       catch (e) {
        if (Kotlin.isType(e, Throwable)) {
          if (show)
            printStackTrace(e);
          return null;
        }
         else
          throw e;
      }
    };
  }));
  function QExpr() {
    QExpr$Companion_getInstance();
  }
  function QExpr$BINOP(op, key, value) {
    QExpr.call(this);
    this.op = op;
    this.key = key;
    this.value = value;
  }
  QExpr$BINOP.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'BINOP',
    interfaces: [QExpr]
  };
  QExpr$BINOP.prototype.component1 = function () {
    return this.op;
  };
  QExpr$BINOP.prototype.component2 = function () {
    return this.key;
  };
  QExpr$BINOP.prototype.component3 = function () {
    return this.value;
  };
  QExpr$BINOP.prototype.copy_18o3fo$ = function (op, key, value) {
    return new QExpr$BINOP(op === void 0 ? this.op : op, key === void 0 ? this.key : key, value === void 0 ? this.value : value);
  };
  QExpr$BINOP.prototype.toString = function () {
    return 'BINOP(op=' + Kotlin.toString(this.op) + (', key=' + Kotlin.toString(this.key)) + (', value=' + Kotlin.toString(this.value)) + ')';
  };
  QExpr$BINOP.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.op) | 0;
    result = result * 31 + Kotlin.hashCode(this.key) | 0;
    result = result * 31 + Kotlin.hashCode(this.value) | 0;
    return result;
  };
  QExpr$BINOP.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.op, other.op) && Kotlin.equals(this.key, other.key) && Kotlin.equals(this.value, other.value)))));
  };
  function QExpr$AND(l, r) {
    QExpr.call(this);
    this.l = l;
    this.r = r;
  }
  QExpr$AND.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'AND',
    interfaces: [QExpr]
  };
  QExpr$AND.prototype.component1 = function () {
    return this.l;
  };
  QExpr$AND.prototype.component2 = function () {
    return this.r;
  };
  QExpr$AND.prototype.copy_ystgcu$ = function (l, r) {
    return new QExpr$AND(l === void 0 ? this.l : l, r === void 0 ? this.r : r);
  };
  QExpr$AND.prototype.toString = function () {
    return 'AND(l=' + Kotlin.toString(this.l) + (', r=' + Kotlin.toString(this.r)) + ')';
  };
  QExpr$AND.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.l) | 0;
    result = result * 31 + Kotlin.hashCode(this.r) | 0;
    return result;
  };
  QExpr$AND.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.l, other.l) && Kotlin.equals(this.r, other.r)))));
  };
  function QExpr$Companion() {
    QExpr$Companion_instance = this;
  }
  QExpr$Companion.prototype.invoke_wleo3x$ = function (callback) {
    return callback(new QExpr$Builder());
  };
  QExpr$Companion.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var QExpr$Companion_instance = null;
  function QExpr$Companion_getInstance() {
    if (QExpr$Companion_instance === null) {
      new QExpr$Companion();
    }
    return QExpr$Companion_instance;
  }
  function QExpr$Builder() {
  }
  QExpr$Builder.prototype.eq_batl2n$ = function ($receiver, v) {
    return new QExpr$BINOP('=', $receiver, v);
  };
  QExpr$Builder.prototype.gt_batl2n$ = function ($receiver, v) {
    return new QExpr$BINOP('>', $receiver, v);
  };
  QExpr$Builder.prototype.ge_batl2n$ = function ($receiver, v) {
    return new QExpr$BINOP('>=', $receiver, v);
  };
  QExpr$Builder.prototype.lt_batl2n$ = function ($receiver, v) {
    return new QExpr$BINOP('<', $receiver, v);
  };
  QExpr$Builder.prototype.le_batl2n$ = function ($receiver, v) {
    return new QExpr$BINOP('<=', $receiver, v);
  };
  QExpr$Builder.prototype.and_m5tsff$ = function ($receiver, v) {
    return new QExpr$AND($receiver, v);
  };
  QExpr$Builder.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'Builder',
    interfaces: []
  };
  function QExpr$TypedBuilder() {
  }
  QExpr$TypedBuilder.prototype.eq_bfanou$ = function ($receiver, v) {
    return new QExpr$BINOP('=', $receiver.callableName, v);
  };
  QExpr$TypedBuilder.prototype.gt_bfanou$ = function ($receiver, v) {
    return new QExpr$BINOP('>', $receiver.callableName, v);
  };
  QExpr$TypedBuilder.prototype.ge_bfanou$ = function ($receiver, v) {
    return new QExpr$BINOP('>=', $receiver.callableName, v);
  };
  QExpr$TypedBuilder.prototype.lt_bfanou$ = function ($receiver, v) {
    return new QExpr$BINOP('<', $receiver.callableName, v);
  };
  QExpr$TypedBuilder.prototype.le_bfanou$ = function ($receiver, v) {
    return new QExpr$BINOP('<=', $receiver.callableName, v);
  };
  QExpr$TypedBuilder.prototype.and_m5tsff$ = function ($receiver, v) {
    return new QExpr$AND($receiver, v);
  };
  QExpr$TypedBuilder.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'TypedBuilder',
    interfaces: []
  };
  QExpr.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'QExpr',
    interfaces: []
  };
  function Prototype() {
  }
  Prototype.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'Prototype',
    interfaces: [Annotation]
  };
  function Singleton() {
  }
  Singleton.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'Singleton',
    interfaces: [Annotation]
  };
  function Inject() {
  }
  Inject.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'Inject',
    interfaces: [Annotation]
  };
  function Optional() {
  }
  Optional.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'Optional',
    interfaces: [Annotation]
  };
  var createAnnotation = defineInlineFunction('korio-js.com.soywiz.korio.inject.createAnnotation_mez6f0$', wrapFunction(function () {
    var inject = _.com.soywiz.korio.inject;
    return function (T_0, isT, map) {
      return inject.CreateAnnotation.createAnnotation_i40ixr$(Kotlin.getKClass(T_0), map);
    };
  }));
  var createAnnotation_0 = defineInlineFunction('korio-js.com.soywiz.korio.inject.createAnnotation_cbzhh$', wrapFunction(function () {
    var inject = _.com.soywiz.korio.inject;
    var toMap = Kotlin.kotlin.collections.toMap_v2dak7$;
    return function (T_0, isT, map) {
      return inject.CreateAnnotation.createAnnotation_i40ixr$(Kotlin.getKClass(T_0), toMap(map));
    };
  }));
  function AsyncObjectProvider() {
  }
  AsyncObjectProvider.$metadata$ = {
    kind: Kotlin.Kind.INTERFACE,
    simpleName: 'AsyncObjectProvider',
    interfaces: []
  };
  function PrototypeAsyncObjectProvider(generator) {
    this.generator = generator;
  }
  PrototypeAsyncObjectProvider.prototype.get_e2b4l9$ = function (injector_0, continuation_0, suspended) {
    var instance = new Coroutine$get_e2b4l9$(this, injector_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$get_e2b4l9$($this, injector_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$injector = injector_0;
  }
  Coroutine$get_e2b4l9$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$get_e2b4l9$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$get_e2b4l9$.prototype.constructor = Coroutine$get_e2b4l9$;
  Coroutine$get_e2b4l9$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.generator(this.local$injector, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.local$injector.created_41v7ql$(this.result_0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  PrototypeAsyncObjectProvider.prototype.toString = function () {
    return 'PrototypeAsyncObjectProvider()';
  };
  PrototypeAsyncObjectProvider.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'PrototypeAsyncObjectProvider',
    interfaces: [AsyncObjectProvider]
  };
  function FactoryAsyncObjectProvider(generator) {
    this.generator = generator;
  }
  FactoryAsyncObjectProvider.prototype.get_e2b4l9$ = function (injector_0, continuation_0, suspended) {
    var instance = new Coroutine$get_e2b4l9$_0(this, injector_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$get_e2b4l9$_0($this, injector_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$injector = injector_0;
  }
  Coroutine$get_e2b4l9$_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$get_e2b4l9$_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$get_e2b4l9$_0.prototype.constructor = Coroutine$get_e2b4l9$_0;
  Coroutine$get_e2b4l9$_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.generator(this.local$injector, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.result_0.create(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            this.state_0 = 4;
            this.result_0 = this.local$injector.created_41v7ql$(this.result_0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 4:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  FactoryAsyncObjectProvider.prototype.toString = function () {
    return 'FactoryAsyncObjectProvider()';
  };
  FactoryAsyncObjectProvider.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'FactoryAsyncObjectProvider',
    interfaces: [AsyncObjectProvider]
  };
  function SingletonAsyncObjectProvider(generator) {
    this.generator = generator;
    this.value = null;
  }
  SingletonAsyncObjectProvider.prototype.get_e2b4l9$ = function (injector_0, continuation_0, suspended) {
    var instance = new Coroutine$get_e2b4l9$_1(this, injector_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$get_e2b4l9$_1($this, injector_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$tmp$ = void 0;
    this.local$injector = injector_0;
  }
  Coroutine$get_e2b4l9$_1.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$get_e2b4l9$_1.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$get_e2b4l9$_1.prototype.constructor = Coroutine$get_e2b4l9$_1;
  Coroutine$get_e2b4l9$_1.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.$this.value == null) {
              this.state_0 = 2;
              this.result_0 = this.$this.generator(this.local$injector, this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              break;
            }
             else {
              this.state_0 = 4;
              continue;
            }

          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.local$injector.created_41v7ql$(this.result_0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            this.$this.value = this.result_0;
            this.state_0 = 4;
            continue;
          case 4:
            return (this.local$tmp$ = this.$this.value) != null ? this.local$tmp$ : Kotlin.throwNPE();
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  SingletonAsyncObjectProvider.prototype.toString = function () {
    return 'SingletonAsyncObjectProvider(' + Kotlin.toString(this.value) + ')';
  };
  SingletonAsyncObjectProvider.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'SingletonAsyncObjectProvider',
    interfaces: [AsyncObjectProvider]
  };
  function InstanceAsyncObjectProvider(instance) {
    this.instance = instance;
  }
  InstanceAsyncObjectProvider.prototype.get_e2b4l9$ = function (injector, continuation) {
    return this.instance;
  };
  InstanceAsyncObjectProvider.prototype.toString = function () {
    return 'InstanceAsyncObjectProvider(' + this.instance + ')';
  };
  InstanceAsyncObjectProvider.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'InstanceAsyncObjectProvider',
    interfaces: [AsyncObjectProvider]
  };
  function AsyncInjector(parent, level) {
    if (parent === void 0)
      parent = null;
    if (level === void 0)
      level = 0;
    this.parent = parent;
    this.level = level;
    this.$delegate_e2b4l9$_0 = new Extra$Mixin();
    this.fallbackProvider = null;
    this.providersByClass = lmapOf([]);
    var tmp$, tmp$_0;
    this.root = (tmp$_0 = (tmp$ = this.parent) != null ? tmp$.root : null) != null ? tmp$_0 : this;
    this.mapInstance_4jlqra$(this, Kotlin.getKClass(AsyncInjector));
  }
  Object.defineProperty(AsyncInjector.prototype, 'nearestFallbackProvider', {
    get: function () {
      var tmp$, tmp$_0;
      return (tmp$_0 = this.fallbackProvider) != null ? tmp$_0 : (tmp$ = this.parent) != null ? tmp$.fallbackProvider : null;
    }
  });
  AsyncInjector.prototype.child = function () {
    return new AsyncInjector(this, this.level + 1 | 0);
  };
  AsyncInjector.prototype.getWith_84k75t$ = defineInlineFunction('korio-js.com.soywiz.korio.inject.AsyncInjector.getWith_84k75t$', function (T_0, isT, instances, continuation) {
    return this.getWith_pn9tk4$(Kotlin.getKClass(T_0), instances.slice(), continuation);
  });
  AsyncInjector.prototype.getWith_pn9tk4$ = function (clazz, instances, continuation) {
    var tmp$, tmp$_0;
    var c = this.child();
    for (tmp$ = 0; tmp$ !== instances.length; ++tmp$) {
      var i = instances[tmp$];
      c.mapInstance_4jlqra$(i, Kotlin.isType(tmp$_0 = Kotlin.getKClassFromExpression(i), KClass) ? tmp$_0 : Kotlin.throwCCE());
    }
    return c.get_esmw97$(clazz, void 0, continuation);
  };
  AsyncInjector.prototype.dump = function () {
    var tmp$, tmp$_0;
    println(this.toString());
    tmp$ = this.providersByClass.entries.iterator();
    while (tmp$.hasNext()) {
      var tmp$_1 = tmp$.next();
      var k = tmp$_1.key;
      var v = tmp$_1.value;
      println('- ' + k + ': ' + v);
    }
    (tmp$_0 = this.parent) != null ? (tmp$_0.dump(), Unit) : null;
  };
  AsyncInjector.prototype.get_30y1fr$ = defineInlineFunction('korio-js.com.soywiz.korio.inject.AsyncInjector.get_30y1fr$', function (T_0, isT, continuation) {
    return this.get_esmw97$(Kotlin.getKClass(T_0), void 0, continuation);
  });
  AsyncInjector.prototype.getOrNull_30y1fr$ = defineInlineFunction('korio-js.com.soywiz.korio.inject.AsyncInjector.getOrNull_30y1fr$', function (T_0, isT, continuation) {
    return this.getOrNull_esmw97$(Kotlin.getKClass(T_0), void 0, continuation);
  });
  AsyncInjector.prototype.mapInstance_issdgt$ = defineInlineFunction('korio-js.com.soywiz.korio.inject.AsyncInjector.mapInstance_issdgt$', function (T_0, isT, instance) {
    return this.mapInstance_4jlqra$(instance, Kotlin.getKClass(T_0));
  });
  AsyncInjector.prototype.mapFactory_galswj$ = defineInlineFunction('korio-js.com.soywiz.korio.inject.AsyncInjector.mapFactory_galswj$', function (T_0, isT, gen) {
    return this.mapFactory_7kvue$(Kotlin.getKClass(T_0), gen);
  });
  AsyncInjector.prototype.mapSingleton_wmmeli$ = defineInlineFunction('korio-js.com.soywiz.korio.inject.AsyncInjector.mapSingleton_wmmeli$', function (T_0, isT, gen) {
    return this.mapSingleton_7g6y7r$(Kotlin.getKClass(T_0), gen);
  });
  AsyncInjector.prototype.mapPrototype_wmmeli$ = defineInlineFunction('korio-js.com.soywiz.korio.inject.AsyncInjector.mapPrototype_wmmeli$', function (T_0, isT, gen) {
    return this.mapPrototype_7g6y7r$(Kotlin.getKClass(T_0), gen);
  });
  AsyncInjector.prototype.mapAnnotation_cbzhh$ = defineInlineFunction('korio-js.com.soywiz.korio.inject.AsyncInjector.mapAnnotation_cbzhh$', wrapFunction(function () {
    var inject = _.com.soywiz.korio.inject;
    var toMap = Kotlin.kotlin.collections.toMap_v2dak7$;
    return function (T_0, isT, items) {
      this.mapInstance_issdgt$;
      var map = items.slice();
      return this.mapInstance_4jlqra$(inject.CreateAnnotation.createAnnotation_i40ixr$(Kotlin.getKClass(T_0), toMap(map)), Kotlin.getKClass(T_0));
    };
  }));
  AsyncInjector.prototype.mapInstance_4jlqra$ = function (instance, clazz) {
    var tmp$, tmp$_0;
    tmp$_0 = Kotlin.isType(tmp$ = instance, Any) ? tmp$ : Kotlin.throwCCE();
    var $receiver = this.providersByClass;
    var value = new InstanceAsyncObjectProvider(tmp$_0);
    $receiver.put_xwzc9p$(clazz, value);
    return this;
  };
  AsyncInjector.prototype.mapFactory_7kvue$ = function (clazz, gen) {
    var $receiver = this.providersByClass;
    var value = new FactoryAsyncObjectProvider(gen);
    $receiver.put_xwzc9p$(clazz, value);
    return this;
  };
  AsyncInjector.prototype.mapSingleton_7g6y7r$ = function (clazz, gen) {
    var $receiver = this.providersByClass;
    var value = new SingletonAsyncObjectProvider(gen);
    $receiver.put_xwzc9p$(clazz, value);
    return this;
  };
  AsyncInjector.prototype.mapPrototype_7g6y7r$ = function (clazz, gen) {
    var $receiver = this.providersByClass;
    var value = new PrototypeAsyncObjectProvider(gen);
    $receiver.put_xwzc9p$(clazz, value);
    return this;
  };
  function AsyncInjector$RequestContext(initialClazz) {
    this.initialClazz = initialClazz;
  }
  AsyncInjector$RequestContext.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'RequestContext',
    interfaces: []
  };
  AsyncInjector$RequestContext.prototype.component1 = function () {
    return this.initialClazz;
  };
  AsyncInjector$RequestContext.prototype.copy_xo1ogr$ = function (initialClazz) {
    return new AsyncInjector$RequestContext(initialClazz === void 0 ? this.initialClazz : initialClazz);
  };
  AsyncInjector$RequestContext.prototype.toString = function () {
    return 'RequestContext(initialClazz=' + Kotlin.toString(this.initialClazz) + ')';
  };
  AsyncInjector$RequestContext.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.initialClazz) | 0;
    return result;
  };
  AsyncInjector$RequestContext.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.initialClazz, other.initialClazz))));
  };
  AsyncInjector.prototype.getProviderOrNull_esmw97$ = function (clazz_0, ctx_0, continuation_0, suspended) {
    var instance = new Coroutine$getProviderOrNull_esmw97$(this, clazz_0, ctx_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$getProviderOrNull_esmw97$($this, clazz_0, ctx_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$tmp$ = void 0;
    this.local$tmp$_0 = void 0;
    this.local$tmp$_1 = void 0;
    this.local$tmp$_2 = void 0;
    this.local$clazz = clazz_0;
    this.local$ctx = ctx_0;
  }
  Coroutine$getProviderOrNull_esmw97$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$getProviderOrNull_esmw97$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$getProviderOrNull_esmw97$.prototype.constructor = Coroutine$getProviderOrNull_esmw97$;
  Coroutine$getProviderOrNull_esmw97$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$ctx === void 0)
              this.local$ctx = new AsyncInjector$RequestContext(this.local$clazz);
            this.local$tmp$_0 = this.$this.providersByClass.get_11rb$(this.local$clazz);
            if (this.local$tmp$_0 == null) {
              this.state_0 = 2;
              this.result_0 = (this.local$tmp$ = this.$this.parent) != null ? this.local$tmp$.getProviderOrNull_esmw97$(this.local$clazz, this.local$ctx, this) : null;
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              break;
            }
             else {
              this.state_0 = 3;
              continue;
            }

          case 1:
            throw this.exception_0;
          case 2:
            this.local$tmp$_0 = this.result_0;
            this.state_0 = 3;
            continue;
          case 3:
            if (this.local$tmp$_0 == null) {
              this.state_0 = 4;
              this.result_0 = (this.local$tmp$_1 = this.$this.nearestFallbackProvider) != null ? this.local$tmp$_1(this.local$clazz, this.local$ctx, this) : null;
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              break;
            }
             else {
              this.state_0 = 5;
              continue;
            }

          case 4:
            this.local$tmp$_0 = this.result_0;
            this.state_0 = 5;
            continue;
          case 5:
            var tmp$;
            return (tmp$ = this.local$tmp$_2 = this.local$tmp$_0) == null || Kotlin.isType(tmp$, AsyncObjectProvider) ? this.local$tmp$_2 : null;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  AsyncInjector.prototype.getProvider_esmw97$ = function (clazz_0, ctx_0, continuation_0, suspended) {
    var instance = new Coroutine$getProvider_esmw97$(this, clazz_0, ctx_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$getProvider_esmw97$($this, clazz_0, ctx_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$tmp$ = void 0;
    this.local$clazz = clazz_0;
    this.local$ctx = ctx_0;
  }
  Coroutine$getProvider_esmw97$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$getProvider_esmw97$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$getProvider_esmw97$.prototype.constructor = Coroutine$getProvider_esmw97$;
  Coroutine$getProvider_esmw97$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$ctx === void 0)
              this.local$ctx = new AsyncInjector$RequestContext(this.local$clazz);
            this.state_0 = 2;
            this.result_0 = this.$this.getProviderOrNull_esmw97$(this.local$clazz, this.local$ctx, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$tmp$ = this.result_0;
            if (this.local$tmp$ == null) {
              throw new AsyncInjector$NotMappedException(this.local$clazz, this.local$ctx.initialClazz, this.local$ctx, "Class '" + this.local$clazz + "' doesn't have constructors " + this.local$ctx);
            }

            return this.local$tmp$;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  AsyncInjector.prototype.getOrNull_esmw97$ = function (clazz_0, ctx_0, continuation_0, suspended) {
    var instance = new Coroutine$getOrNull_esmw97$(this, clazz_0, ctx_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$getOrNull_esmw97$($this, clazz_0, ctx_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$tmp$ = void 0;
    this.local$clazz = clazz_0;
    this.local$ctx = ctx_0;
  }
  Coroutine$getOrNull_esmw97$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$getOrNull_esmw97$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$getOrNull_esmw97$.prototype.constructor = Coroutine$getOrNull_esmw97$;
  Coroutine$getOrNull_esmw97$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$ctx === void 0)
              this.local$ctx = new AsyncInjector$RequestContext(this.local$clazz);
            this.state_0 = 2;
            this.result_0 = this.$this.getProviderOrNull_esmw97$(this.local$clazz, this.local$ctx, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$tmp$ = this.result_0;
            this.state_0 = 3;
            this.result_0 = this.local$tmp$ != null ? this.local$tmp$.get_e2b4l9$(this.$this, this) : null;
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  AsyncInjector.prototype.get_esmw97$ = function (clazz_0, ctx_0, continuation_0, suspended) {
    var instance = new Coroutine$get_esmw97$(this, clazz_0, ctx_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$get_esmw97$($this, clazz_0, ctx_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$clazz = clazz_0;
    this.local$ctx = ctx_0;
  }
  Coroutine$get_esmw97$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$get_esmw97$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$get_esmw97$.prototype.constructor = Coroutine$get_esmw97$;
  Coroutine$get_esmw97$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$ctx === void 0)
              this.local$ctx = new AsyncInjector$RequestContext(this.local$clazz);
            this.state_0 = 2;
            this.result_0 = this.$this.getProvider_esmw97$(this.local$clazz, this.local$ctx, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.result_0.get_e2b4l9$(this.$this, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  AsyncInjector.prototype.has_lmshww$ = function (clazz_0, continuation_0, suspended) {
    var instance = new Coroutine$has_lmshww$(this, clazz_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$has_lmshww$($this, clazz_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$clazz = clazz_0;
  }
  Coroutine$has_lmshww$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$has_lmshww$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$has_lmshww$.prototype.constructor = Coroutine$has_lmshww$;
  Coroutine$has_lmshww$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.getProviderOrNull_esmw97$(this.local$clazz, void 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0 != null;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function AsyncInjector$NotMappedException(clazz, requestedByClass, ctx, msg) {
    if (msg === void 0)
      msg = 'Not mapped ' + clazz + ' requested by ' + requestedByClass + ' in ' + ctx;
    RuntimeException.call(this, msg);
    this.clazz = clazz;
    this.requestedByClass = requestedByClass;
    this.ctx = ctx;
    this.msg = msg;
    this.name = 'AsyncInjector$NotMappedException';
  }
  AsyncInjector$NotMappedException.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'NotMappedException',
    interfaces: [RuntimeException]
  };
  AsyncInjector.prototype.toString = function () {
    return 'AsyncInjector(level=' + this.level + ')';
  };
  AsyncInjector.prototype.created_41v7ql$ = function (instance_0, continuation_0, suspended) {
    var instance_0 = new Coroutine$created_41v7ql$(this, instance_0, continuation_0);
    if (suspended)
      return instance_0;
    else
      return instance_0.doResume(null);
  };
  function Coroutine$created_41v7ql$($this, instance_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$instance = instance_0;
  }
  Coroutine$created_41v7ql$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$created_41v7ql$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$created_41v7ql$.prototype.constructor = Coroutine$created_41v7ql$;
  Coroutine$created_41v7ql$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (Kotlin.isType(this.local$instance, AsyncDependency)) {
              this.state_0 = 2;
              this.result_0 = this.local$instance.init(this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              break;
            }
             else {
              this.state_0 = 3;
              continue;
            }

          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            continue;
          case 3:
            if (Kotlin.isType(this.local$instance, InjectorAsyncDependency)) {
              this.state_0 = 4;
              this.result_0 = this.local$instance.init_e2b4l9$(this.$this, this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              break;
            }
             else {
              this.state_0 = 5;
              continue;
            }

          case 4:
            this.state_0 = 5;
            continue;
          case 5:
            return this.local$instance;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  Object.defineProperty(AsyncInjector.prototype, 'extra', {
    get: function () {
      return this.$delegate_e2b4l9$_0.extra;
    },
    set: function (tmp$) {
      this.$delegate_e2b4l9$_0.extra = tmp$;
    }
  });
  AsyncInjector.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'AsyncInjector',
    interfaces: [Extra]
  };
  function AsyncFactory() {
  }
  AsyncFactory.$metadata$ = {
    kind: Kotlin.Kind.INTERFACE,
    simpleName: 'AsyncFactory',
    interfaces: []
  };
  function InjectedHandler() {
  }
  InjectedHandler.$metadata$ = {
    kind: Kotlin.Kind.INTERFACE,
    simpleName: 'InjectedHandler',
    interfaces: []
  };
  function AsyncFactoryClass(clazz) {
    this.clazz = clazz;
  }
  AsyncFactoryClass.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'AsyncFactoryClass',
    interfaces: [Annotation]
  };
  function AsyncDependency() {
  }
  AsyncDependency.$metadata$ = {
    kind: Kotlin.Kind.INTERFACE,
    simpleName: 'AsyncDependency',
    interfaces: []
  };
  function InjectorAsyncDependency() {
  }
  InjectorAsyncDependency.$metadata$ = {
    kind: Kotlin.Kind.INTERFACE,
    simpleName: 'InjectorAsyncDependency',
    interfaces: []
  };
  function Bytes(byteArray) {
    this.byteArray = byteArray;
  }
  Bytes.prototype.equals = function (other) {
    var tmp$;
    if (this === other)
      tmp$ = true;
    else if (Kotlin.isType(other, Bytes))
      tmp$ = contentEquals(this.byteArray, other.byteArray);
    else
      tmp$ = false;
    return tmp$;
  };
  Bytes.prototype.hashCode = function () {
    return contentHashCode(this.byteArray);
  };
  Bytes.prototype.toString = function () {
    return contentToString(this.byteArray);
  };
  Bytes.prototype.toByteArray = function () {
    return this.byteArray;
  };
  Bytes.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'Bytes',
    interfaces: []
  };
  function toBytes($receiver) {
    return new Bytes($receiver);
  }
  function Charset(name) {
    Charset$Companion_getInstance();
    this.name = name;
  }
  Charset.prototype.encode_xn9bcf$ = function (out, src, start, end, callback$default) {
    if (start === void 0)
      start = 0;
    if (end === void 0)
      end = src.length;
    callback$default ? callback$default(out, src, start, end) : this.encode_xn9bcf$$default(out, src, start, end);
  };
  Charset.prototype.decode_9w11d2$ = function (out, src, start, end, callback$default) {
    if (start === void 0)
      start = 0;
    if (end === void 0)
      end = src.length;
    callback$default ? callback$default(out, src, start, end) : this.decode_9w11d2$$default(out, src, start, end);
  };
  function Charset$Companion() {
    Charset$Companion_instance = this;
  }
  Charset$Companion.prototype.forName_61zpoe$ = function (name) {
    return UTF8Charset_getInstance();
  };
  Charset$Companion.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Charset$Companion_instance = null;
  function Charset$Companion_getInstance() {
    if (Charset$Companion_instance === null) {
      new Charset$Companion();
    }
    return Charset$Companion_instance;
  }
  Charset.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'Charset',
    interfaces: []
  };
  function UTC8CharsetBase(name) {
    Charset.call(this, name);
  }
  UTC8CharsetBase.prototype.createByte_80dzbf$_0 = function (codePoint, shift) {
    return codePoint >> shift & 63 | 128;
  };
  UTC8CharsetBase.prototype.encode_xn9bcf$$default = function (out, src, start, end) {
    for (var n = start; n < end; n++) {
      var codePoint = src.charCodeAt(n) | 0;
      if ((codePoint & ~127) === 0) {
        out.append_s8j3t7$(Kotlin.toByte(codePoint));
      }
       else {
        if ((codePoint & ~2047) === 0) {
          out.append_s8j3t7$(Kotlin.toByte(codePoint >> 6 & 31 | 192));
        }
         else if ((codePoint & ~65535) === 0) {
          out.append_s8j3t7$(Kotlin.toByte(codePoint >> 12 & 15 | 224));
          out.append_s8j3t7$(Kotlin.toByte(this.createByte_80dzbf$_0(codePoint, 6)));
        }
         else if ((codePoint & -2097152) === 0) {
          out.append_s8j3t7$(Kotlin.toByte(codePoint >> 18 & 7 | 240));
          out.append_s8j3t7$(Kotlin.toByte(this.createByte_80dzbf$_0(codePoint, 12)));
          out.append_s8j3t7$(Kotlin.toByte(this.createByte_80dzbf$_0(codePoint, 6)));
        }
        out.append_s8j3t7$(Kotlin.toByte(codePoint & 63 | 128));
      }
    }
  };
  UTC8CharsetBase.prototype.decode_9w11d2$$default = function (out, src, start, end) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
    var i = start;
    while (i < end) {
      var c = src[tmp$ = i, i = tmp$ + 1 | 0, tmp$] & 255;
      tmp$_0 = c >> 4;
      if (tmp$_0 === 0 || tmp$_0 === 1 || tmp$_0 === 2 || tmp$_0 === 3 || tmp$_0 === 4 || tmp$_0 === 5 || tmp$_0 === 6 || tmp$_0 === 7)
        out.append_s8itvh$(Kotlin.toChar(c));
      else if (tmp$_0 === 12 || tmp$_0 === 13) {
        out.append_s8itvh$(Kotlin.toChar((c & 31) << 6 | src[tmp$_1 = i, i = tmp$_1 + 1 | 0, tmp$_1] & 63));
      }
       else if (tmp$_0 === 14) {
        out.append_s8itvh$(Kotlin.toChar((c & 15) << 12 | (src[tmp$_2 = i, i = tmp$_2 + 1 | 0, tmp$_2] & 63) << 6 | src[tmp$_3 = i, i = tmp$_3 + 1 | 0, tmp$_3] & 63));
      }
    }
  };
  UTC8CharsetBase.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'UTC8CharsetBase',
    interfaces: [Charset]
  };
  function UTF8Charset() {
    UTF8Charset_instance = this;
    UTC8CharsetBase.call(this, 'UTF-8');
  }
  UTF8Charset.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'UTF8Charset',
    interfaces: [UTC8CharsetBase]
  };
  var UTF8Charset_instance = null;
  function UTF8Charset_getInstance() {
    if (UTF8Charset_instance === null) {
      new UTF8Charset();
    }
    return UTF8Charset_instance;
  }
  function ISO_8859_1Charset() {
    ISO_8859_1Charset_instance = this;
    UTC8CharsetBase.call(this, 'ISO-8859-1');
  }
  ISO_8859_1Charset.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'ISO_8859_1Charset',
    interfaces: [UTC8CharsetBase]
  };
  var ISO_8859_1Charset_instance = null;
  function ISO_8859_1Charset_getInstance() {
    if (ISO_8859_1Charset_instance === null) {
      new ISO_8859_1Charset();
    }
    return ISO_8859_1Charset_instance;
  }
  function Charsets() {
    Charsets_instance = this;
    this.UTF_8 = UTF8Charset_getInstance();
    this.ISO_8859_1 = ISO_8859_1Charset_getInstance();
  }
  Charsets.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'Charsets',
    interfaces: []
  };
  var Charsets_instance = null;
  function Charsets_getInstance() {
    if (Charsets_instance === null) {
      new Charsets();
    }
    return Charsets_instance;
  }
  function toByteArray($receiver, charset) {
    if (charset === void 0)
      charset = Charsets_getInstance().UTF_8;
    var out = ByteArrayBuilder_init();
    charset.encode_xn9bcf$(out, $receiver);
    return out.toByteArray();
  }
  function toString($receiver, charset) {
    var out = new StringBuilder();
    charset.decode_9w11d2$(out, $receiver);
    return out.toString();
  }
  function Closeable() {
  }
  Closeable.$metadata$ = {
    kind: Kotlin.Kind.INTERFACE,
    simpleName: 'Closeable',
    interfaces: []
  };
  function Closeable$ObjectLiteral(closure$callback) {
    this.closure$callback = closure$callback;
  }
  Closeable$ObjectLiteral.prototype.close = function () {
    this.closure$callback();
  };
  Closeable$ObjectLiteral.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    interfaces: [Closeable]
  };
  function Closeable_0(callback) {
    return new Closeable$ObjectLiteral(callback);
  }
  function use($receiver, callback) {
    try {
      return callback($receiver);
    }
    finally {
      $receiver.close();
    }
  }
  function closeable$lambda(this$closeable) {
    return function () {
      var tmp$;
      tmp$ = this$closeable.iterator();
      while (tmp$.hasNext()) {
        var closeable = tmp$.next();
        closeable.close();
      }
      return Unit;
    };
  }
  function closeable($receiver) {
    return Closeable_0(closeable$lambda($receiver));
  }
  function Console() {
    Console_instance = this;
  }
  Console.prototype.error_s8jyv4$ = function (msg) {
    NativeConsole_getInstance().error_s8jyv4$(msg);
  };
  Console.prototype.log_s8jyv4$ = function (msg) {
    NativeConsole_getInstance().log_s8jyv4$(msg);
  };
  Console.prototype.err_print_61zpoe$ = function (str) {
    print(str);
  };
  Console.prototype.out_print_61zpoe$ = function (str) {
    print(str);
  };
  Console.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'Console',
    interfaces: []
  };
  var Console_instance = null;
  function Console_getInstance() {
    if (Console_instance === null) {
      new Console();
    }
    return Console_instance;
  }
  function Dynamic() {
    Dynamic_instance = this;
  }
  Dynamic.prototype.get_oaftn8$ = function (obj, key) {
    if (obj == null || Kotlin.isType(obj, Map) || Kotlin.isType(obj, List))
      return this.getUntyped_oaftn8$(obj, key);
    else {
      return this.getUntyped_oaftn8$.call(this, Mapper.toUntyped_b1ce0a$(Kotlin.getKClass(Any), obj), key);
    }
  };
  Dynamic.prototype.getUntyped_oaftn8$ = function (obj, key) {
    if (obj == null)
      return null;
    else if (Kotlin.isType(obj, Map)) {
      var tmp$;
      return (Kotlin.isType(tmp$ = obj, Map) ? tmp$ : Kotlin.throwCCE()).get_11rb$(key);
    }
     else if (Kotlin.isType(obj, List))
      return obj.get_za3lpa$(this.toInt_s8jyv4$(key));
    else
      return null;
  };
  Dynamic.prototype.toString_s8jyv4$ = function (obj) {
    var tmp$;
    return (tmp$ = obj != null ? obj.toString() : null) != null ? tmp$ : 'null';
  };
  var emptyList = Kotlin.kotlin.collections.emptyList_287e2$;
  Dynamic.prototype.toList_s8jyv4$ = function (obj) {
    if (obj == null) {
      return emptyList();
    }
     else if (Kotlin.isType(obj, List))
      return obj;
    else if (Kotlin.isType(obj, Iterable))
      return toList(obj);
    else
      return listOf(obj);
  };
  Dynamic.prototype.toMap_s8jyv4$ = function (obj) {
    var tmp$;
    if (obj == null)
      return lmapOf([]);
    else if (Kotlin.isType(obj, Map))
      return Kotlin.isType(tmp$ = obj, Map) ? tmp$ : Kotlin.throwCCE();
    else
      return lmapOf([]);
  };
  Dynamic.prototype.toNumber_s8jyv4$ = function (obj) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    if (obj == null)
      return 0;
    else if (typeof obj === 'boolean')
      return obj ? 1 : 0;
    else if (Kotlin.isNumber(obj))
      return obj;
    else if (typeof obj === 'string')
      return (tmp$_2 = (tmp$_1 = (tmp$_0 = (tmp$ = toLongOrNull(obj)) == null || Kotlin.isNumber(tmp$) ? tmp$ : null) != null ? tmp$_0 : toIntOrNull_0(obj)) != null ? tmp$_1 : toDoubleOrNull(obj)) != null ? tmp$_2 : 0;
    else
      return 0;
  };
  Dynamic.prototype.toBool_s8jyv4$ = function (obj) {
    return this.toInt_s8jyv4$(obj) !== 0;
  };
  Dynamic.prototype.toByte_s8jyv4$ = function (obj) {
    return Kotlin.numberToByte(this.toNumber_s8jyv4$(obj));
  };
  Dynamic.prototype.toChar_s8jyv4$ = function (obj) {
    if (typeof obj === 'string' && obj.length === 1)
      return first(obj);
    else
      return Kotlin.numberToChar(this.toNumber_s8jyv4$(obj));
  };
  Dynamic.prototype.toShort_s8jyv4$ = function (obj) {
    return Kotlin.numberToShort(this.toNumber_s8jyv4$(obj));
  };
  Dynamic.prototype.toInt_s8jyv4$ = function (obj) {
    return Kotlin.numberToInt(this.toNumber_s8jyv4$(obj));
  };
  Dynamic.prototype.toLong_s8jyv4$ = function (obj) {
    return Kotlin.numberToLong(this.toNumber_s8jyv4$(obj));
  };
  Dynamic.prototype.toFloat_s8jyv4$ = function (obj) {
    return Kotlin.numberToDouble(this.toNumber_s8jyv4$(obj));
  };
  Dynamic.prototype.toDouble_s8jyv4$ = function (obj) {
    return Kotlin.numberToDouble(this.toNumber_s8jyv4$(obj));
  };
  Dynamic.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'Dynamic',
    interfaces: []
  };
  var Dynamic_instance = null;
  function Dynamic_getInstance() {
    if (Dynamic_instance === null) {
      new Dynamic();
    }
    return Dynamic_instance;
  }
  function DynamicContext() {
  }
  DynamicContext.prototype.toBool_mzud1t$ = function ($receiver) {
    return Dynamic_getInstance().toBool_s8jyv4$($receiver);
  };
  DynamicContext.prototype.toByte_mzud1t$ = function ($receiver) {
    return Dynamic_getInstance().toByte_s8jyv4$($receiver);
  };
  DynamicContext.prototype.toChar_mzud1t$ = function ($receiver) {
    return Dynamic_getInstance().toChar_s8jyv4$($receiver);
  };
  DynamicContext.prototype.toShort_mzud1t$ = function ($receiver) {
    return Dynamic_getInstance().toShort_s8jyv4$($receiver);
  };
  DynamicContext.prototype.toInt_mzud1t$ = function ($receiver) {
    return Dynamic_getInstance().toInt_s8jyv4$($receiver);
  };
  DynamicContext.prototype.toLong_mzud1t$ = function ($receiver) {
    return Dynamic_getInstance().toLong_s8jyv4$($receiver);
  };
  DynamicContext.prototype.toFloat_mzud1t$ = function ($receiver) {
    return Dynamic_getInstance().toFloat_s8jyv4$($receiver);
  };
  DynamicContext.prototype.toDouble_mzud1t$ = function ($receiver) {
    return Dynamic_getInstance().toDouble_s8jyv4$($receiver);
  };
  DynamicContext.prototype.toNumber_mzud1t$ = function ($receiver) {
    return Dynamic_getInstance().toNumber_s8jyv4$($receiver);
  };
  DynamicContext.prototype.toDynamicList_mzud1t$ = function ($receiver) {
    return Dynamic_getInstance().toList_s8jyv4$($receiver);
  };
  DynamicContext.prototype.toDynamicMap_mzud1t$ = function ($receiver) {
    return Dynamic_getInstance().toMap_s8jyv4$($receiver);
  };
  DynamicContext.prototype.get_uozw8h$ = function ($receiver, key) {
    return Dynamic_getInstance().get_oaftn8$($receiver, key);
  };
  DynamicContext.$metadata$ = {
    kind: Kotlin.Kind.INTERFACE,
    simpleName: 'DynamicContext',
    interfaces: []
  };
  function DynamicContextInstance() {
    DynamicContextInstance_instance = this;
  }
  DynamicContextInstance.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'DynamicContextInstance',
    interfaces: [DynamicContext]
  };
  var DynamicContextInstance_instance = null;
  function DynamicContextInstance_getInstance() {
    if (DynamicContextInstance_instance === null) {
      new DynamicContextInstance();
    }
    return DynamicContextInstance_instance;
  }
  function Environment() {
    Environment_instance = this;
  }
  Environment.prototype.get_61zpoe$ = function (key) {
    throw new NotImplementedError_init();
  };
  Environment.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'Environment',
    interfaces: []
  };
  var Environment_instance = null;
  function Environment_getInstance() {
    if (Environment_instance === null) {
      new Environment();
    }
    return Environment_instance;
  }
  function printStackTrace($receiver) {
    var tmp$;
    Console_getInstance().error_s8jyv4$((tmp$ = $receiver.message) != null ? tmp$ : 'Error');
  }
  function Float16(bits) {
    Float16$Companion_getInstance();
    this.bits = bits;
    this.value_upsd2e$_0 = lazy(Float16$value$lambda(this));
  }
  Object.defineProperty(Float16.prototype, 'value', {
    get: function () {
      var $receiver = this.value_upsd2e$_0;
      new Kotlin.PropertyMetadata('value');
      return $receiver.value;
    }
  });
  function Float16$Companion() {
    Float16$Companion_instance = this;
    this.FLOAT16_EXPONENT_BASE = 15;
  }
  Float16$Companion.prototype.intBitsToDouble_za3lpa$ = function (word) {
    var sign = (word & 32768) !== 0 ? -1 : 1;
    var exponent = word >>> 10 & 31;
    var significand = word & 1023;
    if (exponent === 0) {
      if (significand === 0) {
        return 0.0;
      }
       else {
        var other = 1 - this.FLOAT16_EXPONENT_BASE | 0;
        return sign * Math_0.pow(2.0, other) * (significand / 1024 | 0);
      }
    }
    if (exponent === 31) {
      if (significand === 0) {
        return sign < 0 ? DoubleCompanionObject.NEGATIVE_INFINITY : DoubleCompanionObject.POSITIVE_INFINITY;
      }
       else {
        return DoubleCompanionObject.NaN;
      }
    }
    var other_0 = exponent - this.FLOAT16_EXPONENT_BASE | 0;
    return sign * Math_0.pow(2.0, other_0) * (1 + (significand / 1024 | 0) | 0);
  };
  Float16$Companion.prototype.doubleToIntBits_14dthe$ = function (value) {
    var tmp$;
    var dword = reinterpretAsInt(value);
    if ((dword & 2147483647) === 0) {
      tmp$ = dword >>> 16;
    }
     else {
      var sign = dword & (new Kotlin.Long(-2147483648, 0)).toInt();
      var exponent = dword & 2146435072;
      var significand = dword & 1048575;
      if (exponent === 0) {
        tmp$ = sign >>> 16;
      }
       else if (exponent === 2146435072) {
        tmp$ = significand === 0 ? sign >>> 16 | 31744 : 65024;
      }
       else {
        var signedExponent = (exponent >>> 20) - 1023 + 15 | 0;
        var halfSignificand = 0;
        if (signedExponent >= 31) {
          tmp$ = significand >>> 16 | 31744;
        }
         else if (signedExponent <= 0) {
          if ((10 - signedExponent | 0) > 21) {
            halfSignificand = 0;
          }
           else {
            significand = significand | 1048576;
            halfSignificand = significand >>> 11 - signedExponent;
            if ((significand >>> 10 - signedExponent & 1) !== 0)
              halfSignificand = halfSignificand + 1 | 0;
          }
          tmp$ = sign >>> 16 | halfSignificand;
        }
         else {
          halfSignificand = significand >>> 10;
          var out = sign | signedExponent << 10 | halfSignificand;
          tmp$ = (significand & 512) !== 0 ? out + 1 | 0 : out;
        }
      }
    }
    return tmp$;
  };
  Float16$Companion.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Float16$Companion_instance = null;
  function Float16$Companion_getInstance() {
    if (Float16$Companion_instance === null) {
      new Float16$Companion();
    }
    return Float16$Companion_instance;
  }
  function Float16$value$lambda(this$Float16) {
    return function () {
      return Float16$Companion_getInstance().intBitsToDouble_za3lpa$(this$Float16.bits);
    };
  }
  Float16.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'Float16',
    interfaces: []
  };
  function Float16_init(value, $this) {
    $this = $this || Object.create(Float16.prototype);
    Float16.call($this, Float16$Companion_getInstance().doubleToIntBits_14dthe$(value));
    return $this;
  }
  function Language(lang) {
    this.lang = lang;
  }
  Language.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'Language',
    interfaces: [Annotation]
  };
  function Semaphore(initial) {
    this.initial = initial;
  }
  Semaphore.prototype.acquire = function () {
  };
  Semaphore.prototype.release = function () {
  };
  Semaphore.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'Semaphore',
    interfaces: []
  };
  var formatRegex;
  function format($receiver, params) {
    var params_0 = Queue_init(params.slice());
    var $this = formatRegex;
    var replace_20wsma$result;
    replace_20wsma$break: do {
      var match = $this.find_905azu$($receiver);
      if (match == null) {
        replace_20wsma$result = $receiver.toString();
        break replace_20wsma$break;
      }
      var lastStart = 0;
      var length = $receiver.length;
      var sb = StringBuilder_init(length);
      do {
        var foundMatch = match != null ? match : Kotlin.throwNPE();
        sb.append_ezbsdh$($receiver, lastStart, foundMatch.range.start);
        var tmp$ = sb.append_gw00v9$;
        var tmp$_0, tmp$_1, tmp$_2, tmp$_3;
        var param = params_0.dequeue();
        var size = foundMatch.groupValues.get_za3lpa$(1);
        var type = foundMatch.groupValues.get_za3lpa$(2);
        if (Kotlin.equals(type, 'd'))
          tmp$_3 = Kotlin.numberToLong(Kotlin.isNumber(tmp$_0 = param) ? tmp$_0 : Kotlin.throwCCE()).toString();
        else if (Kotlin.equals(type, 'X')) {
          tmp$_3 = toString_0(Kotlin.numberToLong(Kotlin.isNumber(tmp$_1 = param) ? tmp$_1 : Kotlin.throwCCE()), 16).toUpperCase();
        }
         else if (Kotlin.equals(type, 'x')) {
          tmp$_3 = toString_0(Kotlin.numberToLong(Kotlin.isNumber(tmp$_2 = param) ? tmp$_2 : Kotlin.throwCCE()), 16).toLowerCase();
        }
         else
          tmp$_3 = param.toString();
        var str = tmp$_3;
        var prefix = startsWith(size, 48) ? 48 : 32;
        var asize = toInt(size);
        var str2 = str;
        while (str2.length < asize) {
          var other = str2;
          str2 = String.fromCharCode(prefix) + other;
        }
        tmp$.call(sb, str2);
        lastStart = foundMatch.range.endInclusive + 1 | 0;
        match = foundMatch.next();
      }
       while (lastStart < length && match != null);
      if (lastStart < length) {
        sb.append_ezbsdh$($receiver, lastStart, length);
      }
      replace_20wsma$result = sb.toString();
    }
     while (false);
    return replace_20wsma$result;
  }
  function splitKeep($receiver, regex) {
    var tmp$;
    var str = $receiver;
    var out = ArrayList_init();
    var lastPos = 0;
    tmp$ = regex.findAll_905azu$($receiver).iterator();
    while (tmp$.hasNext()) {
      var part = tmp$.next();
      var prange = part.range;
      if (lastPos !== prange.start) {
        var startIndex = lastPos;
        var endIndex = prange.start;
        var element = str.substring(startIndex, endIndex);
        out.add_11rb$(element);
      }
      var element_0 = substring(str, prange);
      out.add_11rb$(element_0);
      lastPos = prange.endInclusive + 1 | 0;
    }
    if (lastPos !== str.length) {
      var startIndex_0 = lastPos;
      var element_1 = str.substring(startIndex_0);
      out.add_11rb$(element_1);
    }
    return out;
  }
  function String_fromIntArray(arrays, offset, size) {
    if (offset === void 0)
      offset = 0;
    if (size === void 0)
      size = arrays.length - offset | 0;
    var tmp$;
    var sb = new StringBuilder();
    tmp$ = offset + size | 0;
    for (var n = offset; n < tmp$; n++) {
      sb.append_s8itvh$(Kotlin.toChar(arrays[n]));
    }
    return sb.toString();
  }
  function String_fromCharArray(arrays, offset, size) {
    if (offset === void 0)
      offset = 0;
    if (size === void 0)
      size = arrays.length - offset | 0;
    var tmp$;
    var sb = new StringBuilder();
    tmp$ = offset + size | 0;
    for (var n = offset; n < tmp$; n++) {
      sb.append_s8itvh$(arrays[n]);
    }
    return sb.toString();
  }
  function System() {
    System_instance = this;
  }
  System.prototype.arraycopy_nlwz52$ = function (src, srcPos, dst, dstPos, count) {
    Arrays_getInstance().copyRangeTo_nlwz52$(src, srcPos, dst, dstPos, count);
  };
  System.prototype.arraycopy_ai5qaq$ = function (src, srcPos, dst, dstPos, count) {
    Arrays_getInstance().copyRangeTo_ai5qaq$(src, srcPos, dst, dstPos, count);
  };
  System.prototype.arraycopy_lvhpry$ = function (src, srcPos, dst, dstPos, count) {
    Arrays_getInstance().copyRangeTo_lvhpry$(src, srcPos, dst, dstPos, count);
  };
  System.prototype.arraycopy_m70dtq$ = function (src, srcPos, dst, dstPos, count) {
    Arrays_getInstance().copyRangeTo_m70dtq$(src, srcPos, dst, dstPos, count);
  };
  System.prototype.arraycopy_5ukzfm$ = function (src, srcPos, dst, dstPos, count) {
    Arrays_getInstance().copyRangeTo_5ukzfm$(src, srcPos, dst, dstPos, count);
  };
  System.prototype.arraycopy_dgpv4k$ = function (src, srcPos, dst, dstPos, count) {
    Arrays_getInstance().copyRangeTo_dgpv4k$(src, srcPos, dst, dstPos, count);
  };
  System.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'System',
    interfaces: []
  };
  var System_instance = null;
  function System_getInstance() {
    if (System_instance === null) {
      new System();
    }
    return System_instance;
  }
  var assert = defineInlineFunction('korio-js.com.soywiz.korio.lang.assert_6taknv$', wrapFunction(function () {
    var AssertionError_init = Kotlin.kotlin.AssertionError;
    return function (cond) {
      if (!cond)
        throw new AssertionError_init();
    };
  }));
  function ThreadLocal() {
    this.value_69ozq2$_0 = this.initialValue();
  }
  ThreadLocal.prototype.get = function () {
    return this.value_69ozq2$_0;
  };
  ThreadLocal.prototype.set_11rb$ = function (value) {
    this.value_69ozq2$_0 = value;
  };
  ThreadLocal.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'ThreadLocal',
    interfaces: []
  };
  function URL(dummy, protocol, auth, host, path, query) {
    URL$Companion_getInstance();
    this.dummy = dummy;
    this.protocol = protocol;
    this.auth = auth;
    this.host = host;
    this.path = path;
    this.query = query;
    this.str_9d1yew$_0 = lazy(URL$str$lambda(this));
  }
  var get_lastIndex_0 = Kotlin.kotlin.collections.get_lastIndex_55thoc$;
  Object.defineProperty(URL.prototype, 'user', {
    get: function () {
      var $receiver = split(this.auth, Kotlin.charArrayOf(58));
      return 0 >= 0 && 0 <= get_lastIndex_0($receiver) ? $receiver.get_za3lpa$(0) : '';
    }
  });
  Object.defineProperty(URL.prototype, 'password', {
    get: function () {
      var $receiver = split(this.auth, Kotlin.charArrayOf(58));
      return 1 >= 0 && 1 <= get_lastIndex_0($receiver) ? $receiver.get_za3lpa$(1) : '';
    }
  });
  Object.defineProperty(URL.prototype, 'str_0', {
    get: function () {
      var $receiver = this.str_9d1yew$_0;
      new Kotlin.PropertyMetadata('str');
      return $receiver.value;
    }
  });
  URL.prototype.toString = function () {
    return this.str_0;
  };
  function URL$Companion() {
    URL$Companion_instance = this;
  }
  URL$Companion.prototype.invoke_x0a6t6$ = function (protocol, auth, host, path, query) {
    return new URL(false, protocol, auth, host, path, query);
  };
  URL$Companion.prototype.invoke_61zpoe$ = function (url) {
    var partsA = split_0(url, ['://'], void 0, 2);
    var partsB = split_0(1 >= 0 && 1 <= get_lastIndex_0(partsA) ? partsA.get_za3lpa$(1) : '', ['/'], void 0, 2);
    var partsC = split_0(1 >= 0 && 1 <= get_lastIndex_0(partsB) ? partsB.get_za3lpa$(1) : '', ['?'], void 0, 2);
    var fullHost = 0 >= 0 && 0 <= get_lastIndex_0(partsB) ? partsB.get_za3lpa$(0) : '';
    var fullPath = 0 >= 0 && 0 <= get_lastIndex_0(partsC) ? partsC.get_za3lpa$(0) : '';
    var queryString = 1 >= 0 && 1 <= get_lastIndex_0(partsC) ? partsC.get_za3lpa$(1) : '';
    var fullHostParts = split_0(fullHost, ['@'], void 0, 2);
    var userPassStr = fullHostParts.size === 2 ? fullHostParts.get_za3lpa$(0) : '';
    return URL$Companion_getInstance().invoke_x0a6t6$(0 >= 0 && 0 <= get_lastIndex_0(partsA) ? partsA.get_za3lpa$(0) : '', userPassStr, last(fullHostParts), '/' + trimStart(fullPath, Kotlin.charArrayOf(47)), queryString);
  };
  URL$Companion.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var URL$Companion_instance = null;
  function URL$Companion_getInstance() {
    if (URL$Companion_instance === null) {
      new URL$Companion();
    }
    return URL$Companion_instance;
  }
  function URL$str$lambda(this$URL) {
    return function () {
      var out = new StringBuilder();
      out.append_gw00v9$(this$URL.protocol + '://');
      if (this$URL.auth.length > 0)
        out.append_gw00v9$(this$URL.auth + '@');
      out.append_gw00v9$(this$URL.host);
      out.append_s8itvh$(47);
      out.append_gw00v9$(trimStart(this$URL.path, Kotlin.charArrayOf(47)));
      if (this$URL.query.length > 0)
        out.append_gw00v9$('?' + this$URL.query);
      return out.toString();
    };
  }
  URL.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'URL',
    interfaces: []
  };
  URL.prototype.component1 = function () {
    return this.dummy;
  };
  URL.prototype.component2 = function () {
    return this.protocol;
  };
  URL.prototype.component3 = function () {
    return this.auth;
  };
  URL.prototype.component4 = function () {
    return this.host;
  };
  URL.prototype.component5 = function () {
    return this.path;
  };
  URL.prototype.component6 = function () {
    return this.query;
  };
  URL.prototype.copy_u3rk8l$ = function (dummy, protocol, auth, host, path, query) {
    return new URL(dummy === void 0 ? this.dummy : dummy, protocol === void 0 ? this.protocol : protocol, auth === void 0 ? this.auth : auth, host === void 0 ? this.host : host, path === void 0 ? this.path : path, query === void 0 ? this.query : query);
  };
  URL.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.dummy) | 0;
    result = result * 31 + Kotlin.hashCode(this.protocol) | 0;
    result = result * 31 + Kotlin.hashCode(this.auth) | 0;
    result = result * 31 + Kotlin.hashCode(this.host) | 0;
    result = result * 31 + Kotlin.hashCode(this.path) | 0;
    result = result * 31 + Kotlin.hashCode(this.query) | 0;
    return result;
  };
  URL.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.dummy, other.dummy) && Kotlin.equals(this.protocol, other.protocol) && Kotlin.equals(this.auth, other.auth) && Kotlin.equals(this.host, other.host) && Kotlin.equals(this.path, other.path) && Kotlin.equals(this.query, other.query)))));
  };
  function URIUtils() {
    URIUtils_instance = this;
  }
  URIUtils.prototype.isAbsolute_61zpoe$ = function (base) {
    return contains(base, '://');
  };
  URIUtils.prototype.resolve_puj7f4$ = function (base, access) {
    if (this.isAbsolute_61zpoe$(access)) {
      return access;
    }
     else {
      var url = URL$Companion_getInstance().invoke_61zpoe$(base + '/' + access);
      return url.copy_u3rk8l$(void 0, void 0, void 0, void 0, VfsUtil_getInstance().normalize_61zpoe$(url.path)).toString();
    }
  };
  URIUtils.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'URIUtils',
    interfaces: []
  };
  var URIUtils_instance = null;
  function URIUtils_getInstance() {
    if (URIUtils_instance === null) {
      new URIUtils();
    }
    return URIUtils_instance;
  }
  function Undefined() {
    Undefined_instance = this;
  }
  Undefined.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'Undefined',
    interfaces: []
  };
  var Undefined_instance = null;
  function Undefined_getInstance() {
    if (Undefined_instance === null) {
      new Undefined();
    }
    return Undefined_instance;
  }
  function AtomicLong(value) {
    if (value === void 0)
      value = Kotlin.Long.ZERO;
    this.value = value;
  }
  AtomicLong.prototype.get = function () {
    return this.value;
  };
  AtomicLong.prototype.incrementAndGet = function () {
    return this.value = this.value.inc(), this.value;
  };
  AtomicLong.prototype.decrementAndGet = function () {
    return this.value = this.value.dec(), this.value;
  };
  AtomicLong.prototype.addAndGet_s8cxhz$ = function (i) {
    this.value = this.value.add(i);
    return this.value;
  };
  AtomicLong.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'AtomicLong',
    interfaces: []
  };
  function AtomicInteger(value) {
    if (value === void 0)
      value = 0;
    this.value = value;
  }
  AtomicInteger.prototype.get = function () {
    return this.value;
  };
  AtomicInteger.prototype.incrementAndGet = function () {
    return this.value = this.value + 1 | 0, this.value;
  };
  AtomicInteger.prototype.decrementAndGet = function () {
    return this.value = this.value - 1 | 0, this.value;
  };
  AtomicInteger.prototype.addAndGet_za3lpa$ = function (i) {
    this.value = this.value + i | 0;
    return this.value;
  };
  AtomicInteger.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'AtomicInteger',
    interfaces: []
  };
  function threadLocal(gen) {
    this.gen = gen;
    this.local = new threadLocal$local$ObjectLiteral(this);
  }
  threadLocal.prototype.getValue_n5byny$ = defineInlineFunction('korio-js.com.soywiz.korio.lang.tl.threadLocal.getValue_n5byny$', function (thisRef, property) {
    return this.local.get();
  });
  threadLocal.prototype.setValue_sq4zib$ = defineInlineFunction('korio-js.com.soywiz.korio.lang.tl.threadLocal.setValue_sq4zib$', function (thisRef, property, value) {
    this.local.set_11rb$(value);
  });
  function threadLocal$local$ObjectLiteral(this$threadLocal) {
    this.this$threadLocal = this$threadLocal;
    ThreadLocal.call(this);
  }
  threadLocal$local$ObjectLiteral.prototype.initialValue = function () {
    return this.this$threadLocal.gen();
  };
  threadLocal$local$ObjectLiteral.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    interfaces: [ThreadLocal]
  };
  threadLocal.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'threadLocal',
    interfaces: []
  };
  function reinterpretAsInt($receiver) {
    return toBits($receiver);
  }
  function reinterpretAsFloat($receiver) {
    return Kotlin.floatFromBits($receiver);
  }
  function reinterpretAsLong($receiver) {
    return toBits_0($receiver);
  }
  function reinterpretAsDouble($receiver) {
    return Kotlin.doubleFromBits($receiver);
  }
  function reverseBytes($receiver) {
    var v0 = $receiver >>> 0 & 255;
    var v1 = $receiver >>> 8 & 255;
    var v2 = $receiver >>> 16 & 255;
    var v3 = $receiver >>> 24 & 255;
    return v0 << 24 | v1 << 16 | v2 << 8 | v3 << 0;
  }
  function reverseBytes_0($receiver) {
    var low = $receiver >>> 0 & 255;
    var high = $receiver >>> 8 & 255;
    return Kotlin.toShort(high & 255 | low << 8);
  }
  function reverseBytes_1($receiver) {
    var low = ($receiver | 0) >>> 0 & 255;
    var high = ($receiver | 0) >>> 8 & 255;
    return Kotlin.toChar(high & 255 | low << 8);
  }
  function reverseBytes_2($receiver) {
    var v0 = Kotlin.Long.fromInt(reverseBytes($receiver.shiftRightUnsigned(0).toInt())).and(new Kotlin.Long(-1, 0));
    var v1 = Kotlin.Long.fromInt(reverseBytes($receiver.shiftRightUnsigned(32).toInt())).and(new Kotlin.Long(-1, 0));
    return v0.shiftLeft(32).or(v1.shiftLeft(0));
  }
  function rint(v) {
    if (v >= Math_0.floor(v) + 0.5) {
      return Math_0.ceil(v);
    }
     else {
      return round(v);
    }
  }
  function toRadians(v) {
    return v / 180.0 * 3.141592653589793;
  }
  function toDegrees(v) {
    return v * 180.0 / 3.141592653589793;
  }
  function signum(v) {
    return Math_0.sign(v);
  }
  function AsyncSocketFactory() {
  }
  AsyncSocketFactory.prototype.createServer_jl0c9m$ = function (port, host, backlog, continuation, callback$default) {
    if (host === void 0)
      host = '127.0.0.1';
    if (backlog === void 0)
      backlog = 128;
    return callback$default ? callback$default(port, host, backlog, continuation) : this.createServer_jl0c9m$$default(port, host, backlog, continuation);
  };
  AsyncSocketFactory.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'AsyncSocketFactory',
    interfaces: []
  };
  function AsyncClient() {
    AsyncClient$Companion_getInstance();
  }
  function AsyncClient$Stats() {
    AsyncClient$Stats_instance = this;
    this.writeCountStart = new AtomicLong();
    this.writeCountEnd = new AtomicLong();
    this.writeCountError = new AtomicLong();
  }
  AsyncClient$Stats.prototype.toString = function () {
    return 'AsyncClient.Stats(' + this.writeCountStart + '/' + this.writeCountEnd + '/' + this.writeCountError + ')';
  };
  AsyncClient$Stats.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'Stats',
    interfaces: []
  };
  var AsyncClient$Stats_instance = null;
  function AsyncClient$Stats_getInstance() {
    if (AsyncClient$Stats_instance === null) {
      new AsyncClient$Stats();
    }
    return AsyncClient$Stats_instance;
  }
  function AsyncClient$Companion() {
    AsyncClient$Companion_instance = this;
  }
  AsyncClient$Companion.prototype.invoke_bm4lxs$ = function (host, port, continuation) {
    return this.createAndConnect_bm4lxs$(host, port, continuation);
  };
  AsyncClient$Companion.prototype.create = function (continuation) {
    return get_asyncSocketFactory().createClient(continuation);
  };
  AsyncClient$Companion.prototype.createAndConnect_bm4lxs$ = function (host_0, port_0, continuation_0, suspended) {
    var instance = new Coroutine$createAndConnect_bm4lxs$(this, host_0, port_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$createAndConnect_bm4lxs$($this, host_0, port_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$socket = void 0;
    this.local$host = host_0;
    this.local$port = port_0;
  }
  Coroutine$createAndConnect_bm4lxs$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$createAndConnect_bm4lxs$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$createAndConnect_bm4lxs$.prototype.constructor = Coroutine$createAndConnect_bm4lxs$;
  Coroutine$createAndConnect_bm4lxs$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = get_asyncSocketFactory().createClient(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$socket = this.result_0;
            this.state_0 = 3;
            this.result_0 = this.local$socket.connect_bm4lxs$(this.local$host, this.local$port, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            return this.local$socket;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  AsyncClient$Companion.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var AsyncClient$Companion_instance = null;
  function AsyncClient$Companion_getInstance() {
    if (AsyncClient$Companion_instance === null) {
      new AsyncClient$Companion();
    }
    return AsyncClient$Companion_instance;
  }
  AsyncClient.$metadata$ = {
    kind: Kotlin.Kind.INTERFACE,
    simpleName: 'AsyncClient',
    interfaces: [AsyncOutputStream, AsyncInputStream, AsyncCloseable]
  };
  function AsyncServer() {
    AsyncServer$Companion_getInstance();
  }
  function AsyncServer$Companion() {
    AsyncServer$Companion_instance = this;
  }
  AsyncServer$Companion.prototype.invoke_jl0c9m$ = function (port, host, backlog, continuation) {
    if (host === void 0)
      host = '127.0.0.1';
    if (backlog === void 0)
      backlog = -1;
    return get_asyncSocketFactory().createServer_jl0c9m$(port, host, backlog, continuation);
  };
  AsyncServer$Companion.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var AsyncServer$Companion_instance = null;
  function AsyncServer$Companion_getInstance() {
    if (AsyncServer$Companion_instance === null) {
      new AsyncServer$Companion();
    }
    return AsyncServer$Companion_instance;
  }
  AsyncServer.$metadata$ = {
    kind: Kotlin.Kind.INTERFACE,
    simpleName: 'AsyncServer',
    interfaces: []
  };
  function HostWithPort(host, port) {
    HostWithPort$Companion_getInstance();
    this.host = host;
    this.port = port;
  }
  function HostWithPort$Companion() {
    HostWithPort$Companion_instance = this;
  }
  HostWithPort$Companion.prototype.parse_bm4lxs$ = function (str, defaultPort) {
    var parts = split(str, Kotlin.charArrayOf(58), void 0, 2);
    return new HostWithPort(parts.get_za3lpa$(0), toInt(1 >= 0 && 1 <= get_lastIndex_0(parts) ? parts.get_za3lpa$(1) : defaultPort.toString()));
  };
  HostWithPort$Companion.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var HostWithPort$Companion_instance = null;
  function HostWithPort$Companion_getInstance() {
    if (HostWithPort$Companion_instance === null) {
      new HostWithPort$Companion();
    }
    return HostWithPort$Companion_instance;
  }
  HostWithPort.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'HostWithPort',
    interfaces: []
  };
  HostWithPort.prototype.component1 = function () {
    return this.host;
  };
  HostWithPort.prototype.component2 = function () {
    return this.port;
  };
  HostWithPort.prototype.copy_bm4lxs$ = function (host, port) {
    return new HostWithPort(host === void 0 ? this.host : host, port === void 0 ? this.port : port);
  };
  HostWithPort.prototype.toString = function () {
    return 'HostWithPort(host=' + Kotlin.toString(this.host) + (', port=' + Kotlin.toString(this.port)) + ')';
  };
  HostWithPort.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.host) | 0;
    result = result * 31 + Kotlin.hashCode(this.port) | 0;
    return result;
  };
  HostWithPort.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.host, other.host) && Kotlin.equals(this.port, other.port)))));
  };
  function Http() {
    Http$Companion_getInstance();
  }
  function Http$Methods(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function Http$Methods_initFields() {
    Http$Methods_initFields = function () {
    };
    Http$Methods$ALL_instance = new Http$Methods('ALL', 0);
    Http$Methods$OPTIONS_instance = new Http$Methods('OPTIONS', 1);
    Http$Methods$GET_instance = new Http$Methods('GET', 2);
    Http$Methods$HEAD_instance = new Http$Methods('HEAD', 3);
    Http$Methods$POST_instance = new Http$Methods('POST', 4);
    Http$Methods$PUT_instance = new Http$Methods('PUT', 5);
    Http$Methods$DELETE_instance = new Http$Methods('DELETE', 6);
    Http$Methods$TRACE_instance = new Http$Methods('TRACE', 7);
    Http$Methods$CONNECT_instance = new Http$Methods('CONNECT', 8);
    Http$Methods$PATCH_instance = new Http$Methods('PATCH', 9);
  }
  var Http$Methods$ALL_instance;
  function Http$Methods$ALL_getInstance() {
    Http$Methods_initFields();
    return Http$Methods$ALL_instance;
  }
  var Http$Methods$OPTIONS_instance;
  function Http$Methods$OPTIONS_getInstance() {
    Http$Methods_initFields();
    return Http$Methods$OPTIONS_instance;
  }
  var Http$Methods$GET_instance;
  function Http$Methods$GET_getInstance() {
    Http$Methods_initFields();
    return Http$Methods$GET_instance;
  }
  var Http$Methods$HEAD_instance;
  function Http$Methods$HEAD_getInstance() {
    Http$Methods_initFields();
    return Http$Methods$HEAD_instance;
  }
  var Http$Methods$POST_instance;
  function Http$Methods$POST_getInstance() {
    Http$Methods_initFields();
    return Http$Methods$POST_instance;
  }
  var Http$Methods$PUT_instance;
  function Http$Methods$PUT_getInstance() {
    Http$Methods_initFields();
    return Http$Methods$PUT_instance;
  }
  var Http$Methods$DELETE_instance;
  function Http$Methods$DELETE_getInstance() {
    Http$Methods_initFields();
    return Http$Methods$DELETE_instance;
  }
  var Http$Methods$TRACE_instance;
  function Http$Methods$TRACE_getInstance() {
    Http$Methods_initFields();
    return Http$Methods$TRACE_instance;
  }
  var Http$Methods$CONNECT_instance;
  function Http$Methods$CONNECT_getInstance() {
    Http$Methods_initFields();
    return Http$Methods$CONNECT_instance;
  }
  var Http$Methods$PATCH_instance;
  function Http$Methods$PATCH_getInstance() {
    Http$Methods_initFields();
    return Http$Methods$PATCH_instance;
  }
  Http$Methods.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'Methods',
    interfaces: [Http$Method, Enum]
  };
  function Http$Methods$values() {
    return [Http$Methods$ALL_getInstance(), Http$Methods$OPTIONS_getInstance(), Http$Methods$GET_getInstance(), Http$Methods$HEAD_getInstance(), Http$Methods$POST_getInstance(), Http$Methods$PUT_getInstance(), Http$Methods$DELETE_getInstance(), Http$Methods$TRACE_getInstance(), Http$Methods$CONNECT_getInstance(), Http$Methods$PATCH_getInstance()];
  }
  Http$Methods.values = Http$Methods$values;
  function Http$Methods$valueOf(name) {
    switch (name) {
      case 'ALL':
        return Http$Methods$ALL_getInstance();
      case 'OPTIONS':
        return Http$Methods$OPTIONS_getInstance();
      case 'GET':
        return Http$Methods$GET_getInstance();
      case 'HEAD':
        return Http$Methods$HEAD_getInstance();
      case 'POST':
        return Http$Methods$POST_getInstance();
      case 'PUT':
        return Http$Methods$PUT_getInstance();
      case 'DELETE':
        return Http$Methods$DELETE_getInstance();
      case 'TRACE':
        return Http$Methods$TRACE_getInstance();
      case 'CONNECT':
        return Http$Methods$CONNECT_getInstance();
      case 'PATCH':
        return Http$Methods$PATCH_getInstance();
      default:Kotlin.throwISE('No enum constant com.soywiz.korio.net.http.Http.Methods.' + name);
    }
  }
  Http$Methods.valueOf_61zpoe$ = Http$Methods$valueOf;
  function Http$Method() {
    Http$Method$Companion_getInstance();
  }
  function Http$Method$Companion() {
    Http$Method$Companion_instance = this;
    this.OPTIONS = Http$Methods$OPTIONS_getInstance();
    this.GET = Http$Methods$GET_getInstance();
    this.HEAD = Http$Methods$HEAD_getInstance();
    this.POST = Http$Methods$POST_getInstance();
    this.PUT = Http$Methods$PUT_getInstance();
    this.DELETE = Http$Methods$DELETE_getInstance();
    this.TRACE = Http$Methods$TRACE_getInstance();
    this.CONNECT = Http$Methods$CONNECT_getInstance();
    this.PATCH = Http$Methods$PATCH_getInstance();
    this._values = listOf_0([this.OPTIONS, this.GET, this.HEAD, this.POST, this.PUT, this.DELETE, this.TRACE, this.CONNECT, this.PATCH]);
    var $receiver = this._values;
    var destination = ArrayList_init(collectionSizeOrDefault($receiver, 10));
    var tmp$;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      destination.add_11rb$(to(item.name, item));
    }
    this.valuesMap = toMap(destination);
  }
  Http$Method$Companion.prototype.values = function () {
    return this._values;
  };
  var trim_0 = Kotlin.kotlin.text.trim_gw00vp$;
  Http$Method$Companion.prototype.get_61zpoe$ = function (name) {
    var tmp$ = this.valuesMap;
    var $receiver = name.toUpperCase();
    var tmp$_0;
    var key = trim_0(Kotlin.isCharSequence(tmp$_0 = $receiver) ? tmp$_0 : Kotlin.throwCCE()).toString();
    var tmp$_1;
    return (tmp$_1 = tmp$.get_11rb$(key)) != null ? tmp$_1 : new Http$CustomMethod(name);
  };
  Http$Method$Companion.prototype.invoke_61zpoe$ = function (name) {
    return this.get_61zpoe$(name);
  };
  Http$Method$Companion.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Http$Method$Companion_instance = null;
  function Http$Method$Companion_getInstance() {
    if (Http$Method$Companion_instance === null) {
      new Http$Method$Companion();
    }
    return Http$Method$Companion_instance;
  }
  Http$Method.$metadata$ = {
    kind: Kotlin.Kind.INTERFACE,
    simpleName: 'Method',
    interfaces: []
  };
  function Http$CustomMethod(_name) {
    this._name = _name;
    var $receiver = this._name;
    var tmp$;
    this.nameUC = trim_0(Kotlin.isCharSequence(tmp$ = $receiver) ? tmp$ : Kotlin.throwCCE()).toString().toUpperCase();
  }
  Object.defineProperty(Http$CustomMethod.prototype, 'name', {
    get: function () {
      return this.nameUC;
    }
  });
  Http$CustomMethod.prototype.toString = function () {
    return this.nameUC;
  };
  Http$CustomMethod.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'CustomMethod',
    interfaces: [Http$Method]
  };
  Http$CustomMethod.prototype.component1 = function () {
    return this._name;
  };
  Http$CustomMethod.prototype.copy_61zpoe$ = function (_name) {
    return new Http$CustomMethod(_name === void 0 ? this._name : _name);
  };
  Http$CustomMethod.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this._name) | 0;
    return result;
  };
  Http$CustomMethod.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this._name, other._name))));
  };
  function Http$HttpException(statusCode, msg, statusText, headers) {
    Http$HttpException$Companion_getInstance();
    var tmp$;
    if (msg === void 0)
      msg = 'Error' + statusCode;
    if (statusText === void 0)
      statusText = (tmp$ = HttpStatusMessage_getInstance().CODES.get_11rb$(statusCode)) != null ? tmp$ : 'Error' + statusCode;
    if (headers === void 0)
      headers = Http$Http$Headers_init([]);
    IOException.call(this, statusCode.toString() + ' ' + statusText + ' - ' + msg);
    this.statusCode = statusCode;
    this.msg = msg;
    this.statusText = statusText;
    this.headers = headers;
    this.name = 'Http$HttpException';
  }
  function Http$HttpException$Companion() {
    Http$HttpException$Companion_instance = this;
  }
  Http$HttpException$Companion.prototype.unauthorizedBasic_puj7f4$ = function (realm, msg) {
    if (realm === void 0)
      realm = 'Realm';
    if (msg === void 0)
      msg = 'Unauthorized';
    throw new Http$HttpException(401, msg, void 0, Http$Http$Headers_init([to('WWW-Authenticate', 'Basic realm=' + '"' + realm + '"')]));
  };
  Http$HttpException$Companion.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Http$HttpException$Companion_instance = null;
  function Http$HttpException$Companion_getInstance() {
    if (Http$HttpException$Companion_instance === null) {
      new Http$HttpException$Companion();
    }
    return Http$HttpException$Companion_instance;
  }
  Http$HttpException.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'HttpException',
    interfaces: [IOException]
  };
  function Http$Auth(user, pass, digest) {
    Http$Auth$Companion_getInstance();
    this.user = user;
    this.pass = pass;
    this.digest = digest;
  }
  function Http$Auth$Companion() {
    Http$Auth$Companion_instance = this;
  }
  Http$Auth$Companion.prototype.parse_61zpoe$ = function (auth) {
    var parts = split(auth, Kotlin.charArrayOf(32), void 0, 2);
    if (equals(parts.get_za3lpa$(0), 'basic', true)) {
      var parts_0 = split(toString(fromBase64(parts.get_za3lpa$(1)), Charsets_getInstance().UTF_8), Kotlin.charArrayOf(58), void 0, 2);
      return new Http$Auth(parts_0.get_za3lpa$(0), parts_0.get_za3lpa$(1), '');
    }
     else {
      if (parts.get_za3lpa$(0).length === 0) {
        return new Http$Auth('', '', '');
      }
       else {
        invalidOp('Just supported basic auth');
      }
    }
  };
  Http$Auth$Companion.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Http$Auth$Companion_instance = null;
  function Http$Auth$Companion_getInstance() {
    if (Http$Auth$Companion_instance === null) {
      new Http$Auth$Companion();
    }
    return Http$Auth$Companion_instance;
  }
  Http$Auth.prototype.validate_6hosri$ = function (expectedUser, expectedPass, realm) {
    if (realm === void 0)
      realm = 'Realm';
    if (Kotlin.equals(this.user, expectedUser) && Kotlin.equals(this.pass, expectedPass))
      return true;
    return false;
  };
  Http$Auth.prototype.checkBasic_1amyco$ = function (realm_0, check_0, continuation_0, suspended) {
    var instance = new Coroutine$checkBasic_1amyco$(this, realm_0, check_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$checkBasic_1amyco$($this, realm_0, check_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$tmp$ = void 0;
    this.local$realm = realm_0;
    this.local$check = check_0;
  }
  Coroutine$checkBasic_1amyco$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$checkBasic_1amyco$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$checkBasic_1amyco$.prototype.constructor = Coroutine$checkBasic_1amyco$;
  Coroutine$checkBasic_1amyco$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$realm === void 0)
              this.local$realm = 'Realm';
            if (!(this.$this.user.length === 0)) {
              this.state_0 = 2;
              this.result_0 = this.local$check(this.$this, this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              break;
            }
             else {
              this.local$tmp$ = true;
              this.state_0 = 3;
              continue;
            }

          case 1:
            throw this.exception_0;
          case 2:
            this.local$tmp$ = !this.result_0;
            this.state_0 = 3;
            continue;
          case 3:
            if (this.local$tmp$)
              Http$HttpException$Companion_getInstance().unauthorizedBasic_puj7f4$('Domain', 'Invalid auth');
            return;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  Http$Auth.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'Auth',
    interfaces: []
  };
  Http$Auth.prototype.component1 = function () {
    return this.user;
  };
  Http$Auth.prototype.component2 = function () {
    return this.pass;
  };
  Http$Auth.prototype.component3 = function () {
    return this.digest;
  };
  Http$Auth.prototype.copy_6hosri$ = function (user, pass, digest) {
    return new Http$Auth(user === void 0 ? this.user : user, pass === void 0 ? this.pass : pass, digest === void 0 ? this.digest : digest);
  };
  Http$Auth.prototype.toString = function () {
    return 'Auth(user=' + Kotlin.toString(this.user) + (', pass=' + Kotlin.toString(this.pass)) + (', digest=' + Kotlin.toString(this.digest)) + ')';
  };
  Http$Auth.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.user) | 0;
    result = result * 31 + Kotlin.hashCode(this.pass) | 0;
    result = result * 31 + Kotlin.hashCode(this.digest) | 0;
    return result;
  };
  Http$Auth.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.user, other.user) && Kotlin.equals(this.pass, other.pass) && Kotlin.equals(this.digest, other.digest)))));
  };
  function Http$Request(uri, headers) {
    this.uri = uri;
    this.headers = headers;
    this.parts_jrdksm$_0 = lazy(Http$Request$parts$lambda(this));
    this.path_ufa8h7$_0 = lazy(Http$Request$path$lambda(this));
    this.queryString_69y35t$_0 = lazy(Http$Request$queryString$lambda(this));
    this.getParams_q1kxia$_0 = lazy(Http$Request$getParams$lambda(this));
    this.absoluteURI_58azy3$_0 = lazy(Http$Request$absoluteURI$lambda(this));
  }
  Object.defineProperty(Http$Request.prototype, 'parts_0', {
    get: function () {
      var $receiver = this.parts_jrdksm$_0;
      new Kotlin.PropertyMetadata('parts');
      return $receiver.value;
    }
  });
  Object.defineProperty(Http$Request.prototype, 'path', {
    get: function () {
      var $receiver = this.path_ufa8h7$_0;
      new Kotlin.PropertyMetadata('path');
      return $receiver.value;
    }
  });
  Object.defineProperty(Http$Request.prototype, 'queryString', {
    get: function () {
      var $receiver = this.queryString_69y35t$_0;
      new Kotlin.PropertyMetadata('queryString');
      return $receiver.value;
    }
  });
  Object.defineProperty(Http$Request.prototype, 'getParams', {
    get: function () {
      var $receiver = this.getParams_q1kxia$_0;
      new Kotlin.PropertyMetadata('getParams');
      return $receiver.value;
    }
  });
  Object.defineProperty(Http$Request.prototype, 'absoluteURI', {
    get: function () {
      var $receiver = this.absoluteURI_58azy3$_0;
      new Kotlin.PropertyMetadata('absoluteURI');
      return $receiver.value;
    }
  });
  function Http$Request$parts$lambda(this$Request) {
    return function () {
      return split(this$Request.uri, Kotlin.charArrayOf(63), void 0, 2);
    };
  }
  function Http$Request$path$lambda(this$Request) {
    return function () {
      return this$Request.parts_0.get_za3lpa$(0);
    };
  }
  function Http$Request$queryString$lambda(this$Request) {
    return function () {
      var $receiver = this$Request.parts_0;
      return 1 >= 0 && 1 <= get_lastIndex_0($receiver) ? $receiver.get_za3lpa$(1) : '';
    };
  }
  function Http$Request$getParams$lambda(this$Request) {
    return function () {
      return QueryString_getInstance().decode_6bul2c$(this$Request.queryString);
    };
  }
  function Http$Request$absoluteURI$lambda(this$Request) {
    return function () {
      return this$Request.uri;
    };
  }
  Http$Request.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'Request',
    interfaces: []
  };
  function Http$Response() {
    this.headers = ArrayList_init();
  }
  Http$Response.prototype.header_puj7f4$ = function (key, value) {
    var $receiver = this.headers;
    var element = to(key, value);
    $receiver.add_11rb$(element);
  };
  Http$Response.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'Response',
    interfaces: []
  };
  function Http$Headers(items) {
    Http$Headers$Companion_getInstance();
    this.items = items;
  }
  Http$Headers.prototype.iterator = function () {
    return this.items.iterator();
  };
  Http$Headers.prototype.get_61zpoe$ = function (key) {
    return this.getFirst_61zpoe$(key);
  };
  Http$Headers.prototype.getAll_61zpoe$ = function (key) {
    var $receiver = this.items;
    var destination = ArrayList_init();
    var tmp$;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      if (equals(element.first, key, true))
        destination.add_11rb$(element);
    }
    var destination_0 = ArrayList_init(collectionSizeOrDefault(destination, 10));
    var tmp$_0;
    tmp$_0 = destination.iterator();
    while (tmp$_0.hasNext()) {
      var item = tmp$_0.next();
      destination_0.add_11rb$(item.second);
    }
    return destination_0;
  };
  Http$Headers.prototype.getFirst_61zpoe$ = function (key) {
    var tmp$;
    var $receiver = this.items;
    var firstOrNull$result;
    firstOrNull$break: do {
      var tmp$_0;
      tmp$_0 = $receiver.iterator();
      while (tmp$_0.hasNext()) {
        var element = tmp$_0.next();
        if (equals(element.first, key, true)) {
          firstOrNull$result = element;
          break firstOrNull$break;
        }
      }
      firstOrNull$result = null;
    }
     while (false);
    return (tmp$ = firstOrNull$result) != null ? tmp$.second : null;
  };
  function Http$Headers$toListGrouped$lambda(it) {
    return it.first.toLowerCase();
  }
  var sortedWith = Kotlin.kotlin.collections.sortedWith_eknfly$;
  var compareBy$lambda = wrapFunction(function () {
    var compareValues = Kotlin.kotlin.comparisons.compareValues_s00gnj$;
    return function (closure$selector) {
      return function (a, b) {
        var selector = closure$selector;
        return compareValues(selector(a), selector(b));
      };
    };
  });
  var Comparator = Kotlin.kotlin.Comparator;
  function Comparator$ObjectLiteral(closure$comparison) {
    this.closure$comparison = closure$comparison;
  }
  Comparator$ObjectLiteral.prototype.compare = function (a, b) {
    return this.closure$comparison(a, b);
  };
  Comparator$ObjectLiteral.$metadata$ = {kind: Kotlin.Kind.CLASS, interfaces: [Comparator]};
  Http$Headers.prototype.toListGrouped = function () {
    var $receiver = this.items;
    var destination = LinkedHashMap_init();
    var tmp$;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      var key = element.first.toLowerCase();
      var tmp$_0;
      var value = destination.get_11rb$(key);
      if (value == null) {
        var answer = ArrayList_init();
        destination.put_xwzc9p$(key, answer);
        tmp$_0 = answer;
      }
       else {
        tmp$_0 = value;
      }
      var list = tmp$_0;
      list.add_11rb$(element);
    }
    var destination_0 = ArrayList_init(destination.size);
    var tmp$_1;
    tmp$_1 = destination.entries.iterator();
    while (tmp$_1.hasNext()) {
      var item = tmp$_1.next();
      var tmp$_2 = destination_0.add_11rb$;
      var tmp$_3 = first_0(item.value).first;
      var $receiver_0 = item.value;
      var destination_1 = ArrayList_init(collectionSizeOrDefault($receiver_0, 10));
      var tmp$_4;
      tmp$_4 = $receiver_0.iterator();
      while (tmp$_4.hasNext()) {
        var item_0 = tmp$_4.next();
        destination_1.add_11rb$(item_0.second);
      }
      tmp$_2.call(destination_0, to(tmp$_3, destination_1));
    }
    return sortedWith(destination_0, new Comparator$ObjectLiteral(compareBy$lambda(Http$Headers$toListGrouped$lambda)));
  };
  Http$Headers.prototype.withAppendedHeaders_3efbss$ = function (newHeaders) {
    return new Http$Headers(plus(this.items, toList(newHeaders)));
  };
  Http$Headers.prototype.withReplaceHeaders_3efbss$ = function (newHeaders) {
    var destination = ArrayList_init(collectionSizeOrDefault(newHeaders, 10));
    var tmp$;
    tmp$ = newHeaders.iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      destination.add_11rb$(item.first.toLowerCase());
    }
    var replaceKeys = toSet(destination);
    var $receiver = this.items;
    var destination_0 = ArrayList_init();
    var tmp$_0;
    tmp$_0 = $receiver.iterator();
    while (tmp$_0.hasNext()) {
      var element = tmp$_0.next();
      if (!replaceKeys.contains_11rb$(element.first.toLowerCase()))
        destination_0.add_11rb$(element);
    }
    return new Http$Headers(plus(destination_0, toList(newHeaders)));
  };
  Http$Headers.prototype.withAppendedHeaders_9ih0sy$ = function (newHeaders) {
    return this.withAppendedHeaders_3efbss$(toList_0(newHeaders));
  };
  Http$Headers.prototype.withReplaceHeaders_9ih0sy$ = function (newHeaders) {
    return this.withReplaceHeaders_3efbss$(toList_0(newHeaders));
  };
  Http$Headers.prototype.plus_5dayij$ = function (that) {
    return this.withAppendedHeaders_3efbss$(plus(this.items, that.items));
  };
  Http$Headers.prototype.toString = function () {
    return 'Headers(' + joinToString(this.toListGrouped(), ', ') + ')';
  };
  function Http$Headers$Companion() {
    Http$Headers$Companion_instance = this;
  }
  Http$Headers$Companion.prototype.fromListMap_wd7g4x$ = function (map) {
    var destination = ArrayList_init();
    var tmp$;
    tmp$ = map.entries.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      var tmp$_0;
      if (element.key == null) {
        tmp$_0 = emptyList();
      }
       else {
        var $receiver = element.value;
        var destination_0 = ArrayList_init(collectionSizeOrDefault($receiver, 10));
        var tmp$_1;
        tmp$_1 = $receiver.iterator();
        while (tmp$_1.hasNext()) {
          var item = tmp$_1.next();
          var tmp$_2;
          destination_0.add_11rb$(to((tmp$_2 = element.key) != null ? tmp$_2 : Kotlin.throwNPE(), item));
        }
        tmp$_0 = destination_0;
      }
      var list = tmp$_0;
      addAll(destination, list);
    }
    return new Http$Headers(destination);
  };
  Http$Headers$Companion.prototype.parse_pdl1vj$ = function (str) {
    if (str == null)
      return Http$Http$Headers_init([]);
    var $receiver = split_0(str, ['\n']);
    var destination = ArrayList_init(collectionSizeOrDefault($receiver, 10));
    var tmp$;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      var tmp$_0 = destination.add_11rb$;
      var tmp$_1;
      var parts = split(trim_0(Kotlin.isCharSequence(tmp$_1 = item) ? tmp$_1 : Kotlin.throwCCE()).toString(), Kotlin.charArrayOf(58), void 0, 2);
      var tmp$_2;
      if (parts.size >= 2) {
        var $receiver_0 = parts.get_za3lpa$(0);
        var tmp$_3;
        var tmp$_4 = trim_0(Kotlin.isCharSequence(tmp$_3 = $receiver_0) ? tmp$_3 : Kotlin.throwCCE()).toString();
        var $receiver_1 = parts.get_za3lpa$(1);
        var tmp$_5;
        tmp$_2 = to(tmp$_4, trim_0(Kotlin.isCharSequence(tmp$_5 = $receiver_1) ? tmp$_5 : Kotlin.throwCCE()).toString());
      }
       else
        tmp$_2 = null;
      tmp$_0.call(destination, tmp$_2);
    }
    return new Http$Headers(filterNotNull(destination));
  };
  Http$Headers$Companion.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Http$Headers$Companion_instance = null;
  function Http$Headers$Companion_getInstance() {
    if (Http$Headers$Companion_instance === null) {
      new Http$Headers$Companion();
    }
    return Http$Headers$Companion_instance;
  }
  Http$Headers.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'Headers',
    interfaces: [Iterable]
  };
  function Http$Http$Headers_init(items, $this) {
    $this = $this || Object.create(Http$Headers.prototype);
    Http$Headers.call($this, toList_0(items));
    return $this;
  }
  function Http$Http$Headers_init_0(map, $this) {
    $this = $this || Object.create(Http$Headers.prototype);
    var $receiver = map;
    var destination = ArrayList_init($receiver.size);
    var tmp$;
    tmp$ = $receiver.entries.iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      destination.add_11rb$(to(item.key, item.value));
    }
    Http$Headers.call($this, destination);
    return $this;
  }
  function Http$Http$Headers_init_1(str, $this) {
    $this = $this || Object.create(Http$Headers.prototype);
    Http$Headers.call($this, Http$Headers$Companion_getInstance().parse_pdl1vj$(str).items);
    return $this;
  }
  Http$Headers.prototype.component1 = function () {
    return this.items;
  };
  Http$Headers.prototype.copy_3efbss$ = function (items) {
    return new Http$Headers(items === void 0 ? this.items : items);
  };
  Http$Headers.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.items) | 0;
    return result;
  };
  Http$Headers.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.items, other.items))));
  };
  function Http$RedirectException(code, redirectUri) {
    if (code === void 0)
      code = 307;
    Http$HttpException.call(this, code, HttpStatusMessage_getInstance().invoke_za3lpa$(code));
    this.code = code;
    this.redirectUri = redirectUri;
    this.name = 'Http$RedirectException';
  }
  Http$RedirectException.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'RedirectException',
    interfaces: [Http$HttpException]
  };
  Http$RedirectException.prototype.component1 = function () {
    return this.code;
  };
  Http$RedirectException.prototype.component2 = function () {
    return this.redirectUri;
  };
  Http$RedirectException.prototype.copy_19mbxw$ = function (code, redirectUri) {
    return new Http$RedirectException(code === void 0 ? this.code : code, redirectUri === void 0 ? this.redirectUri : redirectUri);
  };
  Http$RedirectException.prototype.toString = function () {
    return 'RedirectException(code=' + Kotlin.toString(this.code) + (', redirectUri=' + Kotlin.toString(this.redirectUri)) + ')';
  };
  Http$RedirectException.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.code) | 0;
    result = result * 31 + Kotlin.hashCode(this.redirectUri) | 0;
    return result;
  };
  Http$RedirectException.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.code, other.code) && Kotlin.equals(this.redirectUri, other.redirectUri)))));
  };
  function Http$Companion() {
    Http$Companion_instance = this;
  }
  Http$Companion.prototype.TemporalRedirect_61zpoe$ = function (uri) {
    return new Http$RedirectException(307, uri);
  };
  Http$Companion.prototype.PermanentRedirect_61zpoe$ = function (uri) {
    return new Http$RedirectException(301, uri);
  };
  Http$Companion.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Http$Companion_instance = null;
  function Http$Companion_getInstance() {
    if (Http$Companion_instance === null) {
      new Http$Companion();
    }
    return Http$Companion_instance;
  }
  Http.$metadata$ = {
    kind: Kotlin.Kind.INTERFACE,
    simpleName: 'Http',
    interfaces: []
  };
  function HttpClient() {
    HttpClient$Companion_getInstance();
  }
  HttpClient.prototype.requestInternal_wintjk$ = function (method, url, headers, content, continuation, callback$default) {
    if (headers === void 0)
      headers = Http$Http$Headers_init([]);
    if (content === void 0)
      content = null;
    return callback$default ? callback$default(method, url, headers, content, continuation) : this.requestInternal_wintjk$$default(method, url, headers, content, continuation);
  };
  function HttpClient$Response(status, statusText, headers, content) {
    this.status = status;
    this.statusText = statusText;
    this.headers = headers;
    this.content = content;
    this.success = this.status < 400;
    this.responseCharset_pcy4sm$_0 = lazy(HttpClient$Response$responseCharset$lambda);
  }
  HttpClient$Response.prototype.readAllBytes = function (continuation_0, suspended) {
    var instance = new Coroutine$readAllBytes(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$readAllBytes($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$allContent = void 0;
  }
  Coroutine$readAllBytes.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readAllBytes.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readAllBytes.prototype.constructor = Coroutine$readAllBytes;
  Coroutine$readAllBytes.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = readAll(this.$this.content, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$allContent = this.result_0;
            return this.local$allContent;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  Object.defineProperty(HttpClient$Response.prototype, 'responseCharset', {
    get: function () {
      var $receiver = this.responseCharset_pcy4sm$_0;
      new Kotlin.PropertyMetadata('responseCharset');
      return $receiver.value;
    }
  });
  HttpClient$Response.prototype.readAllString_qa9gbo$ = function (charset_0, continuation_0, suspended) {
    var instance = new Coroutine$readAllString_qa9gbo$(this, charset_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$readAllString_qa9gbo$($this, charset_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$bytes = void 0;
    this.local$charset = charset_0;
  }
  Coroutine$readAllString_qa9gbo$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readAllString_qa9gbo$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readAllString_qa9gbo$.prototype.constructor = Coroutine$readAllString_qa9gbo$;
  Coroutine$readAllString_qa9gbo$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$charset === void 0)
              this.local$charset = this.$this.responseCharset;
            this.state_0 = 2;
            this.result_0 = this.$this.readAllBytes(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$bytes = this.result_0;
            return toString(this.local$bytes, this.local$charset);
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  HttpClient$Response.prototype.checkErrors = function (continuation_0, suspended) {
    var instance = new Coroutine$checkErrors(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$checkErrors($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$closure$continuation = void 0;
    this.local$tmp$ = void 0;
  }
  Coroutine$checkErrors.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$checkErrors.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$checkErrors.prototype.constructor = Coroutine$checkErrors;
  Coroutine$checkErrors.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$closure$continuation = this;
            if (!this.$this.success) {
              this.local$tmp$ = this.$this.status;
              this.state_0 = 2;
              this.result_0 = this.$this.readAllString_qa9gbo$(void 0, this.local$closure$continuation);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              break;
            }
             else {
              this.state_0 = 3;
              continue;
            }

          case 1:
            throw this.exception_0;
          case 2:
            throw new Http$HttpException(this.local$tmp$, this.local$closure$continuation.result_0, this.$this.statusText);
          case 3:
            return this.$this;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  HttpClient$Response.prototype.withStringResponse_6zdodq$ = function (str, charset) {
    if (charset === void 0)
      charset = Charsets_getInstance().UTF_8;
    return this.copy_54vabp$(void 0, void 0, void 0, openAsync(toByteArray(str, charset)));
  };
  HttpClient$Response.prototype.toCompletedResponse_mh5how$ = function (content) {
    return new HttpClient$CompletedResponse(this.status, this.statusText, this.headers, content);
  };
  function HttpClient$Response$responseCharset$lambda() {
    return Charsets_getInstance().UTF_8;
  }
  HttpClient$Response.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'Response',
    interfaces: []
  };
  HttpClient$Response.prototype.component1 = function () {
    return this.status;
  };
  HttpClient$Response.prototype.component2 = function () {
    return this.statusText;
  };
  HttpClient$Response.prototype.component3 = function () {
    return this.headers;
  };
  HttpClient$Response.prototype.component4 = function () {
    return this.content;
  };
  HttpClient$Response.prototype.copy_54vabp$ = function (status, statusText, headers, content) {
    return new HttpClient$Response(status === void 0 ? this.status : status, statusText === void 0 ? this.statusText : statusText, headers === void 0 ? this.headers : headers, content === void 0 ? this.content : content);
  };
  HttpClient$Response.prototype.toString = function () {
    return 'Response(status=' + Kotlin.toString(this.status) + (', statusText=' + Kotlin.toString(this.statusText)) + (', headers=' + Kotlin.toString(this.headers)) + (', content=' + Kotlin.toString(this.content)) + ')';
  };
  HttpClient$Response.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.status) | 0;
    result = result * 31 + Kotlin.hashCode(this.statusText) | 0;
    result = result * 31 + Kotlin.hashCode(this.headers) | 0;
    result = result * 31 + Kotlin.hashCode(this.content) | 0;
    return result;
  };
  HttpClient$Response.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.status, other.status) && Kotlin.equals(this.statusText, other.statusText) && Kotlin.equals(this.headers, other.headers) && Kotlin.equals(this.content, other.content)))));
  };
  function HttpClient$CompletedResponse(status, statusText, headers, content) {
    this.status = status;
    this.statusText = statusText;
    this.headers = headers;
    this.content = content;
    this.success = this.status < 400;
  }
  HttpClient$CompletedResponse.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'CompletedResponse',
    interfaces: []
  };
  HttpClient$CompletedResponse.prototype.component1 = function () {
    return this.status;
  };
  HttpClient$CompletedResponse.prototype.component2 = function () {
    return this.statusText;
  };
  HttpClient$CompletedResponse.prototype.component3 = function () {
    return this.headers;
  };
  HttpClient$CompletedResponse.prototype.component4 = function () {
    return this.content;
  };
  HttpClient$CompletedResponse.prototype.copy_alsvp4$ = function (status, statusText, headers, content) {
    return new HttpClient$CompletedResponse(status === void 0 ? this.status : status, statusText === void 0 ? this.statusText : statusText, headers === void 0 ? this.headers : headers, content === void 0 ? this.content : content);
  };
  HttpClient$CompletedResponse.prototype.toString = function () {
    return 'CompletedResponse(status=' + Kotlin.toString(this.status) + (', statusText=' + Kotlin.toString(this.statusText)) + (', headers=' + Kotlin.toString(this.headers)) + (', content=' + Kotlin.toString(this.content)) + ')';
  };
  HttpClient$CompletedResponse.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.status) | 0;
    result = result * 31 + Kotlin.hashCode(this.statusText) | 0;
    result = result * 31 + Kotlin.hashCode(this.headers) | 0;
    result = result * 31 + Kotlin.hashCode(this.content) | 0;
    return result;
  };
  HttpClient$CompletedResponse.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.status, other.status) && Kotlin.equals(this.statusText, other.statusText) && Kotlin.equals(this.headers, other.headers) && Kotlin.equals(this.content, other.content)))));
  };
  function HttpClient$RequestConfig(followRedirects, throwErrors, maxRedirects, referer, simulateBrowser) {
    if (followRedirects === void 0)
      followRedirects = true;
    if (throwErrors === void 0)
      throwErrors = false;
    if (maxRedirects === void 0)
      maxRedirects = 10;
    if (referer === void 0)
      referer = null;
    if (simulateBrowser === void 0)
      simulateBrowser = false;
    this.followRedirects = followRedirects;
    this.throwErrors = throwErrors;
    this.maxRedirects = maxRedirects;
    this.referer = referer;
    this.simulateBrowser = simulateBrowser;
  }
  HttpClient$RequestConfig.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'RequestConfig',
    interfaces: []
  };
  HttpClient$RequestConfig.prototype.component1 = function () {
    return this.followRedirects;
  };
  HttpClient$RequestConfig.prototype.component2 = function () {
    return this.throwErrors;
  };
  HttpClient$RequestConfig.prototype.component3 = function () {
    return this.maxRedirects;
  };
  HttpClient$RequestConfig.prototype.component4 = function () {
    return this.referer;
  };
  HttpClient$RequestConfig.prototype.component5 = function () {
    return this.simulateBrowser;
  };
  HttpClient$RequestConfig.prototype.copy_nslxbw$ = function (followRedirects, throwErrors, maxRedirects, referer, simulateBrowser) {
    return new HttpClient$RequestConfig(followRedirects === void 0 ? this.followRedirects : followRedirects, throwErrors === void 0 ? this.throwErrors : throwErrors, maxRedirects === void 0 ? this.maxRedirects : maxRedirects, referer === void 0 ? this.referer : referer, simulateBrowser === void 0 ? this.simulateBrowser : simulateBrowser);
  };
  HttpClient$RequestConfig.prototype.toString = function () {
    return 'RequestConfig(followRedirects=' + Kotlin.toString(this.followRedirects) + (', throwErrors=' + Kotlin.toString(this.throwErrors)) + (', maxRedirects=' + Kotlin.toString(this.maxRedirects)) + (', referer=' + Kotlin.toString(this.referer)) + (', simulateBrowser=' + Kotlin.toString(this.simulateBrowser)) + ')';
  };
  HttpClient$RequestConfig.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.followRedirects) | 0;
    result = result * 31 + Kotlin.hashCode(this.throwErrors) | 0;
    result = result * 31 + Kotlin.hashCode(this.maxRedirects) | 0;
    result = result * 31 + Kotlin.hashCode(this.referer) | 0;
    result = result * 31 + Kotlin.hashCode(this.simulateBrowser) | 0;
    return result;
  };
  HttpClient$RequestConfig.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.followRedirects, other.followRedirects) && Kotlin.equals(this.throwErrors, other.throwErrors) && Kotlin.equals(this.maxRedirects, other.maxRedirects) && Kotlin.equals(this.referer, other.referer) && Kotlin.equals(this.simulateBrowser, other.simulateBrowser)))));
  };
  HttpClient.prototype.isUrlAbsolute_tqps1i$_0 = function (url) {
    return Regex('^\\w+://').matches_6bul2c$(url);
  };
  HttpClient.prototype.mergeUrls_h5cdg$_0 = function (base, append) {
    var tmp$;
    if (this.isUrlAbsolute_tqps1i$_0(append)) {
      tmp$ = append;
    }
     else {
      tmp$ = base + '/' + append;
    }
    return tmp$;
  };
  var Collection = Kotlin.kotlin.collections.Collection;
  HttpClient.prototype.request_v6tn8p$ = function (method_0, url_0, headers_0, content_0, config_0, continuation_0, suspended) {
    var instance = new Coroutine$request_v6tn8p$(this, method_0, url_0, headers_0, content_0, config_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$request_v6tn8p$($this, method_0, url_0, headers_0, content_0, config_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$tmp$ = void 0;
    this.local$contentLength = void 0;
    this.local$actualHeaders = void 0;
    this.local$tmp$_0 = void 0;
    this.local$any$result = void 0;
    this.local$tmp$_1 = void 0;
    this.local$element = void 0;
    this.local$$receiver = void 0;
    this.local$closure$continuation = void 0;
    this.local$response = void 0;
    this.local$redirectLocation = void 0;
    this.local$resolvedRedirectLocation = void 0;
    this.local$method = method_0;
    this.local$url = url_0;
    this.local$headers = headers_0;
    this.local$content = content_0;
    this.local$config = config_0;
  }
  Coroutine$request_v6tn8p$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$request_v6tn8p$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$request_v6tn8p$.prototype.constructor = Coroutine$request_v6tn8p$;
  Coroutine$request_v6tn8p$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$headers === void 0)
              this.local$headers = Http$Http$Headers_init([]);
            if (this.local$content === void 0)
              this.local$content = null;
            if (this.local$config === void 0)
              this.local$config = new HttpClient$RequestConfig();
            this.state_0 = 2;
            this.result_0 = this.local$content != null ? this.local$content.getLength(this) : null;
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$tmp$ = this.result_0;
            this.local$contentLength = this.local$tmp$ != null ? this.local$tmp$ : Kotlin.Long.ZERO;
            this.local$actualHeaders = this.local$headers;
            this.local$tmp$_0 = this.local$content != null;
            if (this.local$tmp$_0) {
              any$break: do {
                if (Kotlin.isType(this.local$headers, Collection) && this.local$headers.isEmpty()) {
                  this.local$any$result = false;
                  break any$break;
                }
                this.local$tmp$_1 = this.local$headers.iterator();
                while (this.local$tmp$_1.hasNext()) {
                  this.local$element = this.local$tmp$_1.next();
                  if (equals(this.local$element.first, 'content-length', true)) {
                    this.local$any$result = true;
                    break any$break;
                  }
                }
                this.local$any$result = false;
              }
               while (false);
              this.local$tmp$_0 = !this.local$any$result;
            }

            if (this.local$tmp$_0) {
              this.local$actualHeaders = this.local$actualHeaders.withReplaceHeaders_9ih0sy$([to('content-length', this.local$contentLength.toString())]);
            }

            if (this.local$config.simulateBrowser) {
              if (this.local$actualHeaders.get_61zpoe$('user-agent') == null) {
                this.local$actualHeaders = this.local$actualHeaders.withReplaceHeaders_9ih0sy$([to('Accept', 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'), to('user-agent', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.81 Safari/537.36')]);
              }
            }

            this.state_0 = 3;
            this.result_0 = this.$this.requestInternal_wintjk$(this.local$method, this.local$url, this.local$actualHeaders, this.local$content, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            this.local$$receiver = this.result_0;
            this.local$closure$continuation = this;
            if (this.local$config.throwErrors) {
              this.state_0 = 4;
              this.result_0 = this.local$$receiver.checkErrors(this.local$closure$continuation);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              break;
            }
             else {
              this.state_0 = 5;
              continue;
            }

          case 4:
            this.state_0 = 5;
            continue;
          case 5:
            this.local$response = this.local$$receiver;
            if (this.local$config.followRedirects && this.local$config.maxRedirects >= 0) {
              this.local$redirectLocation = this.local$response.headers.get_61zpoe$('location');
              if (this.local$redirectLocation != null) {
                this.local$resolvedRedirectLocation = this.$this.mergeUrls_h5cdg$_0(this.local$url, this.local$redirectLocation).toString();
                this.state_0 = 6;
                this.result_0 = this.$this.request_v6tn8p$(this.local$method, this.local$resolvedRedirectLocation, this.local$headers.withReplaceHeaders_9ih0sy$([to('Referer', this.local$url)]), this.local$content, this.local$config.copy_nslxbw$(void 0, void 0, this.local$config.maxRedirects - 1 | 0), this);
                if (this.result_0 === COROUTINE_SUSPENDED)
                  return COROUTINE_SUSPENDED;
                break;
              }
               else {
                this.state_0 = 7;
                continue;
              }
            }
             else {
              this.state_0 = 8;
              continue;
            }

          case 6:
            return this.result_0;
          case 7:
            this.state_0 = 8;
            continue;
          case 8:
            return this.local$response;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  HttpClient.prototype.requestAsString_v6tn8p$ = function (method_0, url_0, headers_0, content_0, config_0, continuation_0, suspended) {
    var instance = new Coroutine$requestAsString_v6tn8p$(this, method_0, url_0, headers_0, content_0, config_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$requestAsString_v6tn8p$($this, method_0, url_0, headers_0, content_0, config_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$res = void 0;
    this.local$method = method_0;
    this.local$url = url_0;
    this.local$headers = headers_0;
    this.local$content = content_0;
    this.local$config = config_0;
  }
  Coroutine$requestAsString_v6tn8p$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$requestAsString_v6tn8p$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$requestAsString_v6tn8p$.prototype.constructor = Coroutine$requestAsString_v6tn8p$;
  Coroutine$requestAsString_v6tn8p$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$headers === void 0)
              this.local$headers = Http$Http$Headers_init([]);
            if (this.local$content === void 0)
              this.local$content = null;
            if (this.local$config === void 0)
              this.local$config = new HttpClient$RequestConfig();
            this.state_0 = 2;
            this.result_0 = this.$this.request_v6tn8p$(this.local$method, this.local$url, this.local$headers, this.local$content, this.local$config, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$res = this.result_0;
            this.state_0 = 3;
            this.result_0 = this.local$res.readAllString_qa9gbo$(void 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            return this.local$res.toCompletedResponse_mh5how$(this.result_0);
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  HttpClient.prototype.requestAsBytes_v6tn8p$ = function (method_0, url_0, headers_0, content_0, config_0, continuation_0, suspended) {
    var instance = new Coroutine$requestAsBytes_v6tn8p$(this, method_0, url_0, headers_0, content_0, config_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$requestAsBytes_v6tn8p$($this, method_0, url_0, headers_0, content_0, config_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$res = void 0;
    this.local$method = method_0;
    this.local$url = url_0;
    this.local$headers = headers_0;
    this.local$content = content_0;
    this.local$config = config_0;
  }
  Coroutine$requestAsBytes_v6tn8p$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$requestAsBytes_v6tn8p$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$requestAsBytes_v6tn8p$.prototype.constructor = Coroutine$requestAsBytes_v6tn8p$;
  Coroutine$requestAsBytes_v6tn8p$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$headers === void 0)
              this.local$headers = Http$Http$Headers_init([]);
            if (this.local$content === void 0)
              this.local$content = null;
            if (this.local$config === void 0)
              this.local$config = new HttpClient$RequestConfig();
            this.state_0 = 2;
            this.result_0 = this.$this.request_v6tn8p$(this.local$method, this.local$url, this.local$headers, this.local$content, this.local$config, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$res = this.result_0;
            this.state_0 = 3;
            this.result_0 = this.local$res.readAllBytes(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            return this.local$res.toCompletedResponse_mh5how$(this.result_0);
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  HttpClient.prototype.readBytes_2y0c3t$ = function (url_0, config_0, continuation_0, suspended) {
    var instance = new Coroutine$readBytes_2y0c3t$(this, url_0, config_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$readBytes_2y0c3t$($this, url_0, config_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$url = url_0;
    this.local$config = config_0;
  }
  Coroutine$readBytes_2y0c3t$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readBytes_2y0c3t$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readBytes_2y0c3t$.prototype.constructor = Coroutine$readBytes_2y0c3t$;
  Coroutine$readBytes_2y0c3t$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$config === void 0)
              this.local$config = new HttpClient$RequestConfig();
            this.state_0 = 2;
            this.result_0 = this.$this.requestAsBytes_v6tn8p$(Http$Method$Companion_getInstance().GET, this.local$url, void 0, void 0, this.local$config.copy_nslxbw$(void 0, true), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0.content;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  HttpClient.prototype.readString_2y0c3t$ = function (url_0, config_0, continuation_0, suspended) {
    var instance = new Coroutine$readString_2y0c3t$(this, url_0, config_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$readString_2y0c3t$($this, url_0, config_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$url = url_0;
    this.local$config = config_0;
  }
  Coroutine$readString_2y0c3t$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readString_2y0c3t$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readString_2y0c3t$.prototype.constructor = Coroutine$readString_2y0c3t$;
  Coroutine$readString_2y0c3t$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$config === void 0)
              this.local$config = new HttpClient$RequestConfig();
            this.state_0 = 2;
            this.result_0 = this.$this.requestAsString_v6tn8p$(Http$Method$Companion_getInstance().GET, this.local$url, void 0, void 0, this.local$config.copy_nslxbw$(void 0, true), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0.content;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  HttpClient.prototype.readJson_2y0c3t$ = function (url_0, config_0, continuation_0, suspended) {
    var instance = new Coroutine$readJson_2y0c3t$(this, url_0, config_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$readJson_2y0c3t$($this, url_0, config_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$tmp$ = void 0;
    this.local$url = url_0;
    this.local$config = config_0;
  }
  Coroutine$readJson_2y0c3t$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readJson_2y0c3t$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readJson_2y0c3t$.prototype.constructor = Coroutine$readJson_2y0c3t$;
  Coroutine$readJson_2y0c3t$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$config === void 0)
              this.local$config = new HttpClient$RequestConfig();
            this.local$tmp$ = Json_getInstance();
            this.state_0 = 2;
            this.result_0 = this.$this.requestAsString_v6tn8p$(Http$Method$Companion_getInstance().GET, this.local$url, void 0, void 0, this.local$config.copy_nslxbw$(void 0, true), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.local$tmp$.decode_61zpoe$(this.result_0.content);
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function HttpClient$Companion() {
    HttpClient$Companion_instance = this;
  }
  HttpClient$Companion.prototype.invoke = function () {
    return get_defaultHttpFactory().createClient();
  };
  HttpClient$Companion.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var HttpClient$Companion_instance = null;
  function HttpClient$Companion_getInstance() {
    if (HttpClient$Companion_instance === null) {
      new HttpClient$Companion();
    }
    return HttpClient$Companion_instance;
  }
  HttpClient.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'HttpClient',
    interfaces: []
  };
  function DelayedHttpClient(delayMs, parent) {
    HttpClient.call(this);
    this.delayMs = delayMs;
    this.parent = parent;
    this.queue_w2hal5$_0 = new AsyncThread();
  }
  function DelayedHttpClient$requestInternal$lambda$lambda(this$DelayedHttpClient_0, closure$url_0, closure$method_0, closure$headers_0, closure$content_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$DelayedHttpClient$requestInternal$lambda$lambda(this$DelayedHttpClient_0, closure$url_0, closure$method_0, closure$headers_0, closure$content_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$DelayedHttpClient$requestInternal$lambda$lambda(this$DelayedHttpClient_0, closure$url_0, closure$method_0, closure$headers_0, closure$content_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$this$DelayedHttpClient = this$DelayedHttpClient_0;
    this.local$closure$url = closure$url_0;
    this.local$closure$method = closure$method_0;
    this.local$closure$headers = closure$headers_0;
    this.local$closure$content = closure$content_0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$DelayedHttpClient$requestInternal$lambda$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$DelayedHttpClient$requestInternal$lambda$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$DelayedHttpClient$requestInternal$lambda$lambda.prototype.constructor = Coroutine$DelayedHttpClient$requestInternal$lambda$lambda;
  Coroutine$DelayedHttpClient$requestInternal$lambda$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            println('Waiting ' + this.local$this$DelayedHttpClient.delayMs + ' milliseconds for ' + this.local$closure$url + '...');
            this.state_0 = 2;
            this.result_0 = this.local$$receiver.sleep_za3lpa$(this.local$this$DelayedHttpClient.delayMs, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.local$this$DelayedHttpClient.parent.request_v6tn8p$(this.local$closure$method, this.local$closure$url, this.local$closure$headers, this.local$closure$content, void 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function DelayedHttpClient$requestInternal$lambda(this$DelayedHttpClient_0, closure$url_0, closure$method_0, closure$headers_0, closure$content_0) {
    return function (continuation_0, suspended) {
      var instance = new Coroutine$DelayedHttpClient$requestInternal$lambda(this$DelayedHttpClient_0, closure$url_0, closure$method_0, closure$headers_0, closure$content_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$DelayedHttpClient$requestInternal$lambda(this$DelayedHttpClient_0, closure$url_0, closure$method_0, closure$headers_0, closure$content_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$this$DelayedHttpClient = this$DelayedHttpClient_0;
    this.local$closure$url = closure$url_0;
    this.local$closure$method = closure$method_0;
    this.local$closure$headers = closure$headers_0;
    this.local$closure$content = closure$content_0;
  }
  Coroutine$DelayedHttpClient$requestInternal$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$DelayedHttpClient$requestInternal$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$DelayedHttpClient$requestInternal$lambda.prototype.constructor = Coroutine$DelayedHttpClient$requestInternal$lambda;
  Coroutine$DelayedHttpClient$requestInternal$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = withEventLoop(DelayedHttpClient$requestInternal$lambda$lambda(this.local$this$DelayedHttpClient, this.local$closure$url, this.local$closure$method, this.local$closure$headers, this.local$closure$content), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  DelayedHttpClient.prototype.requestInternal_wintjk$$default = function (method_0, url_0, headers_0, content_0, continuation_0, suspended) {
    var instance = new Coroutine$requestInternal_wintjk$$default(this, method_0, url_0, headers_0, content_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$requestInternal_wintjk$$default($this, method_0, url_0, headers_0, content_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$method = method_0;
    this.local$url = url_0;
    this.local$headers = headers_0;
    this.local$content = content_0;
  }
  Coroutine$requestInternal_wintjk$$default.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$requestInternal_wintjk$$default.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$requestInternal_wintjk$$default.prototype.constructor = Coroutine$requestInternal_wintjk$$default;
  Coroutine$requestInternal_wintjk$$default.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.queue_w2hal5$_0.invoke_lnyleu$(DelayedHttpClient$requestInternal$lambda(this.$this, this.local$url, this.local$method, this.local$headers, this.local$content), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  DelayedHttpClient.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'DelayedHttpClient',
    interfaces: [HttpClient]
  };
  function delayed($receiver, ms) {
    return new DelayedHttpClient(ms, $receiver);
  }
  function LogHttpClient(redirect) {
    if (redirect === void 0)
      redirect = null;
    HttpClient.call(this);
    this.redirect = redirect;
    this.log = ArrayList_init();
    this.response = new HttpClient$Response(200, 'OK', Http$Http$Headers_init([]), openAsync(toByteArray('LogHttpClient.response', Charsets_getInstance().UTF_8)));
  }
  LogHttpClient.prototype.requestInternal_wintjk$$default = function (method_0, url_0, headers_0, content_0, continuation_0, suspended) {
    var instance = new Coroutine$requestInternal_wintjk$$default_0(this, method_0, url_0, headers_0, content_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$requestInternal_wintjk$$default_0($this, method_0, url_0, headers_0, content_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$tmp$ = void 0;
    this.local$tmp$_0 = void 0;
    this.local$contentString = void 0;
    this.local$$receiver = void 0;
    this.local$element = void 0;
    this.local$method = method_0;
    this.local$url = url_0;
    this.local$headers = headers_0;
    this.local$content = content_0;
  }
  Coroutine$requestInternal_wintjk$$default_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$requestInternal_wintjk$$default_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$requestInternal_wintjk$$default_0.prototype.constructor = Coroutine$requestInternal_wintjk$$default_0;
  Coroutine$requestInternal_wintjk$$default_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$content != null ? slice_2(this.local$content, this) : null;
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$tmp$ = this.result_0;
            this.state_0 = 3;
            this.result_0 = this.local$tmp$ != null ? readAll(this.local$tmp$, this) : null;
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            this.local$tmp$_0 = this.result_0;
            this.local$contentString = this.local$tmp$_0 != null ? toString(this.local$tmp$_0, Charsets_getInstance().UTF_8) : null;
            this.local$$receiver = this.$this.log;
            this.local$element = this.local$method + ', ' + this.local$url + ', ' + this.local$headers + ', ' + Kotlin.toString(this.local$contentString);
            this.local$$receiver.add_11rb$(this.local$element);
            if (this.$this.redirect != null) {
              this.state_0 = 4;
              this.result_0 = this.$this.redirect.request_v6tn8p$(this.local$method, this.local$url, this.local$headers, this.local$content, void 0, this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              break;
            }
             else {
              return this.$this.response;
            }

          case 4:
            return this.result_0;
          case 5:
            return;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  LogHttpClient.prototype.setTextResponse_yv3xjj$ = function (text, status, statusText, headers) {
    if (status === void 0)
      status = 200;
    if (statusText === void 0)
      statusText = 'OK';
    if (headers === void 0)
      headers = Http$Http$Headers_init([]);
    this.response = new HttpClient$Response(status, statusText, headers, openAsync(toByteArray(text, Charsets_getInstance().UTF_8)));
    return this;
  };
  LogHttpClient.prototype.getAndClearLog = function () {
    var $receiver = toList(this.log);
    this.log.clear();
    return $receiver;
  };
  LogHttpClient.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'LogHttpClient',
    interfaces: [HttpClient]
  };
  function HttpStatusMessage() {
    HttpStatusMessage_instance = this;
    this.CODES = lmapOf([to(100, 'Continue'), to(101, 'Switching Protocols'), to(200, 'OK'), to(201, 'Created'), to(202, 'Accepted'), to(203, 'Non-Authoritative Information'), to(204, 'No Content'), to(205, 'Reset Content'), to(206, 'Partial Content'), to(300, 'Multiple Choices'), to(301, 'Moved Permanently'), to(302, 'Found'), to(303, 'See Other'), to(304, 'Not Modified'), to(305, 'Use Proxy'), to(307, 'Temporary Redirect'), to(400, 'Bad Request'), to(401, 'Unauthorized'), to(402, 'Payment Required'), to(403, 'Forbidden'), to(404, 'Not Found'), to(405, 'Method Not Allowed'), to(406, 'Not Acceptable'), to(407, 'Proxy Authentication Required'), to(408, 'Request Timeout'), to(409, 'Conflict'), to(410, 'Gone'), to(411, 'Length Required'), to(412, 'Precondition Failed'), to(413, 'Request Entity Too Large'), to(414, 'Request-URI Too Long'), to(415, 'Unsupported Media Type'), to(416, 'Requested Range Not Satisfiable'), to(417, 'Expectation Failed'), to(418, "I'm a teapot"), to(422, 'Unprocessable Entity (WebDAV - RFC 4918)'), to(423, 'Locked (WebDAV - RFC 4918)'), to(424, 'Failed Dependency (WebDAV) (RFC 4918)'), to(425, 'Unassigned'), to(426, 'Upgrade Required (RFC 7231)'), to(428, 'Precondition Required'), to(429, 'Too Many Requests'), to(431, 'Request Header Fileds Too Large)'), to(449, 'Error449'), to(451, 'Unavailable for Legal Reasons'), to(500, 'Internal Server Error'), to(501, 'Not Implemented'), to(502, 'Bad Gateway'), to(503, 'Service Unavailable'), to(504, 'Gateway Timeout'), to(505, 'HTTP Version Not Supported'), to(506, 'Variant Also Negotiates (RFC 2295)'), to(507, 'Insufficient Storage (WebDAV - RFC 4918)'), to(508, 'Loop Detected (WebDAV)'), to(509, 'Bandwidth Limit Exceeded'), to(510, 'Not Extended (RFC 2774)'), to(511, 'Network Authentication Required')]);
  }
  HttpStatusMessage.prototype.invoke_za3lpa$ = function (code) {
    var tmp$;
    return (tmp$ = this.CODES.get_11rb$(code)) != null ? tmp$ : 'Error' + code;
  };
  HttpStatusMessage.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'HttpStatusMessage',
    interfaces: []
  };
  var HttpStatusMessage_instance = null;
  function HttpStatusMessage_getInstance() {
    if (HttpStatusMessage_instance === null) {
      new HttpStatusMessage();
    }
    return HttpStatusMessage_instance;
  }
  function HttpStats() {
    HttpStats_instance = this;
    this.connections = new AtomicLong();
    this.disconnections = new AtomicLong();
  }
  HttpStats.prototype.toString = function () {
    return 'HttpStats(connections=' + this.connections + ', Disconnections=' + this.disconnections + ')';
  };
  HttpStats.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'HttpStats',
    interfaces: []
  };
  var HttpStats_instance = null;
  function HttpStats_getInstance() {
    if (HttpStats_instance === null) {
      new HttpStats();
    }
    return HttpStats_instance;
  }
  function HttpFactory() {
  }
  HttpFactory.$metadata$ = {
    kind: Kotlin.Kind.INTERFACE,
    simpleName: 'HttpFactory',
    interfaces: []
  };
  function ProxiedHttpFactory(parent) {
    this.parent = parent;
    this.$delegate_k7ip1y$_0 = parent;
  }
  ProxiedHttpFactory.prototype.createClient = function () {
    return this.$delegate_k7ip1y$_0.createClient();
  };
  ProxiedHttpFactory.prototype.createServer = function () {
    return this.$delegate_k7ip1y$_0.createServer();
  };
  ProxiedHttpFactory.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'ProxiedHttpFactory',
    interfaces: [HttpFactory]
  };
  function _defaultHttpFactory$lambda() {
    return new ProxiedHttpFactory(DefaultHttpFactoryFactory_getInstance().createFactory());
  }
  var _defaultHttpFactory;
  function get__defaultHttpFactory() {
    new Kotlin.PropertyMetadata('_defaultHttpFactory');
    return _defaultHttpFactory.value;
  }
  function get_defaultHttpFactory() {
    return get__defaultHttpFactory();
  }
  function setDefaultHttpFactory(factory) {
    get__defaultHttpFactory().parent = factory;
  }
  function createClientEndpoint($receiver, endpoint_0) {
    return endpoint($receiver.createClient(), endpoint_0);
  }
  function createHttpClient() {
    return get_defaultHttpFactory().createClient();
  }
  function createHttpServer() {
    return get_defaultHttpFactory().createServer();
  }
  function createHttpClientEndpoint(endpoint_0) {
    return endpoint(createHttpClient(), endpoint_0);
  }
  function httpError(code, msg) {
    throw new Http$HttpException(code, msg);
  }
  function HttpClientEndpoint() {
  }
  HttpClientEndpoint.prototype.request_v6tn8p$ = function (method, path, headers, content, config, continuation, callback$default) {
    if (headers === void 0)
      headers = Http$Http$Headers_init([]);
    if (content === void 0)
      content = null;
    if (config === void 0)
      config = new HttpClient$RequestConfig();
    return callback$default ? callback$default(method, path, headers, content, config, continuation) : this.request_v6tn8p$$default(method, path, headers, content, config, continuation);
  };
  HttpClientEndpoint.$metadata$ = {
    kind: Kotlin.Kind.INTERFACE,
    simpleName: 'HttpClientEndpoint',
    interfaces: []
  };
  function Request(method, path, headers, content) {
    Request$Companion_getInstance();
    this.method = method;
    this.path = path;
    this.headers = headers;
    this.content = content;
  }
  function Request$Companion() {
    Request$Companion_instance = this;
    this.FORMAT_REGEX = Regex('\\{\\w+\\}');
  }
  Request$Companion.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Request$Companion_instance = null;
  function Request$Companion_getInstance() {
    if (Request$Companion_instance === null) {
      new Request$Companion();
    }
    return Request$Companion_instance;
  }
  Request.prototype.format_61zpoe$ = function (format_0, continuation_0, suspended) {
    var instance = new Coroutine$format_61zpoe$(this, format_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$format_61zpoe$($this, format_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$tmp$ = void 0;
    this.local$tmp$_0 = void 0;
    this.local$content = void 0;
    this.local$regex = void 0;
    this.local$replace_20wsma$result = void 0;
    this.local$match = void 0;
    this.local$lastStart = void 0;
    this.local$length = void 0;
    this.local$sb = void 0;
    this.local$foundMatch = void 0;
    this.local$tmp$_1 = void 0;
    this.local$transform$result = void 0;
    this.local$name = void 0;
    this.local$format = format_0;
  }
  Coroutine$format_61zpoe$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$format_61zpoe$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$format_61zpoe$.prototype.constructor = Coroutine$format_61zpoe$;
  Coroutine$format_61zpoe$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$format === void 0)
              this.local$format = '{METHOD}:{PATH}:{CONTENT}';
            this.state_0 = 2;
            this.result_0 = (this.local$tmp$ = this.$this.content) != null ? readAll(this.local$tmp$, this) : null;
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$tmp$_0 = this.result_0;
            this.local$content = this.local$tmp$_0 != null ? toString(this.local$tmp$_0, Charsets_getInstance().UTF_8) : null;
            this.local$regex = Request$Companion_getInstance().FORMAT_REGEX;
            replace_20wsma$break: do {
              this.local$match = this.local$regex.find_905azu$(this.local$format);
              if (this.local$match == null) {
                this.local$replace_20wsma$result = this.local$format.toString();
                break replace_20wsma$break;
              }
              this.local$lastStart = 0;
              this.local$length = this.local$format.length;
              this.local$sb = StringBuilder_init(this.local$length);
              do {
                this.local$foundMatch = this.local$match != null ? this.local$match : Kotlin.throwNPE();
                this.local$sb.append_ezbsdh$(this.local$format, this.local$lastStart, this.local$foundMatch.range.start);
                this.local$tmp$_1 = this.local$sb.append_gw00v9$;
                this.local$name = this.local$foundMatch.groupValues.get_za3lpa$(0);
                if (Kotlin.equals(this.local$name, '{METHOD}')) {
                  this.local$transform$result = this.$this.method.toString();
                }
                 else if (Kotlin.equals(this.local$name, '{PATH}')) {
                  this.local$transform$result = this.$this.path;
                }
                 else if (Kotlin.equals(this.local$name, '{CONTENT}')) {
                  this.local$transform$result = Kotlin.toString(this.local$content);
                }
                 else {
                  this.local$transform$result = this.local$name;
                }
                this.local$tmp$_1.call(this.local$sb, this.local$transform$result);
                this.local$lastStart = this.local$foundMatch.range.endInclusive + 1 | 0;
                this.local$match = this.local$foundMatch.next();
              }
               while (this.local$lastStart < this.local$length && this.local$match != null);
              if (this.local$lastStart < this.local$length) {
                this.local$sb.append_ezbsdh$(this.local$format, this.local$lastStart, this.local$length);
              }
              this.local$replace_20wsma$result = this.local$sb.toString();
            }
             while (false);
            return this.local$replace_20wsma$result;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  Request.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'Request',
    interfaces: []
  };
  Request.prototype.component1 = function () {
    return this.method;
  };
  Request.prototype.component2 = function () {
    return this.path;
  };
  Request.prototype.component3 = function () {
    return this.headers;
  };
  Request.prototype.component4 = function () {
    return this.content;
  };
  Request.prototype.copy_wintjk$ = function (method, path, headers, content) {
    return new Request(method === void 0 ? this.method : method, path === void 0 ? this.path : path, headers === void 0 ? this.headers : headers, content === void 0 ? this.content : content);
  };
  Request.prototype.toString = function () {
    return 'Request(method=' + Kotlin.toString(this.method) + (', path=' + Kotlin.toString(this.path)) + (', headers=' + Kotlin.toString(this.headers)) + (', content=' + Kotlin.toString(this.content)) + ')';
  };
  Request.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.method) | 0;
    result = result * 31 + Kotlin.hashCode(this.path) | 0;
    result = result * 31 + Kotlin.hashCode(this.headers) | 0;
    result = result * 31 + Kotlin.hashCode(this.content) | 0;
    return result;
  };
  Request.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.method, other.method) && Kotlin.equals(this.path, other.path) && Kotlin.equals(this.headers, other.headers) && Kotlin.equals(this.content, other.content)))));
  };
  function FakeHttpClient(defaultMessage) {
    if (defaultMessage === void 0)
      defaultMessage = '{}';
    HttpClient.call(this);
    this.defaultMessage = defaultMessage;
    this.log_0 = ArrayList_init();
    this.responsePointer_0 = 0;
    this.responses_0 = ArrayList_init();
  }
  FakeHttpClient.prototype.getResponse_0 = function (code, content) {
    var tmp$;
    return new HttpClient$Response(code, (tmp$ = HttpStatusMessage_getInstance().CODES.get_11rb$(code)) != null ? tmp$ : 'Code' + code, Http$Http$Headers_init([]), openAsync_0(content));
  };
  FakeHttpClient.prototype.addResponse_19mbxw$ = function (code, content) {
    var $receiver = this.responses_0;
    var element = this.getResponse_0(code, content);
    $receiver.add_11rb$(element);
  };
  FakeHttpClient.prototype.addOkResponse_61zpoe$ = function (content) {
    this.addResponse_19mbxw$(200, content);
  };
  FakeHttpClient.prototype.addNotFoundResponse_61zpoe$ = function (content) {
    this.addResponse_19mbxw$(404, content);
  };
  function FakeHttpClient$requestInternal$lambda(this$FakeHttpClient) {
    return function (it) {
      return this$FakeHttpClient.getResponse_0(200, this$FakeHttpClient.defaultMessage);
    };
  }
  FakeHttpClient.prototype.requestInternal_wintjk$$default = function (method, url, headers, content, continuation) {
    var tmp$, tmp$_0;
    var $receiver = this.log_0;
    var element = new Request(method, url, headers, content);
    $receiver.add_11rb$(element);
    if (this.responses_0.isEmpty())
      this.addOkResponse_61zpoe$(this.defaultMessage);
    tmp$_0 = this.responses_0;
    var index = (tmp$ = this.responsePointer_0, this.responsePointer_0 = tmp$ + 1 | 0, tmp$) % this.responses_0.size;
    return index >= 0 && index <= get_lastIndex_0(tmp$_0) ? tmp$_0.get_za3lpa$(index) : FakeHttpClient$requestInternal$lambda(this)(index);
  };
  FakeHttpClient.prototype.capture_b6n9uf$ = function (format_0, callback_0, continuation_0, suspended) {
    var instance = new Coroutine$capture_b6n9uf$(this, format_0, callback_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$capture_b6n9uf$($this, format_0, callback_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$start = void 0;
    this.local$end = void 0;
    this.local$$receiver = void 0;
    this.local$destination = void 0;
    this.local$tmp$ = void 0;
    this.local$item = void 0;
    this.local$tmp$_0 = void 0;
    this.local$closure$continuation = void 0;
    this.local$format = format_0;
    this.local$callback = callback_0;
  }
  Coroutine$capture_b6n9uf$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$capture_b6n9uf$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$capture_b6n9uf$.prototype.constructor = Coroutine$capture_b6n9uf$;
  Coroutine$capture_b6n9uf$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$format === void 0)
              this.local$format = '{METHOD}:{PATH}:{CONTENT}';
            this.local$start = this.$this.log_0.size;
            this.state_0 = 2;
            this.result_0 = this.local$callback(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$end = this.$this.log_0.size;
            this.local$$receiver = slice(this.$this.log_0, until(this.local$start, this.local$end));
            this.local$destination = ArrayList_init(collectionSizeOrDefault(this.local$$receiver, 10));
            this.local$tmp$ = this.local$$receiver.iterator();
            this.state_0 = 3;
            continue;
          case 3:
            if (!this.local$tmp$.hasNext()) {
              this.state_0 = 5;
              continue;
            }

            this.local$item = this.local$tmp$.next();
            this.local$tmp$_0 = this.local$destination.add_11rb$;
            this.local$closure$continuation = this;
            this.state_0 = 4;
            this.result_0 = this.local$item.format_61zpoe$(this.local$format, this.local$closure$continuation);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 4:
            this.local$tmp$_0.call(this.local$destination, this.local$closure$continuation.result_0);
            this.state_0 = 3;
            continue;
          case 5:
            return this.local$destination;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  FakeHttpClient.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'FakeHttpClient',
    interfaces: [HttpClient]
  };
  function FakeHttpClientEndpoint(defaultMessage) {
    if (defaultMessage === void 0)
      defaultMessage = '{}';
    this.defaultMessage = defaultMessage;
    this.log_0 = ArrayList_init();
    this.responsePointer_0 = 0;
    this.responses_0 = ArrayList_init();
  }
  FakeHttpClientEndpoint.prototype.getResponse_0 = function (code, content) {
    var tmp$;
    return new HttpClient$Response(code, (tmp$ = HttpStatusMessage_getInstance().CODES.get_11rb$(code)) != null ? tmp$ : 'Code' + code, Http$Http$Headers_init([]), openAsync_0(content));
  };
  FakeHttpClientEndpoint.prototype.addResponse_19mbxw$ = function (code, content) {
    var $receiver = this.responses_0;
    var element = this.getResponse_0(code, content);
    $receiver.add_11rb$(element);
  };
  FakeHttpClientEndpoint.prototype.addOkResponse_61zpoe$ = function (content) {
    this.addResponse_19mbxw$(200, content);
  };
  FakeHttpClientEndpoint.prototype.addNotFoundResponse_61zpoe$ = function (content) {
    this.addResponse_19mbxw$(404, content);
  };
  function FakeHttpClientEndpoint$request$lambda(this$FakeHttpClientEndpoint) {
    return function (it) {
      return this$FakeHttpClientEndpoint.getResponse_0(200, this$FakeHttpClientEndpoint.defaultMessage);
    };
  }
  FakeHttpClientEndpoint.prototype.request_v6tn8p$$default = function (method, path, headers, content, config, continuation) {
    var tmp$, tmp$_0;
    var $receiver = this.log_0;
    var element = new Request(method, path, headers, content);
    $receiver.add_11rb$(element);
    if (this.responses_0.isEmpty())
      this.addOkResponse_61zpoe$(this.defaultMessage);
    tmp$_0 = this.responses_0;
    var index = (tmp$ = this.responsePointer_0, this.responsePointer_0 = tmp$ + 1 | 0, tmp$) % this.responses_0.size;
    return index >= 0 && index <= get_lastIndex_0(tmp$_0) ? tmp$_0.get_za3lpa$(index) : FakeHttpClientEndpoint$request$lambda(this)(index);
  };
  FakeHttpClientEndpoint.prototype.capture_b6n9uf$ = function (format_0, callback_0, continuation_0, suspended) {
    var instance = new Coroutine$capture_b6n9uf$_0(this, format_0, callback_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$capture_b6n9uf$_0($this, format_0, callback_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$start = void 0;
    this.local$end = void 0;
    this.local$$receiver = void 0;
    this.local$destination = void 0;
    this.local$tmp$ = void 0;
    this.local$item = void 0;
    this.local$tmp$_0 = void 0;
    this.local$closure$continuation = void 0;
    this.local$format = format_0;
    this.local$callback = callback_0;
  }
  Coroutine$capture_b6n9uf$_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$capture_b6n9uf$_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$capture_b6n9uf$_0.prototype.constructor = Coroutine$capture_b6n9uf$_0;
  Coroutine$capture_b6n9uf$_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$format === void 0)
              this.local$format = '{METHOD}:{PATH}:{CONTENT}';
            this.local$start = this.$this.log_0.size;
            this.state_0 = 2;
            this.result_0 = this.local$callback(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$end = this.$this.log_0.size;
            this.local$$receiver = slice(this.$this.log_0, until(this.local$start, this.local$end));
            this.local$destination = ArrayList_init(collectionSizeOrDefault(this.local$$receiver, 10));
            this.local$tmp$ = this.local$$receiver.iterator();
            this.state_0 = 3;
            continue;
          case 3:
            if (!this.local$tmp$.hasNext()) {
              this.state_0 = 5;
              continue;
            }

            this.local$item = this.local$tmp$.next();
            this.local$tmp$_0 = this.local$destination.add_11rb$;
            this.local$closure$continuation = this;
            this.state_0 = 4;
            this.result_0 = this.local$item.format_61zpoe$(this.local$format, this.local$closure$continuation);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 4:
            this.local$tmp$_0.call(this.local$destination, this.local$closure$continuation.result_0);
            this.state_0 = 3;
            continue;
          case 5:
            return this.local$destination;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  FakeHttpClientEndpoint.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'FakeHttpClientEndpoint',
    interfaces: [HttpClientEndpoint]
  };
  function endpoint$ObjectLiteral(closure$endpoint, closure$client) {
    this.closure$endpoint = closure$endpoint;
    this.closure$client = closure$client;
  }
  endpoint$ObjectLiteral.prototype.request_v6tn8p$$default = function (method, path, headers, content, config, continuation) {
    var resolvedUrl = URIUtils_getInstance().resolve_puj7f4$(this.closure$endpoint, '/' + trimStart(path, Kotlin.charArrayOf(47))).toString();
    return this.closure$client.request_v6tn8p$(method, resolvedUrl, headers, content, config, continuation);
  };
  endpoint$ObjectLiteral.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    interfaces: [HttpClientEndpoint]
  };
  function endpoint($receiver, endpoint) {
    var client = $receiver;
    return new endpoint$ObjectLiteral(endpoint, client);
  }
  function HttpDate() {
    HttpDate_instance = this;
    this._format = new SimplerDateFormat('EEE, dd MMM yyyy HH:mm:ss z');
  }
  HttpDate.prototype.format_s8cxhz$ = function (date) {
    return this._format.format_s8cxhz$(date);
  };
  HttpDate.prototype.format_pa3fj$ = function (date) {
    return this._format.format_s8cxhz$(date.time);
  };
  HttpDate.prototype.format = function () {
    return this.format_s8cxhz$(STimeProvider_getInstance().currentTimeMillis());
  };
  HttpDate.prototype.parse_61zpoe$ = function (str) {
    return this._format.parse_61zpoe$(str);
  };
  HttpDate.prototype.parseOrNull_pdl1vj$ = function (str) {
    try {
      return str != null ? this._format.parse_61zpoe$(str) : null;
    }
     catch (e) {
      if (Kotlin.isType(e, Throwable)) {
        return null;
      }
       else
        throw e;
    }
  };
  HttpDate.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'HttpDate',
    interfaces: []
  };
  var HttpDate_instance = null;
  function HttpDate_getInstance() {
    if (HttpDate_instance === null) {
      new HttpDate();
    }
    return HttpDate_instance;
  }
  function HttpServer() {
    HttpServer$Companion_getInstance();
    this.requestConfig = new HttpServer$RequestConfig();
    this.actualPort_dj4hyl$_0 = 0;
  }
  function HttpServer$Companion() {
    HttpServer$Companion_instance = this;
  }
  HttpServer$Companion.prototype.invoke = function () {
    return get_defaultHttpFactory().createServer();
  };
  HttpServer$Companion.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var HttpServer$Companion_instance = null;
  function HttpServer$Companion_getInstance() {
    if (HttpServer$Companion_instance === null) {
      new HttpServer$Companion();
    }
    return HttpServer$Companion_instance;
  }
  function HttpServer$BaseRequest(uri, headers) {
    this.uri = uri;
    this.headers = headers;
    this.$delegate_2xdu1s$_0 = new Extra$Mixin();
    this.parts_ivoofc$_aszb59$_0 = lazy(HttpServer$BaseRequest$parts$lambda(this));
    this.path_ptae93$_0 = lazy(HttpServer$BaseRequest$path$lambda(this));
    this.queryString_jju9jl$_0 = lazy(HttpServer$BaseRequest$queryString$lambda(this));
    this.getParams_n9fo1g$_0 = lazy(HttpServer$BaseRequest$getParams$lambda(this));
    this.absoluteURI_v23cnh$_0 = lazy(HttpServer$BaseRequest$absoluteURI$lambda(this));
  }
  Object.defineProperty(HttpServer$BaseRequest.prototype, 'parts_ivoofc$_0', {
    get: function () {
      var $receiver = this.parts_ivoofc$_aszb59$_0;
      new Kotlin.PropertyMetadata('parts');
      return $receiver.value;
    }
  });
  Object.defineProperty(HttpServer$BaseRequest.prototype, 'path', {
    get: function () {
      var $receiver = this.path_ptae93$_0;
      new Kotlin.PropertyMetadata('path');
      return $receiver.value;
    }
  });
  Object.defineProperty(HttpServer$BaseRequest.prototype, 'queryString', {
    get: function () {
      var $receiver = this.queryString_jju9jl$_0;
      new Kotlin.PropertyMetadata('queryString');
      return $receiver.value;
    }
  });
  Object.defineProperty(HttpServer$BaseRequest.prototype, 'getParams', {
    get: function () {
      var $receiver = this.getParams_n9fo1g$_0;
      new Kotlin.PropertyMetadata('getParams');
      return $receiver.value;
    }
  });
  Object.defineProperty(HttpServer$BaseRequest.prototype, 'absoluteURI', {
    get: function () {
      var $receiver = this.absoluteURI_v23cnh$_0;
      new Kotlin.PropertyMetadata('absoluteURI');
      return $receiver.value;
    }
  });
  Object.defineProperty(HttpServer$BaseRequest.prototype, 'extra', {
    get: function () {
      return this.$delegate_2xdu1s$_0.extra;
    },
    set: function (tmp$) {
      this.$delegate_2xdu1s$_0.extra = tmp$;
    }
  });
  function HttpServer$BaseRequest$parts$lambda(this$BaseRequest) {
    return function () {
      return split(this$BaseRequest.uri, Kotlin.charArrayOf(63), void 0, 2);
    };
  }
  function HttpServer$BaseRequest$path$lambda(this$BaseRequest) {
    return function () {
      return this$BaseRequest.parts_ivoofc$_0.get_za3lpa$(0);
    };
  }
  function HttpServer$BaseRequest$queryString$lambda(this$BaseRequest) {
    return function () {
      var $receiver = this$BaseRequest.parts_ivoofc$_0;
      return 1 >= 0 && 1 <= get_lastIndex_0($receiver) ? $receiver.get_za3lpa$(1) : '';
    };
  }
  function HttpServer$BaseRequest$getParams$lambda(this$BaseRequest) {
    return function () {
      return QueryString_getInstance().decode_6bul2c$(this$BaseRequest.queryString);
    };
  }
  function HttpServer$BaseRequest$absoluteURI$lambda(this$BaseRequest) {
    return function () {
      return this$BaseRequest.uri;
    };
  }
  HttpServer$BaseRequest.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'BaseRequest',
    interfaces: [Extra]
  };
  function HttpServer$WsRequest(uri, headers) {
    HttpServer$BaseRequest.call(this, uri, headers);
  }
  HttpServer$WsRequest.prototype.sendSafe_61zpoe$ = function (msg) {
    try {
      this.send_61zpoe$(msg);
    }
     catch (e) {
      if (Kotlin.isType(e, Throwable)) {
        printStackTrace(e);
      }
       else
        throw e;
    }
  };
  HttpServer$WsRequest.prototype.sendSafe_fqrh44$ = function (msg) {
    try {
      this.send_fqrh44$(msg);
    }
     catch (e) {
      if (Kotlin.isType(e, Throwable)) {
        printStackTrace(e);
      }
       else
        throw e;
    }
  };
  function HttpServer$WsRequest$stringMessageStream$lambda$lambda(this$_0) {
    return function (it_0, continuation_0, suspended) {
      var instance = new Coroutine$HttpServer$WsRequest$stringMessageStream$lambda$lambda(this$_0, it_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$HttpServer$WsRequest$stringMessageStream$lambda$lambda(this$_0, it_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$this$ = this$_0;
    this.local$it = it_0;
  }
  Coroutine$HttpServer$WsRequest$stringMessageStream$lambda$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$HttpServer$WsRequest$stringMessageStream$lambda$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$HttpServer$WsRequest$stringMessageStream$lambda$lambda.prototype.constructor = Coroutine$HttpServer$WsRequest$stringMessageStream$lambda$lambda;
  Coroutine$HttpServer$WsRequest$stringMessageStream$lambda$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            return this.local$this$.yield_trkh7z$(this.local$it), Unit;
          case 1:
            throw this.exception_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function HttpServer$WsRequest$stringMessageStream$lambda$lambda_0(this$_0) {
    return function (continuation_0, suspended) {
      var instance = new Coroutine$HttpServer$WsRequest$stringMessageStream$lambda$lambda_0(this$_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$HttpServer$WsRequest$stringMessageStream$lambda$lambda_0(this$_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$this$ = this$_0;
  }
  Coroutine$HttpServer$WsRequest$stringMessageStream$lambda$lambda_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$HttpServer$WsRequest$stringMessageStream$lambda$lambda_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$HttpServer$WsRequest$stringMessageStream$lambda$lambda_0.prototype.constructor = Coroutine$HttpServer$WsRequest$stringMessageStream$lambda$lambda_0;
  Coroutine$HttpServer$WsRequest$stringMessageStream$lambda$lambda_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            return this.local$this$.close(), Unit;
          case 1:
            throw this.exception_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function HttpServer$WsRequest$stringMessageStream$lambda(this$WsRequest) {
    return function ($receiver) {
      this$WsRequest.onStringMessage_2errf5$(HttpServer$WsRequest$stringMessageStream$lambda$lambda($receiver));
      this$WsRequest.onClose_g2bo5h$(HttpServer$WsRequest$stringMessageStream$lambda$lambda_0($receiver));
      return Unit;
    };
  }
  HttpServer$WsRequest.prototype.stringMessageStream = function () {
    return asyncGenerate3(HttpServer$WsRequest$stringMessageStream$lambda(this));
  };
  function HttpServer$WsRequest$binaryMessageStream$lambda$lambda(this$_0) {
    return function (it_0, continuation_0, suspended) {
      var instance = new Coroutine$HttpServer$WsRequest$binaryMessageStream$lambda$lambda(this$_0, it_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$HttpServer$WsRequest$binaryMessageStream$lambda$lambda(this$_0, it_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$this$ = this$_0;
    this.local$it = it_0;
  }
  Coroutine$HttpServer$WsRequest$binaryMessageStream$lambda$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$HttpServer$WsRequest$binaryMessageStream$lambda$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$HttpServer$WsRequest$binaryMessageStream$lambda$lambda.prototype.constructor = Coroutine$HttpServer$WsRequest$binaryMessageStream$lambda$lambda;
  Coroutine$HttpServer$WsRequest$binaryMessageStream$lambda$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            return this.local$this$.yield_trkh7z$(this.local$it), Unit;
          case 1:
            throw this.exception_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function HttpServer$WsRequest$binaryMessageStream$lambda$lambda_0(this$_0) {
    return function (continuation_0, suspended) {
      var instance = new Coroutine$HttpServer$WsRequest$binaryMessageStream$lambda$lambda_0(this$_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$HttpServer$WsRequest$binaryMessageStream$lambda$lambda_0(this$_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$this$ = this$_0;
  }
  Coroutine$HttpServer$WsRequest$binaryMessageStream$lambda$lambda_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$HttpServer$WsRequest$binaryMessageStream$lambda$lambda_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$HttpServer$WsRequest$binaryMessageStream$lambda$lambda_0.prototype.constructor = Coroutine$HttpServer$WsRequest$binaryMessageStream$lambda$lambda_0;
  Coroutine$HttpServer$WsRequest$binaryMessageStream$lambda$lambda_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            return this.local$this$.close(), Unit;
          case 1:
            throw this.exception_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function HttpServer$WsRequest$binaryMessageStream$lambda(this$WsRequest) {
    return function ($receiver) {
      this$WsRequest.onBinaryMessage_e05lat$(HttpServer$WsRequest$binaryMessageStream$lambda$lambda($receiver));
      this$WsRequest.onClose_g2bo5h$(HttpServer$WsRequest$binaryMessageStream$lambda$lambda_0($receiver));
      return Unit;
    };
  }
  HttpServer$WsRequest.prototype.binaryMessageStream = function () {
    return asyncGenerate3(HttpServer$WsRequest$binaryMessageStream$lambda(this));
  };
  function HttpServer$WsRequest$anyMessageStream$lambda$lambda(this$_0) {
    return function (it_0, continuation_0, suspended) {
      var instance = new Coroutine$HttpServer$WsRequest$anyMessageStream$lambda$lambda(this$_0, it_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$HttpServer$WsRequest$anyMessageStream$lambda$lambda(this$_0, it_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$this$ = this$_0;
    this.local$it = it_0;
  }
  Coroutine$HttpServer$WsRequest$anyMessageStream$lambda$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$HttpServer$WsRequest$anyMessageStream$lambda$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$HttpServer$WsRequest$anyMessageStream$lambda$lambda.prototype.constructor = Coroutine$HttpServer$WsRequest$anyMessageStream$lambda$lambda;
  Coroutine$HttpServer$WsRequest$anyMessageStream$lambda$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            return this.local$this$.yield_trkh7z$(this.local$it), Unit;
          case 1:
            throw this.exception_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function HttpServer$WsRequest$anyMessageStream$lambda$lambda_0(this$_0) {
    return function (it_0, continuation_0, suspended) {
      var instance = new Coroutine$HttpServer$WsRequest$anyMessageStream$lambda$lambda_0(this$_0, it_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$HttpServer$WsRequest$anyMessageStream$lambda$lambda_0(this$_0, it_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$this$ = this$_0;
    this.local$it = it_0;
  }
  Coroutine$HttpServer$WsRequest$anyMessageStream$lambda$lambda_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$HttpServer$WsRequest$anyMessageStream$lambda$lambda_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$HttpServer$WsRequest$anyMessageStream$lambda$lambda_0.prototype.constructor = Coroutine$HttpServer$WsRequest$anyMessageStream$lambda$lambda_0;
  Coroutine$HttpServer$WsRequest$anyMessageStream$lambda$lambda_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            return this.local$this$.yield_trkh7z$(this.local$it), Unit;
          case 1:
            throw this.exception_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function HttpServer$WsRequest$anyMessageStream$lambda$lambda_1(this$_0) {
    return function (continuation_0, suspended) {
      var instance = new Coroutine$HttpServer$WsRequest$anyMessageStream$lambda$lambda_1(this$_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$HttpServer$WsRequest$anyMessageStream$lambda$lambda_1(this$_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$this$ = this$_0;
  }
  Coroutine$HttpServer$WsRequest$anyMessageStream$lambda$lambda_1.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$HttpServer$WsRequest$anyMessageStream$lambda$lambda_1.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$HttpServer$WsRequest$anyMessageStream$lambda$lambda_1.prototype.constructor = Coroutine$HttpServer$WsRequest$anyMessageStream$lambda$lambda_1;
  Coroutine$HttpServer$WsRequest$anyMessageStream$lambda$lambda_1.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            return this.local$this$.close(), Unit;
          case 1:
            throw this.exception_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function HttpServer$WsRequest$anyMessageStream$lambda(this$WsRequest) {
    return function ($receiver) {
      this$WsRequest.onStringMessage_2errf5$(HttpServer$WsRequest$anyMessageStream$lambda$lambda($receiver));
      this$WsRequest.onBinaryMessage_e05lat$(HttpServer$WsRequest$anyMessageStream$lambda$lambda_0($receiver));
      this$WsRequest.onClose_g2bo5h$(HttpServer$WsRequest$anyMessageStream$lambda$lambda_1($receiver));
      return Unit;
    };
  }
  HttpServer$WsRequest.prototype.anyMessageStream = function () {
    return asyncGenerate3(HttpServer$WsRequest$anyMessageStream$lambda(this));
  };
  HttpServer$WsRequest.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'WsRequest',
    interfaces: [HttpServer$BaseRequest]
  };
  function HttpServer$RequestConfig(beforeSendHeadersInterceptors) {
    if (beforeSendHeadersInterceptors === void 0)
      beforeSendHeadersInterceptors = lmapOf([]);
    this.beforeSendHeadersInterceptors = beforeSendHeadersInterceptors;
    this.$delegate_kjpl2l$_0 = new Extra$Mixin();
  }
  HttpServer$RequestConfig.prototype.registerComponent_xs5mav$ = function (component, dependsOn) {
    throw new NotImplementedError_init();
  };
  Object.defineProperty(HttpServer$RequestConfig.prototype, 'extra', {
    get: function () {
      return this.$delegate_kjpl2l$_0.extra;
    },
    set: function (tmp$) {
      this.$delegate_kjpl2l$_0.extra = tmp$;
    }
  });
  HttpServer$RequestConfig.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'RequestConfig',
    interfaces: [Extra]
  };
  HttpServer$RequestConfig.prototype.component1 = function () {
    return this.beforeSendHeadersInterceptors;
  };
  HttpServer$RequestConfig.prototype.copy_cbjoms$ = function (beforeSendHeadersInterceptors) {
    return new HttpServer$RequestConfig(beforeSendHeadersInterceptors === void 0 ? this.beforeSendHeadersInterceptors : beforeSendHeadersInterceptors);
  };
  HttpServer$RequestConfig.prototype.toString = function () {
    return 'RequestConfig(beforeSendHeadersInterceptors=' + Kotlin.toString(this.beforeSendHeadersInterceptors) + ')';
  };
  HttpServer$RequestConfig.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.beforeSendHeadersInterceptors) | 0;
    return result;
  };
  HttpServer$RequestConfig.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.beforeSendHeadersInterceptors, other.beforeSendHeadersInterceptors))));
  };
  function HttpServer$Request(method, uri, headers, requestConfig) {
    if (requestConfig === void 0)
      requestConfig = new HttpServer$RequestConfig();
    HttpServer$BaseRequest.call(this, uri, headers);
    this.method = method;
    this.requestConfig = requestConfig;
    this.finalizers = ArrayList_init();
    this.headersSent_5ao1rb$_0 = false;
    this.finalizingHeaders_ex4gi4$_0 = false;
    this.resHeaders_f2i43b$_0 = ArrayList_init();
  }
  HttpServer$Request.prototype.getHeader_61zpoe$ = function (key) {
    return this.headers.get_61zpoe$(key);
  };
  HttpServer$Request.prototype.getHeaderList_61zpoe$ = function (key) {
    return this.headers.getAll_61zpoe$(key);
  };
  HttpServer$Request.prototype.ensureHeadersNotSent_smyc0q$_0 = function () {
    if (this.headersSent_5ao1rb$_0) {
      println('Sent headers: ' + this.resHeaders_f2i43b$_0);
      throw new IOException('Headers already sent');
    }
  };
  function HttpServer$Request$removeHeader$lambda(closure$key) {
    return function (it) {
      return equals(it.first, closure$key, true);
    };
  }
  HttpServer$Request.prototype.removeHeader_61zpoe$ = function (key) {
    this.ensureHeadersNotSent_smyc0q$_0();
    removeAll(this.resHeaders_f2i43b$_0, HttpServer$Request$removeHeader$lambda(key));
  };
  HttpServer$Request.prototype.addHeader_puj7f4$ = function (key, value) {
    this.ensureHeadersNotSent_smyc0q$_0();
    var $receiver = this.resHeaders_f2i43b$_0;
    var element = to(key, value);
    $receiver.add_11rb$(element);
  };
  HttpServer$Request.prototype.replaceHeader_puj7f4$ = function (key, value) {
    this.ensureHeadersNotSent_smyc0q$_0();
    this.removeHeader_61zpoe$(key);
    this.addHeader_puj7f4$(key, value);
  };
  HttpServer$Request.prototype._write_mj6st8$ = function (data, offset, size, callback$default) {
    if (offset === void 0)
      offset = 0;
    if (size === void 0)
      size = data.length - offset | 0;
    callback$default ? callback$default(data, offset, size) : this._write_mj6st8$$default(data, offset, size);
  };
  HttpServer$Request.prototype.handler_949j03$ = function (handler_0, continuation_0, suspended) {
    var instance = new Coroutine$handler_949j03$(this, handler_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$handler_949j03$($this, handler_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$handler = handler_0;
  }
  Coroutine$handler_949j03$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$handler_949j03$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$handler_949j03$.prototype.constructor = Coroutine$handler_949j03$;
  Coroutine$handler_949j03$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this._handler_949j03$(this.local$handler, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  HttpServer$Request.prototype.endHandler_o14v8n$ = function (handler_0, continuation_0, suspended) {
    var instance = new Coroutine$endHandler_o14v8n$(this, handler_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$endHandler_o14v8n$($this, handler_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$handler = handler_0;
  }
  Coroutine$endHandler_o14v8n$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$endHandler_o14v8n$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$endHandler_o14v8n$.prototype.constructor = Coroutine$endHandler_o14v8n$;
  Coroutine$endHandler_o14v8n$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this._endHandler_o14v8n$(this.local$handler, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  HttpServer$Request.prototype.setStatus_19mbxw$ = function (code, message) {
    if (message === void 0)
      message = HttpStatusMessage_getInstance().invoke_za3lpa$(code);
    this.ensureHeadersNotSent_smyc0q$_0();
    this._setStatus_19mbxw$(code, message);
  };
  HttpServer$Request.prototype.flushHeaders_8s3zmt$_0 = function (continuation_0, suspended) {
    var instance = new Coroutine$flushHeaders_8s3zmt$_0(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$flushHeaders_8s3zmt$_0($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$tmp$ = void 0;
    this.local$interceptor = void 0;
  }
  Coroutine$flushHeaders_8s3zmt$_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$flushHeaders_8s3zmt$_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$flushHeaders_8s3zmt$_0.prototype.constructor = Coroutine$flushHeaders_8s3zmt$_0;
  Coroutine$flushHeaders_8s3zmt$_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.$this.headersSent_5ao1rb$_0) {
              return;
            }
             else {
              this.state_0 = 2;
              continue;
            }

          case 1:
            throw this.exception_0;
          case 2:
            if (this.$this.finalizingHeaders_ex4gi4$_0)
              invalidOp("Can't write while finalizing headers");
            this.$this.finalizingHeaders_ex4gi4$_0 = true;
            this.local$tmp$ = this.$this.requestConfig.beforeSendHeadersInterceptors.entries.iterator();
            this.state_0 = 3;
            continue;
          case 3:
            if (!this.local$tmp$.hasNext()) {
              this.state_0 = 5;
              continue;
            }

            this.local$interceptor = this.local$tmp$.next();
            this.state_0 = 4;
            this.result_0 = this.local$interceptor.value(this.$this, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 4:
            this.state_0 = 3;
            continue;
          case 5:
            this.$this.headersSent_5ao1rb$_0 = true;
            this.$this._sendHeaders_5dayij$(new Http$Headers(this.$this.resHeaders_f2i43b$_0));
            return;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  HttpServer$Request.prototype.write_mj6st8$$default = function (buffer_0, offset_0, len_0, continuation_0, suspended) {
    var instance = new Coroutine$write_mj6st8$$default(this, buffer_0, offset_0, len_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$write_mj6st8$$default($this, buffer_0, offset_0, len_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$buffer = buffer_0;
    this.local$offset = offset_0;
    this.local$len = len_0;
  }
  Coroutine$write_mj6st8$$default.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$write_mj6st8$$default.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$write_mj6st8$$default.prototype.constructor = Coroutine$write_mj6st8$$default;
  Coroutine$write_mj6st8$$default.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.flushHeaders_8s3zmt$_0(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.$this._write_mj6st8$(this.local$buffer, this.local$offset, this.local$len);
            return;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  HttpServer$Request.prototype.end = function (continuation_0, suspended) {
    var instance = new Coroutine$end(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$end($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$tmp$ = void 0;
    this.local$finalizer = void 0;
  }
  Coroutine$end.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$end.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$end.prototype.constructor = Coroutine$end;
  Coroutine$end.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.flushHeaders_8s3zmt$_0(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.$this._end();
            this.local$tmp$ = this.$this.finalizers.iterator();
            this.state_0 = 3;
            continue;
          case 3:
            if (!this.local$tmp$.hasNext()) {
              this.state_0 = 5;
              continue;
            }

            this.local$finalizer = this.local$tmp$.next();
            this.state_0 = 4;
            this.result_0 = this.local$finalizer(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 4:
            this.state_0 = 3;
            continue;
          case 5:
            return;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  HttpServer$Request.prototype.end_fqrh44$ = function (data_0, continuation_0, suspended) {
    var instance = new Coroutine$end_fqrh44$(this, data_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$end_fqrh44$($this, data_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$data = data_0;
  }
  Coroutine$end_fqrh44$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$end_fqrh44$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$end_fqrh44$.prototype.constructor = Coroutine$end_fqrh44$;
  Coroutine$end_fqrh44$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.$this.replaceHeader_puj7f4$('Content-Length', this.local$data.length.toString());
            this.state_0 = 2;
            this.result_0 = this.$this.flushHeaders_8s3zmt$_0(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.$this._write_mj6st8$(this.local$data, 0, this.local$data.length);
            this.state_0 = 3;
            this.result_0 = this.$this.end(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            return;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  HttpServer$Request.prototype.write_6zdodq$ = function (data_0, charset_0, continuation_0, suspended) {
    var instance = new Coroutine$write_6zdodq$(this, data_0, charset_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$write_6zdodq$($this, data_0, charset_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$data = data_0;
    this.local$charset = charset_0;
  }
  Coroutine$write_6zdodq$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$write_6zdodq$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$write_6zdodq$.prototype.constructor = Coroutine$write_6zdodq$;
  Coroutine$write_6zdodq$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$charset === void 0)
              this.local$charset = Charsets_getInstance().UTF_8;
            this.state_0 = 2;
            this.result_0 = this.$this.flushHeaders_8s3zmt$_0(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.$this._write_mj6st8$(toByteArray(this.local$data, this.local$charset));
            return;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  HttpServer$Request.prototype.end_6zdodq$ = function (data_0, charset_0, continuation_0, suspended) {
    var instance = new Coroutine$end_6zdodq$(this, data_0, charset_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$end_6zdodq$($this, data_0, charset_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$data = data_0;
    this.local$charset = charset_0;
  }
  Coroutine$end_6zdodq$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$end_6zdodq$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$end_6zdodq$.prototype.constructor = Coroutine$end_6zdodq$;
  Coroutine$end_6zdodq$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$charset === void 0)
              this.local$charset = Charsets_getInstance().UTF_8;
            this.state_0 = 2;
            this.result_0 = this.$this.end_fqrh44$(toByteArray(this.local$data, this.local$charset), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  HttpServer$Request.prototype.close = function (continuation_0, suspended) {
    var instance = new Coroutine$close(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$close($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
  }
  Coroutine$close.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$close.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$close.prototype.constructor = Coroutine$close;
  Coroutine$close.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.end(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  HttpServer$Request.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'Request',
    interfaces: [AsyncOutputStream, HttpServer$BaseRequest]
  };
  HttpServer.prototype.websocketHandlerInternal_d3ycxo$ = function (handler, continuation) {
  };
  HttpServer.prototype.httpHandlerInternal_b59mbs$ = function (handler, continuation) {
  };
  function HttpServer$allHandler$lambda$lambda(closure$handler_0) {
    return function (it_0, continuation_0, suspended) {
      var instance = new Coroutine$HttpServer$allHandler$lambda$lambda(closure$handler_0, it_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$HttpServer$allHandler$lambda$lambda(closure$handler_0, it_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$closure$handler = closure$handler_0;
    this.local$it = it_0;
  }
  Coroutine$HttpServer$allHandler$lambda$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$HttpServer$allHandler$lambda$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$HttpServer$allHandler$lambda$lambda.prototype.constructor = Coroutine$HttpServer$allHandler$lambda$lambda;
  Coroutine$HttpServer$allHandler$lambda$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$closure$handler(this.local$it, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function HttpServer$allHandler$lambda$lambda_0(closure$handler_0) {
    return function (it_0, continuation_0, suspended) {
      var instance = new Coroutine$HttpServer$allHandler$lambda$lambda_0(closure$handler_0, it_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$HttpServer$allHandler$lambda$lambda_0(closure$handler_0, it_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$closure$handler = closure$handler_0;
    this.local$it = it_0;
  }
  Coroutine$HttpServer$allHandler$lambda$lambda_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$HttpServer$allHandler$lambda$lambda_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$HttpServer$allHandler$lambda$lambda_0.prototype.constructor = Coroutine$HttpServer$allHandler$lambda$lambda_0;
  Coroutine$HttpServer$allHandler$lambda$lambda_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$closure$handler(this.local$it, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  HttpServer.prototype.allHandler_w09d7d$ = function (handler_0, continuation_0, suspended) {
    var instance = new Coroutine$allHandler_w09d7d$(this, handler_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$allHandler_w09d7d$($this, handler_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$closure$continuation = void 0;
    this.local$handler = handler_0;
  }
  Coroutine$allHandler_w09d7d$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$allHandler_w09d7d$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$allHandler_w09d7d$.prototype.constructor = Coroutine$allHandler_w09d7d$;
  Coroutine$allHandler_w09d7d$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$closure$continuation = this;
            this.state_0 = 2;
            this.result_0 = this.$this.websocketHandler_d3ycxo$(HttpServer$allHandler$lambda$lambda(this.local$handler), this.local$closure$continuation);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.$this.httpHandler_b59mbs$(HttpServer$allHandler$lambda$lambda_0(this.local$handler), this.local$closure$continuation);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            return this.$this;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function HttpServer$listenInternal$lambda(it) {
    return Unit;
  }
  HttpServer.prototype.listenInternal_19mbxw$$default = function (port_0, host_0, continuation_0, suspended) {
    var instance = new Coroutine$listenInternal_19mbxw$$default(this, port_0, host_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$listenInternal_19mbxw$$default($this, port_0, host_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$deferred = void 0;
    this.local$port = port_0;
    this.local$host = host_0;
  }
  Coroutine$listenInternal_19mbxw$$default.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$listenInternal_19mbxw$$default.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$listenInternal_19mbxw$$default.prototype.constructor = Coroutine$listenInternal_19mbxw$$default;
  Coroutine$listenInternal_19mbxw$$default.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$deferred = new Promise$Deferred();
            this.local$deferred.onCancel.invoke_qlkmfe$(HttpServer$listenInternal$lambda);
            this.state_0 = 2;
            this.result_0 = this.local$deferred.promise.await(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  HttpServer.prototype.listenInternal_19mbxw$ = function (port, host, continuation, callback$default) {
    if (host === void 0)
      host = '127.0.0.1';
    return callback$default ? callback$default(port, host, continuation) : this.listenInternal_19mbxw$$default(port, host, continuation);
  };
  Object.defineProperty(HttpServer.prototype, 'actualPort', {
    get: function () {
      return this.actualPort_dj4hyl$_0;
    }
  });
  HttpServer.prototype.closeInternal = function (continuation) {
  };
  HttpServer.prototype.websocketHandler_d3ycxo$ = function (handler_0, continuation_0, suspended) {
    var instance = new Coroutine$websocketHandler_d3ycxo$(this, handler_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$websocketHandler_d3ycxo$($this, handler_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$handler = handler_0;
  }
  Coroutine$websocketHandler_d3ycxo$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$websocketHandler_d3ycxo$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$websocketHandler_d3ycxo$.prototype.constructor = Coroutine$websocketHandler_d3ycxo$;
  Coroutine$websocketHandler_d3ycxo$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.websocketHandlerInternal_d3ycxo$(this.local$handler, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.$this;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  HttpServer.prototype.httpHandler_b59mbs$ = function (handler_0, continuation_0, suspended) {
    var instance = new Coroutine$httpHandler_b59mbs$(this, handler_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$httpHandler_b59mbs$($this, handler_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$handler = handler_0;
  }
  Coroutine$httpHandler_b59mbs$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$httpHandler_b59mbs$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$httpHandler_b59mbs$.prototype.constructor = Coroutine$httpHandler_b59mbs$;
  Coroutine$httpHandler_b59mbs$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.httpHandlerInternal_b59mbs$(this.local$handler, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.$this;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  HttpServer.prototype.listen_19mbxw$ = function (port_0, host_0, continuation_0, suspended) {
    var instance = new Coroutine$listen_19mbxw$(this, port_0, host_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$listen_19mbxw$($this, port_0, host_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$port = port_0;
    this.local$host = host_0;
  }
  Coroutine$listen_19mbxw$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$listen_19mbxw$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$listen_19mbxw$.prototype.constructor = Coroutine$listen_19mbxw$;
  Coroutine$listen_19mbxw$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$port === void 0)
              this.local$port = 0;
            if (this.local$host === void 0)
              this.local$host = '127.0.0.1';
            this.state_0 = 2;
            this.result_0 = this.$this.listenInternal_19mbxw$(this.local$port, this.local$host, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.$this;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  HttpServer.prototype.listen_iq1xc0$ = function (port_0, host_0, handler_0, continuation_0, suspended) {
    var instance = new Coroutine$listen_iq1xc0$(this, port_0, host_0, handler_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$listen_iq1xc0$($this, port_0, host_0, handler_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$port = port_0;
    this.local$host = host_0;
    this.local$handler = handler_0;
  }
  Coroutine$listen_iq1xc0$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$listen_iq1xc0$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$listen_iq1xc0$.prototype.constructor = Coroutine$listen_iq1xc0$;
  Coroutine$listen_iq1xc0$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$port === void 0)
              this.local$port = 0;
            if (this.local$host === void 0)
              this.local$host = '127.0.0.1';
            this.state_0 = 2;
            this.result_0 = this.$this.httpHandler_b59mbs$(this.local$handler, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.$this.listen_19mbxw$(this.local$port, this.local$host, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            return this.$this;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  HttpServer.prototype.close = function (continuation_0, suspended) {
    var instance = new Coroutine$close_0(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$close_0($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
  }
  Coroutine$close_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$close_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$close_0.prototype.constructor = Coroutine$close_0;
  Coroutine$close_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.closeInternal(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  HttpServer.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'HttpServer',
    interfaces: [AsyncCloseable]
  };
  function FakeRequest(method, uri, headers, body, requestConfig) {
    if (headers === void 0)
      headers = Http$Http$Headers_init([]);
    if (body === void 0)
      body = new Int8Array(0);
    HttpServer$Request.call(this, method, uri, headers, requestConfig);
    this.body = body;
    this.buf_0 = ByteArrayBuilder_init();
    this.outputHeaders = Http$Http$Headers_init([]);
    this.outputStatusCode = 0;
    this.outputStatusMessage = '';
    this.output = '';
    this.log = ArrayList_init();
  }
  FakeRequest.prototype._handler_949j03$ = function (handler, continuation) {
    var $receiver = this.log;
    var element = '_handler()';
    $receiver.add_11rb$(element);
    handler(this.body);
  };
  FakeRequest.prototype._endHandler_o14v8n$ = function (handler, continuation) {
    var $receiver = this.log;
    var element = '_endHandler()';
    $receiver.add_11rb$(element);
    handler();
  };
  FakeRequest.prototype._setStatus_19mbxw$ = function (code, message) {
    var $receiver = this.log;
    var element = '_setStatus(' + code + ', ' + message + ')';
    $receiver.add_11rb$(element);
    this.outputStatusCode = code;
    this.outputStatusMessage = message;
  };
  FakeRequest.prototype._sendHeaders_5dayij$ = function (headers) {
    var $receiver = this.log;
    var element = '_sendHeaders(' + headers + ')';
    $receiver.add_11rb$(element);
    this.outputHeaders = headers;
  };
  FakeRequest.prototype._write_mj6st8$$default = function (data, offset, size) {
    var tmp$ = this.log;
    var toIndex = offset + size | 0;
    var element = '_write(' + toString(data.slice(offset, toIndex), Charsets_getInstance().UTF_8) + ')';
    tmp$.add_11rb$(element);
    this.buf_0.append_mj6st8$(data, offset, size);
  };
  FakeRequest.prototype._end = function () {
    this.log.add_11rb$('_end()');
    this.output = toString(this.buf_0.toByteArray(), Charsets_getInstance().UTF_8);
  };
  FakeRequest.prototype.toString = function () {
    return this.outputStatusCode.toString() + ':' + this.outputStatusMessage + ':' + this.outputHeaders + ':' + this.output;
  };
  FakeRequest.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'FakeRequest',
    interfaces: [HttpServer$Request]
  };
  function HttpRestClient(endpoint) {
    this.endpoint = endpoint;
  }
  var emptyMap = Kotlin.kotlin.collections.emptyMap_q3lmfv$;
  HttpRestClient.prototype.request_3b91g6$ = function (method_0, path_0, request_0, mapper_0, continuation_0, suspended) {
    var instance = new Coroutine$request_3b91g6$(this, method_0, path_0, request_0, mapper_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$request_3b91g6$($this, method_0, path_0, request_0, mapper_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$tmp$ = void 0;
    this.local$tmp$_0 = void 0;
    this.local$tmp$_1 = void 0;
    this.local$tmp$_2 = void 0;
    this.local$tmp$_3 = void 0;
    this.local$$this = void 0;
    this.local$tmp$_4 = void 0;
    this.local$requestContent = void 0;
    this.local$result = void 0;
    this.local$stringResult = void 0;
    this.local$method = method_0;
    this.local$path = path_0;
    this.local$request = request_0;
    this.local$mapper = mapper_0;
  }
  Coroutine$request_3b91g6$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$request_3b91g6$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$request_3b91g6$.prototype.constructor = Coroutine$request_3b91g6$;
  Coroutine$request_3b91g6$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$mapper === void 0)
              this.local$mapper = Mapper;
            if (this.local$request != null) {
              this.local$$this = Json_getInstance();
              if (false) {
                this.local$tmp$_4 = this.local$$this.encodePrettyUntyped_hvn9da$(this.local$mapper.toUntyped_b1ce0a$(Kotlin.getKClass(Any), this.local$request));
              }
               else {
                this.local$tmp$_4 = this.local$$this.encodeUntyped_s8jyv4$(this.local$mapper.toUntyped_b1ce0a$(Kotlin.getKClass(Any), this.local$request));
              }
              this.local$tmp$_3 = this.local$tmp$_4;
            }
             else
              this.local$tmp$_3 = null;
            this.local$requestContent = this.local$tmp$_3;
            this.local$tmp$_0 = this.$this.endpoint;
            this.local$tmp$ = this.local$requestContent != null ? openAsync_0(this.local$requestContent) : null;
            this.state_0 = 2;
            this.result_0 = this.local$tmp$_0.request_v6tn8p$(this.local$method, this.local$path, Http$Http$Headers_init([to('Content-Type', 'application/json')]), this.local$tmp$, void 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$result = this.result_0;
            this.state_0 = 3;
            this.result_0 = this.local$result.checkErrors(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            this.state_0 = 4;
            this.result_0 = this.local$result.readAllString_qa9gbo$(void 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 4:
            this.local$stringResult = this.result_0;
            try {
              this.local$tmp$_2 = (this.local$tmp$_1 = Json_getInstance().decode_61zpoe$(this.local$stringResult)) != null ? this.local$tmp$_1 : emptyMap();
            }
             catch (e) {
              if (Kotlin.isType(e, IOException)) {
                this.local$tmp$_2 = emptyMap();
              }
               else
                throw e;
            }

            return this.local$tmp$_2;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  HttpRestClient.prototype.head_61zpoe$ = function (path, continuation) {
    return this.request_3b91g6$(Http$Method$Companion_getInstance().HEAD, path, null, void 0, continuation);
  };
  HttpRestClient.prototype.delete_61zpoe$ = function (path, continuation) {
    return this.request_3b91g6$(Http$Method$Companion_getInstance().DELETE, path, null, void 0, continuation);
  };
  HttpRestClient.prototype.get_61zpoe$ = function (path, continuation) {
    return this.request_3b91g6$(Http$Method$Companion_getInstance().GET, path, null, void 0, continuation);
  };
  HttpRestClient.prototype.put_bm4g0d$ = function (path, request, continuation) {
    return this.request_3b91g6$(Http$Method$Companion_getInstance().PUT, path, request, void 0, continuation);
  };
  HttpRestClient.prototype.post_bm4g0d$ = function (path, request, continuation) {
    return this.request_3b91g6$(Http$Method$Companion_getInstance().POST, path, request, void 0, continuation);
  };
  HttpRestClient.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'HttpRestClient',
    interfaces: []
  };
  function rest($receiver) {
    return new HttpRestClient($receiver);
  }
  function rest_0($receiver, endpoint_0) {
    return new HttpRestClient(endpoint($receiver, endpoint_0));
  }
  function createRestClient($receiver, endpoint_0, mapper) {
    return rest(endpoint($receiver.createClient(), endpoint_0));
  }
  function WebSocketClient(url, protocols, int) {
    this.url = url;
    this.protocols = protocols;
    this.onOpen = new Signal();
    this.onError = new Signal();
    this.onClose = new Signal();
    this.onBinaryMessage = new Signal();
    this.onStringMessage = new Signal();
    this.onAnyMessage = new Signal();
  }
  WebSocketClient.prototype.close_19mbxw$$default = function (code, reason) {
  };
  WebSocketClient.prototype.close_19mbxw$ = function (code, reason, callback$default) {
    if (code === void 0)
      code = 0;
    if (reason === void 0)
      reason = '';
    callback$default ? callback$default(code, reason) : this.close_19mbxw$$default(code, reason);
  };
  WebSocketClient.prototype.send_61zpoe$ = function (message, continuation) {
    return Unit;
  };
  WebSocketClient.prototype.send_fqrh44$ = function (message, continuation) {
    return Unit;
  };
  WebSocketClient.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'WebSocketClient',
    interfaces: []
  };
  function WebSocketClient_0(url, protocols, origin, wskey, debug, continuation) {
    if (protocols === void 0)
      protocols = null;
    if (origin === void 0)
      origin = null;
    if (wskey === void 0)
      wskey = 'wskey';
    if (debug === void 0)
      debug = false;
    return get_websockets().create_5y1boz$(url, protocols, origin, wskey, debug, continuation);
  }
  function WebSocketClientFactory() {
  }
  WebSocketClientFactory.prototype.create_5y1boz$ = function (url, protocols, origin, wskey, debug, continuation, callback$default) {
    if (protocols === void 0)
      protocols = null;
    if (origin === void 0)
      origin = null;
    if (wskey === void 0)
      wskey = null;
    if (debug === void 0)
      debug = false;
    return callback$default ? callback$default(url, protocols, origin, wskey, debug, continuation) : this.create_5y1boz$$default(url, protocols, origin, wskey, debug, continuation);
  };
  WebSocketClientFactory.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'WebSocketClientFactory',
    interfaces: []
  };
  function WebSocketException(message) {
    IOException.call(this, message);
    this.name = 'WebSocketException';
  }
  WebSocketException.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'WebSocketException',
    interfaces: [IOException]
  };
  function ObjectMapper() {
    this._typers = lmapOf([]);
    this._untypers = lmapOf([]);
    this.fallbackTyper = null;
    this.fallbackUntyper = null;
    this.typeCtx_0 = new ObjectMapper$TypeContext(this);
    this.untypeCtx_0 = new ObjectMapper$UntypeContext(this);
    this.registerType_gs2qrt$(Kotlin.getKClass(Boolean_0), ObjectMapper_init$lambda);
    this.registerType_gs2qrt$(Kotlin.getKClass(Byte), ObjectMapper_init$lambda_0);
    this.registerType_gs2qrt$(Kotlin.getKClass(Char), ObjectMapper_init$lambda_1);
    this.registerType_gs2qrt$(Kotlin.getKClass(Byte), ObjectMapper_init$lambda_2);
    this.registerType_gs2qrt$(Kotlin.getKClass(Byte), ObjectMapper_init$lambda_3);
    this.registerType_gs2qrt$(Kotlin.getKClass(Long), ObjectMapper_init$lambda_4);
    this.registerType_gs2qrt$(Kotlin.getKClass(Byte), ObjectMapper_init$lambda_5);
    this.registerType_gs2qrt$(Kotlin.getKClass(Byte), ObjectMapper_init$lambda_6);
    this.registerType_gs2qrt$(Kotlin.getKClass(Set), ObjectMapper_init$lambda_7);
    this.registerType_gs2qrt$(Kotlin.getKClass(List), ObjectMapper_init$lambda_8);
    this.registerType_gs2qrt$(Kotlin.getKClass(MutableList), ObjectMapper_init$lambda_9);
    this.registerType_gs2qrt$(Kotlin.getKClass(String_0), ObjectMapper_init$lambda_10);
  }
  function ObjectMapper$TypeContext(map) {
    this.map = map;
  }
  ObjectMapper$TypeContext.prototype.gen_m4kn9m$ = defineInlineFunction('korio-js.com.soywiz.korio.serialization.ObjectMapper.TypeContext.gen_m4kn9m$', function (T_0, isT, $receiver) {
    return this.map.toTyped_gkqos$($receiver, Kotlin.getKClass(T_0));
  });
  ObjectMapper$TypeContext.prototype.genList_m4kn9m$ = defineInlineFunction('korio-js.com.soywiz.korio.serialization.ObjectMapper.TypeContext.genList_m4kn9m$', wrapFunction(function () {
    var toList = Kotlin.kotlin.collections.toList_7wnvza$;
    var ArrayList_init = Kotlin.kotlin.collections.ArrayList_init_mqih57$;
    var collectionSizeOrDefault = Kotlin.kotlin.collections.collectionSizeOrDefault_ba2ldo$;
    var ArrayList_init_0 = Kotlin.kotlin.collections.ArrayList_init_ww73n8$;
    return function (T_0, isT, $receiver) {
      var $receiver_0 = this.toDynamicList_mzud1t$($receiver);
      var destination = ArrayList_init_0(collectionSizeOrDefault($receiver_0, 10));
      var tmp$;
      tmp$ = $receiver_0.iterator();
      while (tmp$.hasNext()) {
        var item = tmp$.next();
        destination.add_11rb$(this.map.toTyped_gkqos$(item, Kotlin.getKClass(T_0)));
      }
      return ArrayList_init(toList(destination));
    };
  }));
  ObjectMapper$TypeContext.prototype.genSet_m4kn9m$ = defineInlineFunction('korio-js.com.soywiz.korio.serialization.ObjectMapper.TypeContext.genSet_m4kn9m$', wrapFunction(function () {
    var toSet = Kotlin.kotlin.collections.toSet_7wnvza$;
    var HashSet_init = Kotlin.kotlin.collections.HashSet_init_mqih57$;
    var collectionSizeOrDefault = Kotlin.kotlin.collections.collectionSizeOrDefault_ba2ldo$;
    var ArrayList_init = Kotlin.kotlin.collections.ArrayList_init_ww73n8$;
    return function (T_0, isT, $receiver) {
      var $receiver_0 = this.toDynamicList_mzud1t$($receiver);
      var destination = ArrayList_init(collectionSizeOrDefault($receiver_0, 10));
      var tmp$;
      tmp$ = $receiver_0.iterator();
      while (tmp$.hasNext()) {
        var item = tmp$.next();
        destination.add_11rb$(this.map.toTyped_gkqos$(item, Kotlin.getKClass(T_0)));
      }
      return HashSet_init(toSet(destination));
    };
  }));
  ObjectMapper$TypeContext.prototype.genMap_9jq766$ = defineInlineFunction('korio-js.com.soywiz.korio.serialization.ObjectMapper.TypeContext.genMap_9jq766$', wrapFunction(function () {
    var to = Kotlin.kotlin.to_ujzrz7$;
    var toLinkedMap = _.com.soywiz.korio.ds.toLinkedMap_6hr0sd$;
    var ArrayList_init = Kotlin.kotlin.collections.ArrayList_init_ww73n8$;
    return function (K_0, isK, V_0, isV, $receiver) {
      var $receiver_0 = this.toDynamicMap_mzud1t$($receiver);
      var destination = ArrayList_init($receiver_0.size);
      var tmp$;
      tmp$ = $receiver_0.entries.iterator();
      while (tmp$.hasNext()) {
        var item = tmp$.next();
        destination.add_11rb$(to(this.map.toTyped_gkqos$(item.key, Kotlin.getKClass(K_0)), this.map.toTyped_gkqos$(item.value, Kotlin.getKClass(V_0))));
      }
      return toLinkedMap(destination);
    };
  }));
  ObjectMapper$TypeContext.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'TypeContext',
    interfaces: [DynamicContext]
  };
  function ObjectMapper$UntypeContext(map) {
    this.map = map;
  }
  ObjectMapper$UntypeContext.prototype.gen_irb06o$ = defineInlineFunction('korio-js.com.soywiz.korio.serialization.ObjectMapper.UntypeContext.gen_irb06o$', function (T_0, isT, $receiver) {
    return this.map.toUntyped_b1ce0a$(Kotlin.getKClass(T_0), $receiver);
  });
  ObjectMapper$UntypeContext.prototype.gen_1v8dcc$ = defineInlineFunction('korio-js.com.soywiz.korio.serialization.ObjectMapper.UntypeContext.gen_1v8dcc$', function ($receiver) {
    return $receiver;
  });
  ObjectMapper$UntypeContext.prototype.gen_pdl1vz$ = defineInlineFunction('korio-js.com.soywiz.korio.serialization.ObjectMapper.UntypeContext.gen_pdl1vz$', function ($receiver) {
    return $receiver;
  });
  ObjectMapper$UntypeContext.prototype.gen_rcaex3$ = defineInlineFunction('korio-js.com.soywiz.korio.serialization.ObjectMapper.UntypeContext.gen_rcaex3$', function ($receiver) {
    return $receiver;
  });
  ObjectMapper$UntypeContext.prototype.gen_m3lr2h$ = defineInlineFunction('korio-js.com.soywiz.korio.serialization.ObjectMapper.UntypeContext.gen_m3lr2h$', wrapFunction(function () {
    var collectionSizeOrDefault = Kotlin.kotlin.collections.collectionSizeOrDefault_ba2ldo$;
    var ArrayList_init = Kotlin.kotlin.collections.ArrayList_init_ww73n8$;
    return function (T_0, isT, $receiver) {
      var destination = ArrayList_init(collectionSizeOrDefault($receiver, 10));
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var item = tmp$.next();
        destination.add_11rb$(this.map.toUntyped_b1ce0a$(Kotlin.getKClass(T_0), item));
      }
      return destination;
    };
  }));
  ObjectMapper$UntypeContext.prototype.gen_cm4zns$ = defineInlineFunction('korio-js.com.soywiz.korio.serialization.ObjectMapper.UntypeContext.gen_cm4zns$', wrapFunction(function () {
    var to = Kotlin.kotlin.to_ujzrz7$;
    var toMap = Kotlin.kotlin.collections.toMap_6hr0sd$;
    var ArrayList_init = Kotlin.kotlin.collections.ArrayList_init_ww73n8$;
    return function (K_0, isK, V_0, isV, $receiver) {
      var destination = ArrayList_init($receiver.size);
      var tmp$;
      tmp$ = $receiver.entries.iterator();
      while (tmp$.hasNext()) {
        var item = tmp$.next();
        var tmp$_0 = destination.add_11rb$;
        var $receiver_0 = item.key;
        var tmp$_1 = this.map.toUntyped_b1ce0a$(Kotlin.getKClass(K_0), $receiver_0);
        var $receiver_1 = item.value;
        tmp$_0.call(destination, to(tmp$_1, this.map.toUntyped_b1ce0a$(Kotlin.getKClass(V_0), $receiver_1)));
      }
      return toMap(destination);
    };
  }));
  ObjectMapper$UntypeContext.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'UntypeContext',
    interfaces: []
  };
  ObjectMapper.prototype.registerType_gs2qrt$ = function (clazz, generate) {
    this._typers.put_xwzc9p$(clazz, generate);
    return this;
  };
  ObjectMapper.prototype.toTyped_gkqos$ = function (obj, clazz) {
    var tmp$, tmp$_0;
    var generator = (tmp$ = this._typers.get_11rb$(clazz)) != null ? tmp$ : invalidArg('Unregistered ' + clazz);
    return Kotlin.isType(tmp$_0 = generator(this.typeCtx_0, obj), Any) ? tmp$_0 : Kotlin.throwCCE();
  };
  ObjectMapper.prototype.toUntyped_issdgt$ = defineInlineFunction('korio-js.com.soywiz.korio.serialization.ObjectMapper.toUntyped_issdgt$', function (T_0, isT, obj) {
    return this.toUntyped_b1ce0a$(Kotlin.getKClass(T_0), obj);
  });
  ObjectMapper.prototype.toUntyped_b1ce0a$ = function (clazz, obj) {
    var tmp$, tmp$_0;
    if (obj == null)
      return obj;
    else if (typeof obj === 'boolean')
      return obj;
    else if (Kotlin.isNumber(obj))
      return obj;
    else if (typeof obj === 'string')
      return obj;
    else if (Kotlin.isType(obj, Iterable)) {
      var destination = ArrayList_init(collectionSizeOrDefault(obj, 10));
      var tmp$_1;
      tmp$_1 = obj.iterator();
      while (tmp$_1.hasNext()) {
        var item = tmp$_1.next();
        var tmp$_2 = destination.add_11rb$;
        var obj_0 = item != null ? item : Kotlin.throwNPE();
        tmp$_2.call(destination, this.toUntyped_b1ce0a$(Kotlin.getKClass(Any), obj_0));
      }
      return ArrayList_init_0(destination);
    }
     else if (Kotlin.isType(obj, Map)) {
      var destination_0 = ArrayList_init(obj.size);
      var tmp$_3;
      tmp$_3 = obj.entries.iterator();
      while (tmp$_3.hasNext()) {
        var item_0 = tmp$_3.next();
        var tmp$_4 = destination_0.add_11rb$;
        var tmp$_5, tmp$_6;
        tmp$_6 = (tmp$_5 = item_0.key) != null ? tmp$_5 : Kotlin.throwNPE();
        var tmp$_7 = this.toUntyped_b1ce0a$(Kotlin.getKClass(Any), tmp$_6);
        var obj_1 = item_0.value;
        tmp$_4.call(destination_0, to(tmp$_7, this.toUntyped_b1ce0a$(Kotlin.getKClass(Any), obj_1)));
      }
      return toLinkedMap(destination_0);
    }
     else {
      var unt = this._untypers.get_11rb$(clazz);
      if (unt == null && this.fallbackUntyper != null) {
        return (tmp$ = this.fallbackUntyper) != null ? tmp$(obj) : null;
      }
       else if (unt == null) {
        println('Untypers: ' + Kotlin.toString(this._untypers.size));
        tmp$_0 = this._untypers.entries.iterator();
        while (tmp$_0.hasNext()) {
          var u = tmp$_0.next();
          println(' - ' + Kotlin.toString(u.key));
        }
        return invalidArg("Don't know how to untype " + clazz);
      }
       else {
        return unt(this.untypeCtx_0, obj);
      }
    }
  };
  function ObjectMapper$registerEnum$lambda(closure$nameToString) {
    return function ($receiver, it) {
      var tmp$;
      return (tmp$ = closure$nameToString.get_11rb$(Kotlin.toString(it))) != null ? tmp$ : Kotlin.throwNPE();
    };
  }
  ObjectMapper.prototype.registerEnum_hytwtp$ = function (clazz, values) {
    var destination = ArrayList_init(values.length);
    var tmp$;
    for (tmp$ = 0; tmp$ !== values.length; ++tmp$) {
      var item = values[tmp$];
      destination.add_11rb$(to(item.name, item));
    }
    var nameToString = toMap(destination);
    this.registerType_gs2qrt$(clazz, ObjectMapper$registerEnum$lambda(nameToString));
  };
  ObjectMapper.prototype.registerType_ze1j52$ = defineInlineFunction('korio-js.com.soywiz.korio.serialization.ObjectMapper.registerType_ze1j52$', function (T_0, isT, generate) {
    return this.registerType_gs2qrt$(Kotlin.getKClass(T_0), generate);
  });
  ObjectMapper.prototype.registerEnum_zhhfti$ = defineInlineFunction('korio-js.com.soywiz.korio.serialization.ObjectMapper.registerEnum_zhhfti$', function (T_0, isT, values) {
    this.registerEnum_hytwtp$(Kotlin.getKClass(T_0), values);
  });
  ObjectMapper.prototype.registerUntype_tkuceq$ = function (clazz, untyper) {
    var tmp$;
    var $receiver = this._untypers;
    var value = typeof (tmp$ = untyper) === 'function' ? tmp$ : Kotlin.throwCCE();
    $receiver.put_xwzc9p$(clazz, value);
  };
  ObjectMapper.prototype.registerUntype_q1j5hn$ = defineInlineFunction('korio-js.com.soywiz.korio.serialization.ObjectMapper.registerUntype_q1j5hn$', function (T_0, isT, untyper) {
    this.registerUntype_tkuceq$(Kotlin.getKClass(T_0), untyper);
  });
  ObjectMapper.prototype.registerUntypeEnum_nxd2ia$ = defineInlineFunction('korio-js.com.soywiz.korio.serialization.ObjectMapper.registerUntypeEnum_nxd2ia$', wrapFunction(function () {
    function ObjectMapper$registerUntypeEnum$lambda($receiver, it) {
      return it.name;
    }
    return function (T_0, isT) {
      this.registerUntype_tkuceq$(Kotlin.getKClass(T_0), ObjectMapper$registerUntypeEnum$lambda);
    };
  }));
  ObjectMapper.prototype.scoped_klfg04$ = defineInlineFunction('korio-js.com.soywiz.korio.serialization.ObjectMapper.scoped_klfg04$', wrapFunction(function () {
    var toMap = Kotlin.kotlin.collections.toMap_abgq59$;
    return function (callback) {
      var oldTypers = toMap(this._typers);
      var oldUntypers = toMap(this._untypers);
      try {
        return callback();
      }
      finally {
        this._typers.clear();
        this._typers.putAll_a2k3zr$(oldTypers);
        this._untypers.clear();
        this._untypers.putAll_a2k3zr$(oldUntypers);
      }
    };
  }));
  function ObjectMapper_init$lambda($receiver, it) {
    return $receiver.toBool_mzud1t$(it);
  }
  function ObjectMapper_init$lambda_0($receiver, it) {
    return $receiver.toByte_mzud1t$(it);
  }
  function ObjectMapper_init$lambda_1($receiver, it) {
    return toBoxedChar($receiver.toChar_mzud1t$(it));
  }
  function ObjectMapper_init$lambda_2($receiver, it) {
    return $receiver.toShort_mzud1t$(it);
  }
  function ObjectMapper_init$lambda_3($receiver, it) {
    return $receiver.toInt_mzud1t$(it);
  }
  function ObjectMapper_init$lambda_4($receiver, it) {
    return $receiver.toLong_mzud1t$(it);
  }
  function ObjectMapper_init$lambda_5($receiver, it) {
    return $receiver.toFloat_mzud1t$(it);
  }
  function ObjectMapper_init$lambda_6($receiver, it) {
    return $receiver.toDouble_mzud1t$(it);
  }
  function ObjectMapper_init$lambda_7($receiver, it) {
    return toSet($receiver.toDynamicList_mzud1t$(it));
  }
  function ObjectMapper_init$lambda_8($receiver, it) {
    return $receiver.toDynamicList_mzud1t$(it);
  }
  function ObjectMapper_init$lambda_9($receiver, it) {
    return toMutableList($receiver.toDynamicList_mzud1t$(it));
  }
  function ObjectMapper_init$lambda_10($receiver, it) {
    var tmp$;
    return (tmp$ = it != null ? it.toString() : null) != null ? tmp$ : 'null';
  }
  ObjectMapper.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'ObjectMapper',
    interfaces: []
  };
  var Mapper;
  function Json() {
    Json_instance = this;
  }
  Json.prototype.encodePretty_qg0us1$ = defineInlineFunction('korio-js.com.soywiz.korio.serialization.json.Json.encodePretty_qg0us1$', wrapFunction(function () {
    var serialization = _.com.soywiz.korio.serialization;
    return function (T_0, isT, obj, mapper) {
      if (mapper === void 0)
        mapper = serialization.Mapper;
      var tmp$;
      if (true) {
        tmp$ = this.encodePrettyUntyped_hvn9da$(mapper.toUntyped_b1ce0a$(Kotlin.getKClass(T_0), obj));
      }
       else {
        tmp$ = this.encodeUntyped_s8jyv4$(mapper.toUntyped_b1ce0a$(Kotlin.getKClass(T_0), obj));
      }
      return tmp$;
    };
  }));
  Json.prototype.encode_904xui$ = defineInlineFunction('korio-js.com.soywiz.korio.serialization.json.Json.encode_904xui$', wrapFunction(function () {
    var serialization = _.com.soywiz.korio.serialization;
    return function (T_0, isT, obj, mapper, pretty) {
      if (mapper === void 0)
        mapper = serialization.Mapper;
      if (pretty === void 0)
        pretty = false;
      var tmp$;
      if (pretty) {
        tmp$ = this.encodePrettyUntyped_hvn9da$(mapper.toUntyped_b1ce0a$(Kotlin.getKClass(T_0), obj));
      }
       else {
        tmp$ = this.encodeUntyped_s8jyv4$(mapper.toUntyped_b1ce0a$(Kotlin.getKClass(T_0), obj));
      }
      return tmp$;
    };
  }));
  Json.prototype.stringifyPretty_qg0us1$ = defineInlineFunction('korio-js.com.soywiz.korio.serialization.json.Json.stringifyPretty_qg0us1$', wrapFunction(function () {
    var serialization = _.com.soywiz.korio.serialization;
    return function (T_0, isT, obj, mapper) {
      if (mapper === void 0)
        mapper = serialization.Mapper;
      var tmp$;
      if (true) {
        tmp$ = this.encodePrettyUntyped_hvn9da$(mapper.toUntyped_b1ce0a$(Kotlin.getKClass(T_0), obj));
      }
       else {
        tmp$ = this.encodeUntyped_s8jyv4$(mapper.toUntyped_b1ce0a$(Kotlin.getKClass(T_0), obj));
      }
      return tmp$;
    };
  }));
  Json.prototype.stringify_904xui$ = defineInlineFunction('korio-js.com.soywiz.korio.serialization.json.Json.stringify_904xui$', wrapFunction(function () {
    var serialization = _.com.soywiz.korio.serialization;
    return function (T_0, isT, obj, mapper, pretty) {
      if (mapper === void 0)
        mapper = serialization.Mapper;
      if (pretty === void 0)
        pretty = false;
      var tmp$;
      if (pretty) {
        tmp$ = this.encodePrettyUntyped_hvn9da$(mapper.toUntyped_b1ce0a$(Kotlin.getKClass(T_0), obj));
      }
       else {
        tmp$ = this.encodeUntyped_s8jyv4$(mapper.toUntyped_b1ce0a$(Kotlin.getKClass(T_0), obj));
      }
      return tmp$;
    };
  }));
  Json.prototype.parse_61zpoe$ = function (s) {
    return this.decode_qdjkzt$(new StrReader(s));
  };
  Json.prototype.parseTyped_iy04uf$ = defineInlineFunction('korio-js.com.soywiz.korio.serialization.json.Json.parseTyped_iy04uf$', wrapFunction(function () {
    var serialization = _.com.soywiz.korio.serialization;
    return function (T_0, isT, s, mapper) {
      if (mapper === void 0)
        mapper = serialization.Mapper;
      return this.decodeToType_27ii8w$(s, Kotlin.getKClass(T_0), mapper);
    };
  }));
  Json.prototype.invalidJson_61zpoe$ = function (msg) {
    if (msg === void 0)
      msg = 'Invalid JSON';
    throw new IOException(msg);
  };
  Json.prototype.decode_61zpoe$ = function (s) {
    return this.decode_qdjkzt$(new StrReader(s));
  };
  Json.prototype.decodeToType_iy04uf$ = defineInlineFunction('korio-js.com.soywiz.korio.serialization.json.Json.decodeToType_iy04uf$', wrapFunction(function () {
    var serialization = _.com.soywiz.korio.serialization;
    return function (T_0, isT, s, mapper) {
      if (mapper === void 0)
        mapper = serialization.Mapper;
      return this.decodeToType_27ii8w$(s, Kotlin.getKClass(T_0), mapper);
    };
  }));
  Json.prototype.decodeToType_27ii8w$ = function (s, clazz, mapper) {
    if (mapper === void 0)
      mapper = Mapper;
    return mapper.toTyped_gkqos$(this.decode_61zpoe$(s), clazz);
  };
  var StrReader$readWhile$lambda = wrapFunction(function () {
    var toBoxedChar = Kotlin.toBoxedChar;
    return function (closure$filter, this$StrReader) {
      return function () {
        var $this = this$StrReader;
        var filter = closure$filter;
        while ($this.hasMore && filter(toBoxedChar($this.peekChar())))
          $this.readChar();
        return Unit;
      };
    };
  });
  Json.prototype.decode_qdjkzt$ = function ($receiver) {
    var tmp$, tmp$_0, tmp$_1;
    var ic = $receiver.skipSpaces().read();
    if (ic === 123) {
      var out = lmapOf([]);
      obj: while (true) {
        tmp$ = $receiver.skipSpaces().read();
        if (tmp$ === 125)
          break obj;
        else if (tmp$ === 44)
          continue obj;
        else
          $receiver.unread_za3lpa$();
        var key = typeof (tmp$_0 = this.decode_qdjkzt$($receiver)) === 'string' ? tmp$_0 : Kotlin.throwCCE();
        $receiver.skipSpaces().expect_s8itvh$(58);
        var value = this.decode_qdjkzt$($receiver);
        out.put_xwzc9p$(key, value);
      }
      return out;
    }
     else if (ic === 91) {
      var out_0 = ArrayList_init();
      array: while (true) {
        tmp$_1 = $receiver.skipSpaces().read();
        if (tmp$_1 === 93)
          break array;
        else if (tmp$_1 === 44)
          continue array;
        else
          $receiver.unread_za3lpa$();
        var item = this.decode_qdjkzt$($receiver);
        out_0.add_11rb$(item);
      }
      return out_0;
    }
     else if (ic === 45 || ic === 43 || (new CharRange(48, 57)).contains_mef7kx$(ic)) {
      $receiver.unread_za3lpa$();
      var tmp$_2;
      var start = $receiver.pos;
      while (true) {
        var tmp$_3 = $receiver.hasMore;
        if (tmp$_3) {
          var it = toBoxedChar($receiver.peekChar());
          tmp$_3 = (new CharRange(48, 57)).contains_mef7kx$(unboxChar(it)) || unboxChar(it) === 46 || unboxChar(it) === 101 || unboxChar(it) === 69 || unboxChar(it) === 45 || unboxChar(it) === 43;
        }
        if (!tmp$_3)
          break;
        $receiver.readChar();
      }
      var end = $receiver.pos;
      var res = (tmp$_2 = end > start ? $receiver.slice_vux9f0$(start, end) : null) != null ? tmp$_2 : '';
      return toNumber(res);
    }
     else if (ic === 116 || ic === 102 || ic === 110) {
      $receiver.unread_za3lpa$();
      if ($receiver.tryRead_61zpoe$('true'))
        return true;
      if ($receiver.tryRead_61zpoe$('false'))
        return false;
      if ($receiver.tryRead_61zpoe$('null'))
        return null;
      this.invalidJson_61zpoe$();
    }
     else if (ic === 34) {
      $receiver.unread_za3lpa$();
      return readStringLit($receiver);
    }
     else
      this.invalidJson_61zpoe$("Not expected '" + String.fromCharCode(ic) + "'");
  };
  Json.prototype.encodeUntyped_s8jyv4$ = function (obj) {
    var $receiver = new StringBuilder();
    this.encodeUntyped_dx15ti$(obj, $receiver);
    return $receiver.toString();
  };
  Json.prototype.encodeUntyped_dx15ti$ = function (obj, b) {
    var tmp$, tmp$_0;
    if (obj == null)
      b.append_gw00v9$('null');
    else if (typeof obj === 'boolean')
      b.append_gw00v9$(obj ? 'true' : 'false');
    else if (Kotlin.isType(obj, Map)) {
      b.append_s8itvh$(123);
      tmp$ = withIndex(obj.entries).iterator();
      while (tmp$.hasNext()) {
        var tmp$_1 = tmp$.next();
        var i = tmp$_1.component1()
        , v = tmp$_1.component2();
        if (i !== 0)
          b.append_s8itvh$(44);
        this.encodeUntyped_dx15ti$(v.key, b);
        b.append_s8itvh$(58);
        this.encodeUntyped_dx15ti$(v.value, b);
      }
      b.append_s8itvh$(125);
    }
     else if (Kotlin.isType(obj, Iterable)) {
      b.append_s8itvh$(91);
      tmp$_0 = withIndex(obj).iterator();
      while (tmp$_0.hasNext()) {
        var tmp$_2 = tmp$_0.next();
        var i_0 = tmp$_2.component1()
        , v_0 = tmp$_2.component2();
        if (i_0 !== 0)
          b.append_s8itvh$(44);
        this.encodeUntyped_dx15ti$(v_0, b);
      }
      b.append_s8itvh$(93);
    }
     else if (Kotlin.isType(obj, Enum))
      this.encodeString_0(obj.name, b);
    else if (typeof obj === 'string')
      this.encodeString_0(obj, b);
    else if (Kotlin.isNumber(obj))
      b.append_gw00v9$(Kotlin.toString(obj));
    else if (Kotlin.isType(obj, CustomJsonSerializer))
      obj.encodeToJson_irqrwq$(b);
    else {
      invalidOp("Don't know how to serialize " + Kotlin.toString(obj));
    }
  };
  Json.prototype.encodePrettyUntyped_hvn9da$ = function (obj, indentChunk) {
    if (indentChunk === void 0)
      indentChunk = '\t';
    var $receiver = new Indenter();
    this.encodePrettyUntyped_snnzj3$(obj, $receiver);
    return $receiver.toString_8kj6y5$(true, indentChunk);
  };
  Json.prototype.encodePrettyUntyped_snnzj3$ = function (obj, b) {
    if (obj == null)
      b.inline_61zpoe$('null');
    else if (typeof obj === 'boolean')
      b.inline_61zpoe$(obj ? 'true' : 'false');
    else if (Kotlin.isType(obj, Map)) {
      b.line_61zpoe$('{');
      b._indent();
      try {
        var tmp$;
        var entries = obj.entries;
        tmp$ = withIndex(entries).iterator();
        while (tmp$.hasNext()) {
          var tmp$_0 = tmp$.next();
          var i = tmp$_0.component1()
          , v = tmp$_0.component2();
          if (i !== 0)
            b.line_61zpoe$(',');
          b.inline_61zpoe$(this.encodeString_1('' + Kotlin.toString(v.key)));
          b.inline_61zpoe$(': ');
          this.encodePrettyUntyped_snnzj3$(v.value, b);
          if (i === (entries.size - 1 | 0))
            b.line_61zpoe$('');
        }
      }
      finally {
        b._unindent();
      }
      b.inline_61zpoe$('}');
    }
     else if (Kotlin.isType(obj, Iterable)) {
      b.line_61zpoe$('[');
      b._indent();
      try {
        var tmp$_1;
        var entries_0 = toList(obj);
        tmp$_1 = withIndex(entries_0).iterator();
        while (tmp$_1.hasNext()) {
          var tmp$_2 = tmp$_1.next();
          var i_0 = tmp$_2.component1()
          , v_0 = tmp$_2.component2();
          if (i_0 !== 0)
            b.line_61zpoe$(',');
          this.encodePrettyUntyped_snnzj3$(v_0, b);
          if (i_0 === (entries_0.size - 1 | 0))
            b.line_61zpoe$('');
        }
      }
      finally {
        b._unindent();
      }
      b.inline_61zpoe$(']');
    }
     else if (typeof obj === 'string')
      b.inline_61zpoe$(this.encodeString_1(obj));
    else if (Kotlin.isNumber(obj))
      b.inline_61zpoe$(Kotlin.toString(obj));
    else if (Kotlin.isType(obj, CustomJsonSerializer)) {
      var $receiver = new StringBuilder();
      obj.encodeToJson_irqrwq$($receiver);
      b.inline_61zpoe$($receiver.toString());
    }
     else {
      invalidOp("Don't know how to serialize " + Kotlin.toString(obj));
    }
  };
  Json.prototype.encodeString_1 = function (str) {
    var $receiver = new StringBuilder();
    this.encodeString_0(str, $receiver);
    return $receiver.toString();
  };
  Json.prototype.encodeString_0 = function (str, b) {
    var tmp$;
    b.append_s8itvh$(34);
    tmp$ = iterator(str);
    while (tmp$.hasNext()) {
      var c = unboxChar(tmp$.next());
      if (c === 92)
        b.append_gw00v9$('\\\\');
      else if (c === 47)
        b.append_gw00v9$('\\/');
      else if (c === 39)
        b.append_gw00v9$("\\'");
      else if (c === 34)
        b.append_gw00v9$('\\"');
      else if (c === 8)
        b.append_gw00v9$('\\b');
      else if (c === 12)
        b.append_gw00v9$('\\f');
      else if (c === 10)
        b.append_gw00v9$('\\n');
      else if (c === 13)
        b.append_gw00v9$('\\r');
      else if (c === 9)
        b.append_gw00v9$('\\t');
      else
        b.append_s8itvh$(c);
    }
    b.append_s8itvh$(34);
  };
  Json.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'Json',
    interfaces: []
  };
  var Json_instance = null;
  function Json_getInstance() {
    if (Json_instance === null) {
      new Json();
    }
    return Json_instance;
  }
  function CustomJsonSerializer() {
  }
  CustomJsonSerializer.$metadata$ = {
    kind: Kotlin.Kind.INTERFACE,
    simpleName: 'CustomJsonSerializer',
    interfaces: []
  };
  function toJson($receiver, mapper) {
    var $this = Json_getInstance();
    var tmp$;
    if (false) {
      tmp$ = $this.encodePrettyUntyped_hvn9da$(mapper.toUntyped_b1ce0a$(Kotlin.getKClass(Map), $receiver));
    }
     else {
      tmp$ = $this.encodeUntyped_s8jyv4$(mapper.toUntyped_b1ce0a$(Kotlin.getKClass(Map), $receiver));
    }
    return tmp$;
  }
  function toJsonUntyped($receiver) {
    return Json_getInstance().encodeUntyped_s8jyv4$($receiver);
  }
  function QueryString() {
    QueryString_instance = this;
  }
  QueryString.prototype.decode_6bul2c$ = function (str) {
    var tmp$;
    var out = lmapOf([]);
    tmp$ = split(str, Kotlin.charArrayOf(38)).iterator();
    while (tmp$.hasNext()) {
      var chunk = tmp$.next();
      var parts = split(chunk, Kotlin.charArrayOf(61), void 0, 2);
      var key = URLDecoder_getInstance().decode_puj7f4$(parts.get_za3lpa$(0), 'UTF-8');
      var value = URLDecoder_getInstance().decode_puj7f4$(1 >= 0 && 1 <= get_lastIndex_0(parts) ? parts.get_za3lpa$(1) : key, 'UTF-8');
      var tmp$_0;
      var value_0 = out.get_11rb$(key);
      if (value_0 == null) {
        var answer = ArrayList_init();
        out.put_xwzc9p$(key, answer);
        tmp$_0 = answer;
      }
       else {
        tmp$_0 = value_0;
      }
      var list = tmp$_0;
      list.add_11rb$(value);
    }
    return out;
  };
  var copyToArray = Kotlin.kotlin.collections.copyToArray;
  QueryString.prototype.encode_atu3vi$ = function (map) {
    var tmp$ = this.encode_9ih0sy$;
    var destination = ArrayList_init();
    var tmp$_0;
    tmp$_0 = map.entries.iterator();
    while (tmp$_0.hasNext()) {
      var element = tmp$_0.next();
      var key = element.key;
      var value = element.value;
      var destination_0 = ArrayList_init(collectionSizeOrDefault(value, 10));
      var tmp$_1;
      tmp$_1 = value.iterator();
      while (tmp$_1.hasNext()) {
        var item = tmp$_1.next();
        destination_0.add_11rb$(to(key, item));
      }
      var list = destination_0;
      addAll(destination, list);
    }
    return tmp$.call(this, copyToArray(destination).slice());
  };
  QueryString.prototype.encode_9ih0sy$ = function (items) {
    var tmp$;
    var parts = ArrayList_init();
    for (tmp$ = 0; tmp$ !== items.length; ++tmp$) {
      var tmp$_0 = items[tmp$];
      var key = tmp$_0.component1()
      , value = tmp$_0.component2();
      var element = URLEncoder_getInstance().encode_puj7f4$(key, 'UTF-8') + '=' + URLEncoder_getInstance().encode_puj7f4$(value, 'UTF-8');
      parts.add_11rb$(element);
    }
    return joinToString(parts, '&');
  };
  QueryString.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'QueryString',
    interfaces: []
  };
  var QueryString_instance = null;
  function QueryString_getInstance() {
    if (QueryString_instance === null) {
      new QueryString();
    }
    return QueryString_instance;
  }
  function URLDecoder() {
    URLDecoder_instance = this;
  }
  URLDecoder.prototype.decode_puj7f4$ = function (s, enc) {
    var bos = ByteArrayBuilder_init();
    var len = s.length;
    var n = 0;
    while (n < len) {
      var c = s.charCodeAt(n);
      if (c === 37) {
        bos.append_s8j3t7$(Kotlin.toByte(toInt_0(substr_0(s, n + 1 | 0, 2), 16)));
        n = n + 2 | 0;
      }
       else if (c === 43) {
        bos.append_s8j3t7$(Kotlin.toByte(32 | 0));
      }
       else {
        bos.append_s8j3t7$(Kotlin.toByte(c | 0));
      }
      n = n + 1 | 0;
    }
    return toString(bos.toByteArray(), Charset$Companion_getInstance().forName_61zpoe$(enc));
  };
  URLDecoder.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'URLDecoder',
    interfaces: []
  };
  var URLDecoder_instance = null;
  function URLDecoder_getInstance() {
    if (URLDecoder_instance === null) {
      new URLDecoder();
    }
    return URLDecoder_instance;
  }
  function URLEncoder() {
    URLEncoder_instance = this;
    this.normal_0 = Kotlin.booleanArray(256);
    this.normalTable_0 = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 -_.*';
    this.digits_0 = '0123456789ABCDEF';
    var tmp$;
    tmp$ = iterator(this.normalTable_0);
    while (tmp$.hasNext()) {
      var c = unboxChar(tmp$.next());
      this.normal_0[c | 0] = true;
    }
  }
  URLEncoder.prototype.encode_puj7f4$ = function (s, enc) {
    var tmp$;
    var sb = StringBuilder_init(s.length);
    var data = toByteArray(s, Charset$Companion_getInstance().forName_61zpoe$(enc));
    for (tmp$ = 0; tmp$ !== data.length; ++tmp$) {
      var c = data[tmp$];
      if (c === Kotlin.toByte(32 | 0)) {
        sb.append_s8itvh$(43);
      }
       else if (this.normal_0[c & 255]) {
        sb.append_s8itvh$(Kotlin.toChar(c));
      }
       else {
        sb.append_s8itvh$(37);
        sb.append_s8itvh$(this.digits_0.charCodeAt(c >>> 4 & 15));
        sb.append_s8itvh$(this.digits_0.charCodeAt(c >>> 0 & 15));
      }
    }
    return sb.toString();
  };
  URLEncoder.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'URLEncoder',
    interfaces: []
  };
  var URLEncoder_instance = null;
  function URLEncoder_getInstance() {
    if (URLEncoder_instance === null) {
      new URLEncoder();
    }
    return URLEncoder_instance;
  }
  function Xml(type, name, attributes, allChildren, content) {
    Xml$Companion_getInstance();
    this.type = type;
    this.name = name;
    this.attributes = attributes;
    this.allChildren = allChildren;
    this.content = content;
    this.attributesLC = toCaseInsensitiveTreeMap(this.attributes);
    var $receiver = this.name.toLowerCase();
    var tmp$;
    this.nameLC = trim_0(Kotlin.isCharSequence(tmp$ = $receiver) ? tmp$ : Kotlin.throwCCE()).toString();
  }
  Object.defineProperty(Xml.prototype, 'descendants', {
    get: function () {
      var $receiver = this.allChildren;
      var destination = ArrayList_init();
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        var list = plus_0(element.descendants, element);
        addAll(destination, list);
      }
      return destination;
    }
  });
  Object.defineProperty(Xml.prototype, 'allChildrenNoComments', {
    get: function () {
      var $receiver = this.allChildren;
      var destination = ArrayList_init();
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (!get_isComment(element))
          destination.add_11rb$(element);
      }
      return destination;
    }
  });
  Object.defineProperty(Xml.prototype, 'allNodeChildren', {
    get: function () {
      var $receiver = this.allChildren;
      var destination = ArrayList_init();
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (get_isNode(element))
          destination.add_11rb$(element);
      }
      return destination;
    }
  });
  function Xml$Companion() {
    Xml$Companion_instance = this;
  }
  Xml$Companion.prototype.Tag_imnfz6$ = function (tagName, attributes, children) {
    var destination = LinkedHashMap_init();
    var tmp$;
    tmp$ = attributes.entries.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      if (element.value != null) {
        destination.put_xwzc9p$(element.key, element.value);
      }
    }
    var destination_0 = ArrayList_init(destination.size);
    var tmp$_0;
    tmp$_0 = destination.entries.iterator();
    while (tmp$_0.hasNext()) {
      var item = tmp$_0.next();
      destination_0.add_11rb$(to(item.key, Kotlin.toString(item.value)));
    }
    var att = toMap(destination_0);
    return new Xml(Xml$Type$NODE_getInstance(), tagName, att, children, '');
  };
  Xml$Companion.prototype.Text_61zpoe$ = function (text) {
    return new Xml(Xml$Type$TEXT_getInstance(), '_text_', lmapOf([]), emptyList(), text);
  };
  Xml$Companion.prototype.Comment_61zpoe$ = function (text) {
    return new Xml(Xml$Type$COMMENT_getInstance(), '_comment_', lmapOf([]), emptyList(), text);
  };
  function Xml$Companion$parse$Level(children, close) {
    this.children = children;
    this.close = close;
  }
  Xml$Companion$parse$Level.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'Level',
    interfaces: []
  };
  Xml$Companion$parse$Level.prototype.component1 = function () {
    return this.children;
  };
  Xml$Companion$parse$Level.prototype.component2 = function () {
    return this.close;
  };
  Xml$Companion$parse$Level.prototype.copy_a017um$ = function (children, close) {
    return new Xml$Companion$parse$Level(children === void 0 ? this.children : children, close === void 0 ? this.close : close);
  };
  Xml$Companion$parse$Level.prototype.toString = function () {
    return 'Level(children=' + Kotlin.toString(this.children) + (', close=' + Kotlin.toString(this.close)) + ')';
  };
  Xml$Companion$parse$Level.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.children) | 0;
    result = result * 31 + Kotlin.hashCode(this.close) | 0;
    return result;
  };
  Xml$Companion$parse$Level.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.children, other.children) && Kotlin.equals(this.close, other.close)))));
  };
  function Xml$Companion$parse$level(closure$stream) {
    return function closure$level() {
      var tmp$, tmp$_0;
      var children = emptyList();
      while (closure$stream.hasNext()) {
        var tag = closure$stream.next();
        if (!Kotlin.isType(tag, XmlStream$Element$ProcessingInstructionTag))
          if (Kotlin.isType(tag, XmlStream$Element$CommentTag))
            children = plus_1(children, Xml$Companion_getInstance().Comment_61zpoe$(tag.text));
          else if (Kotlin.isType(tag, XmlStream$Element$Text))
            children = plus_1(children, Xml$Companion_getInstance().Text_61zpoe$(tag.text));
          else if (Kotlin.isType(tag, XmlStream$Element$OpenCloseTag)) {
            children = plus_1(children, Xml$Companion_getInstance().Tag_imnfz6$(tag.name, tag.attributes, emptyList()));
          }
           else if (Kotlin.isType(tag, XmlStream$Element$OpenTag)) {
            var out = closure$level();
            if (!Kotlin.equals((tmp$ = out.close) != null ? tmp$.name : null, tag.name)) {
              throw new IllegalArgumentException('Expected ' + tag.name + ' but was ' + Kotlin.toString((tmp$_0 = out.close) != null ? tmp$_0.name : null));
            }
            children = plus_1(children, new Xml(Xml$Type$NODE_getInstance(), tag.name, tag.attributes, out.children, ''));
          }
           else if (Kotlin.isType(tag, XmlStream$Element$CloseTag))
            return new Xml$Companion$parse$Level(children, tag);
          else
            throw new IllegalArgumentException('Unhandled ' + tag);
      }
      return new Xml$Companion$parse$Level(children, null);
    };
  }
  Xml$Companion.prototype.parse_61zpoe$ = function (str) {
    var tmp$, tmp$_0;
    try {
      var stream = XmlStream_getInstance().parse_61zpoe$(str).iterator();
      var level = Xml$Companion$parse$level(stream);
      var children = level().children;
      var firstOrNull$result;
      firstOrNull$break: do {
        var tmp$_1;
        tmp$_1 = children.iterator();
        while (tmp$_1.hasNext()) {
          var element = tmp$_1.next();
          if (element.type === Xml$Type$NODE_getInstance()) {
            firstOrNull$result = element;
            break firstOrNull$break;
          }
        }
        firstOrNull$result = null;
      }
       while (false);
      return (tmp$_0 = (tmp$ = firstOrNull$result) != null ? tmp$ : firstOrNull(children)) != null ? tmp$_0 : Xml$Companion_getInstance().Text_61zpoe$('');
    }
     catch (t) {
      if (Kotlin.isType(t, NoSuchElementException)) {
        println('ERROR: XML: ' + str + ' thrown a NoSuchElementException');
        return Xml$Companion_getInstance().Text_61zpoe$('!!ERRORED!!');
      }
       else
        throw t;
    }
  };
  Xml$Companion.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Xml$Companion_instance = null;
  function Xml$Companion_getInstance() {
    if (Xml$Companion_instance === null) {
      new Xml$Companion();
    }
    return Xml$Companion_instance;
  }
  Object.defineProperty(Xml.prototype, 'text', {
    get: function () {
      var tmp$;
      tmp$ = this.type;
      if (Kotlin.equals(tmp$, Xml$Type$NODE_getInstance())) {
        var $receiver = this.allChildren;
        var destination = ArrayList_init(collectionSizeOrDefault($receiver, 10));
        var tmp$_0;
        tmp$_0 = $receiver.iterator();
        while (tmp$_0.hasNext()) {
          var item = tmp$_0.next();
          destination.add_11rb$(item.text);
        }
        return joinToString(destination, '');
      }
       else if (Kotlin.equals(tmp$, Xml$Type$TEXT_getInstance()))
        return this.content;
      else if (Kotlin.equals(tmp$, Xml$Type$COMMENT_getInstance()))
        return '';
      else
        return Kotlin.noWhenBranchMatched();
    }
  });
  Xml.prototype.toOuterXmlIndented_2swh6d$ = function (indenter) {
    if (indenter === void 0)
      indenter = new Indenter();
    var tmp$;
    tmp$ = this.type;
    if (Kotlin.equals(tmp$, Xml$Type$NODE_getInstance()))
      if (this.allChildren.isEmpty()) {
        indenter.line_61zpoe$('<' + this.name + this.attributesStr + '/>');
      }
       else {
        indenter.line_61zpoe$('<' + this.name + this.attributesStr + '>');
        indenter._indent();
        try {
          var tmp$_0;
          tmp$_0 = this.allChildren.iterator();
          while (tmp$_0.hasNext()) {
            var child = tmp$_0.next();
            child.toOuterXmlIndented_2swh6d$(indenter);
          }
        }
        finally {
          indenter._unindent();
        }
        indenter.line_61zpoe$('<\/' + this.name + '>');
      }
     else if (Kotlin.equals(tmp$, Xml$Type$TEXT_getInstance()))
      indenter.line_61zpoe$(this.content);
    else if (Kotlin.equals(tmp$, Xml$Type$COMMENT_getInstance()))
      indenter.line_61zpoe$('<!--' + this.content + '-->');
    else
      Kotlin.noWhenBranchMatched();
    return indenter;
  };
  Object.defineProperty(Xml.prototype, 'attributesStr', {
    get: function () {
      var $receiver = toList_1(this.attributes);
      var destination = ArrayList_init(collectionSizeOrDefault($receiver, 10));
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var item = tmp$.next();
        destination.add_11rb$(' ' + item.first + '=' + '"' + item.second + '"');
      }
      return joinToString(destination, '');
    }
  });
  Object.defineProperty(Xml.prototype, 'outerXml', {
    get: function () {
      var tmp$;
      tmp$ = this.type;
      if (Kotlin.equals(tmp$, Xml$Type$NODE_getInstance()))
        if (this.allChildren.isEmpty()) {
          return '<' + this.name + this.attributesStr + '/>';
        }
         else {
          var $receiver = this.allChildren;
          var transform = Kotlin.getPropertyCallableRef('outerXml', 1, function ($receiver) {
            return $receiver.outerXml;
          });
          var destination = ArrayList_init(collectionSizeOrDefault($receiver, 10));
          var tmp$_0;
          tmp$_0 = $receiver.iterator();
          while (tmp$_0.hasNext()) {
            var item = tmp$_0.next();
            destination.add_11rb$(transform(item));
          }
          var children = joinToString(destination, '');
          return '<' + this.name + this.attributesStr + '>' + children + '<\/' + this.name + '>';
        }
       else if (Kotlin.equals(tmp$, Xml$Type$TEXT_getInstance()))
        return this.content;
      else if (Kotlin.equals(tmp$, Xml$Type$COMMENT_getInstance()))
        return '<!--' + this.content + '-->';
      else
        return Kotlin.noWhenBranchMatched();
    }
  });
  Object.defineProperty(Xml.prototype, 'innerXml', {
    get: function () {
      var tmp$;
      tmp$ = this.type;
      if (Kotlin.equals(tmp$, Xml$Type$NODE_getInstance())) {
        var $receiver = this.allChildren;
        var transform = Kotlin.getPropertyCallableRef('outerXml', 1, function ($receiver) {
          return $receiver.outerXml;
        });
        var destination = ArrayList_init(collectionSizeOrDefault($receiver, 10));
        var tmp$_0;
        tmp$_0 = $receiver.iterator();
        while (tmp$_0.hasNext()) {
          var item = tmp$_0.next();
          destination.add_11rb$(transform(item));
        }
        return joinToString(destination, '');
      }
       else if (Kotlin.equals(tmp$, Xml$Type$TEXT_getInstance()))
        return this.content;
      else if (Kotlin.equals(tmp$, Xml$Type$COMMENT_getInstance()))
        return '<!--' + this.content + '-->';
      else
        return Kotlin.noWhenBranchMatched();
    }
  });
  Xml.prototype.get_61zpoe$ = function (name) {
    return this.children_61zpoe$(name);
  };
  Xml.prototype.children_61zpoe$ = function (name) {
    var $receiver = this.allChildren;
    var destination = ArrayList_init();
    var tmp$;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      if (equals(element.name, name, true))
        destination.add_11rb$(element);
    }
    return destination;
  };
  Xml.prototype.child_61zpoe$ = function (name) {
    return firstOrNull_0(this.children_61zpoe$(name));
  };
  Xml.prototype.childText_61zpoe$ = function (name) {
    var tmp$;
    return (tmp$ = this.child_61zpoe$(name)) != null ? tmp$.text : null;
  };
  Xml.prototype.hasAttribute_61zpoe$ = function (key) {
    return this.attributesLC.containsKey_11rb$(key);
  };
  Xml.prototype.attribute_61zpoe$ = function (name) {
    return this.attributesLC.get_11rb$(name);
  };
  Xml.prototype.getString_61zpoe$ = function (name) {
    return this.attributesLC.get_11rb$(name);
  };
  Xml.prototype.getInt_61zpoe$ = function (name) {
    var tmp$;
    return (tmp$ = this.attributesLC.get_11rb$(name)) != null ? toInt(tmp$) : null;
  };
  Xml.prototype.getLong_61zpoe$ = function (name) {
    var tmp$;
    return (tmp$ = this.attributesLC.get_11rb$(name)) != null ? toLong(tmp$) : null;
  };
  Xml.prototype.getDouble_61zpoe$ = function (name) {
    var tmp$;
    return (tmp$ = this.attributesLC.get_11rb$(name)) != null ? toDouble(tmp$) : null;
  };
  Xml.prototype.getFloat_61zpoe$ = function (name) {
    var tmp$;
    return (tmp$ = this.attributesLC.get_11rb$(name)) != null ? toDouble(tmp$) : null;
  };
  Xml.prototype.double_io5o9c$ = function (name, defaultValue) {
    if (defaultValue === void 0)
      defaultValue = 0.0;
    var tmp$, tmp$_0;
    return (tmp$_0 = (tmp$ = this.attributesLC.get_11rb$(name)) != null ? toDoubleOrNull(tmp$) : null) != null ? tmp$_0 : defaultValue;
  };
  Xml.prototype.float_9sobi5$ = function (name, defaultValue) {
    if (defaultValue === void 0)
      defaultValue = 0.0;
    var tmp$, tmp$_0;
    return (tmp$_0 = (tmp$ = this.attributesLC.get_11rb$(name)) != null ? toDoubleOrNull(tmp$) : null) != null ? tmp$_0 : defaultValue;
  };
  Xml.prototype.int_bm4lxs$ = function (name, defaultValue) {
    if (defaultValue === void 0)
      defaultValue = 0;
    var tmp$, tmp$_0;
    return (tmp$_0 = (tmp$ = this.attributesLC.get_11rb$(name)) != null ? toIntOrNull_0(tmp$) : null) != null ? tmp$_0 : defaultValue;
  };
  Xml.prototype.long_4wgjuj$ = function (name, defaultValue) {
    if (defaultValue === void 0)
      defaultValue = Kotlin.Long.ZERO;
    var tmp$, tmp$_0;
    return (tmp$_0 = (tmp$ = this.attributesLC.get_11rb$(name)) != null ? toLongOrNull(tmp$) : null) != null ? tmp$_0 : defaultValue;
  };
  Xml.prototype.str_puj7f4$ = function (name, defaultValue) {
    if (defaultValue === void 0)
      defaultValue = '';
    var tmp$;
    return (tmp$ = this.attributesLC.get_11rb$(name)) != null ? tmp$ : defaultValue;
  };
  Xml.prototype.doubleNull_61zpoe$ = function (name) {
    var tmp$;
    return (tmp$ = this.attributesLC.get_11rb$(name)) != null ? toDoubleOrNull(tmp$) : null;
  };
  Xml.prototype.floatNull_61zpoe$ = function (name) {
    var tmp$;
    return (tmp$ = this.attributesLC.get_11rb$(name)) != null ? toDoubleOrNull(tmp$) : null;
  };
  Xml.prototype.intNull_61zpoe$ = function (name) {
    var tmp$;
    return (tmp$ = this.attributesLC.get_11rb$(name)) != null ? toIntOrNull_0(tmp$) : null;
  };
  Xml.prototype.longNull_61zpoe$ = function (name) {
    var tmp$;
    return (tmp$ = this.attributesLC.get_11rb$(name)) != null ? toLongOrNull(tmp$) : null;
  };
  Xml.prototype.strNull_61zpoe$ = function (name) {
    return this.attributesLC.get_11rb$(name);
  };
  Xml.prototype.toString = function () {
    return this.outerXml;
  };
  function Xml$Type(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function Xml$Type_initFields() {
    Xml$Type_initFields = function () {
    };
    Xml$Type$NODE_instance = new Xml$Type('NODE', 0);
    Xml$Type$TEXT_instance = new Xml$Type('TEXT', 1);
    Xml$Type$COMMENT_instance = new Xml$Type('COMMENT', 2);
  }
  var Xml$Type$NODE_instance;
  function Xml$Type$NODE_getInstance() {
    Xml$Type_initFields();
    return Xml$Type$NODE_instance;
  }
  var Xml$Type$TEXT_instance;
  function Xml$Type$TEXT_getInstance() {
    Xml$Type_initFields();
    return Xml$Type$TEXT_instance;
  }
  var Xml$Type$COMMENT_instance;
  function Xml$Type$COMMENT_getInstance() {
    Xml$Type_initFields();
    return Xml$Type$COMMENT_instance;
  }
  Xml$Type.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'Type',
    interfaces: [Enum]
  };
  function Xml$Type$values() {
    return [Xml$Type$NODE_getInstance(), Xml$Type$TEXT_getInstance(), Xml$Type$COMMENT_getInstance()];
  }
  Xml$Type.values = Xml$Type$values;
  function Xml$Type$valueOf(name) {
    switch (name) {
      case 'NODE':
        return Xml$Type$NODE_getInstance();
      case 'TEXT':
        return Xml$Type$TEXT_getInstance();
      case 'COMMENT':
        return Xml$Type$COMMENT_getInstance();
      default:Kotlin.throwISE('No enum constant com.soywiz.korio.serialization.xml.Xml.Type.' + name);
    }
  }
  Xml$Type.valueOf_61zpoe$ = Xml$Type$valueOf;
  Xml.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'Xml',
    interfaces: []
  };
  Xml.prototype.component1 = function () {
    return this.type;
  };
  Xml.prototype.component2 = function () {
    return this.name;
  };
  Xml.prototype.component3 = function () {
    return this.attributes;
  };
  Xml.prototype.component4 = function () {
    return this.allChildren;
  };
  Xml.prototype.component5 = function () {
    return this.content;
  };
  Xml.prototype.copy_73d6zo$ = function (type, name, attributes, allChildren, content) {
    return new Xml(type === void 0 ? this.type : type, name === void 0 ? this.name : name, attributes === void 0 ? this.attributes : attributes, allChildren === void 0 ? this.allChildren : allChildren, content === void 0 ? this.content : content);
  };
  Xml.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.type) | 0;
    result = result * 31 + Kotlin.hashCode(this.name) | 0;
    result = result * 31 + Kotlin.hashCode(this.attributes) | 0;
    result = result * 31 + Kotlin.hashCode(this.allChildren) | 0;
    result = result * 31 + Kotlin.hashCode(this.content) | 0;
    return result;
  };
  Xml.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.type, other.type) && Kotlin.equals(this.name, other.name) && Kotlin.equals(this.attributes, other.attributes) && Kotlin.equals(this.allChildren, other.allChildren) && Kotlin.equals(this.content, other.content)))));
  };
  function get_isText($receiver) {
    return $receiver.type === Xml$Type$TEXT_getInstance();
  }
  function get_isComment($receiver) {
    return $receiver.type === Xml$Type$COMMENT_getInstance();
  }
  function get_isNode($receiver) {
    return $receiver.type === Xml$Type$NODE_getInstance();
  }
  function XmlEntities() {
    XmlEntities_instance = this;
    this.charToEntity_0 = lmapOf([to(toBoxedChar(34), '&quot;'), to(toBoxedChar(39), '&apos;'), to(toBoxedChar(60), '&lt;'), to(toBoxedChar(62), '&gt;'), to(toBoxedChar(38), '&amp;')]);
    this.entities_0 = StrReader$Literals$Companion_getInstance().fromList_kand9s$(copyToArray(this.charToEntity_0.values));
    this.entityToChar_0 = flip(this.charToEntity_0);
  }
  function XmlEntities$encode$lambda(this$XmlEntities) {
    return function (it) {
      var tmp$;
      return (tmp$ = this$XmlEntities.charToEntity_0.get_11rb$(it)) != null ? tmp$ : String.fromCharCode(unboxChar(it));
    };
  }
  XmlEntities.prototype.encode_61zpoe$ = function (str) {
    return transform(str, XmlEntities$encode$lambda(this));
  };
  XmlEntities.prototype.decode_61zpoe$ = function (str) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    var r = new StrReader(str);
    var out = '';
    while (!r.eof) {
      var c = r.readChar();
      if (c === 38) {
        var value = (tmp$ = r.readUntilIncluded_s8itvh$(59)) != null ? tmp$ : '';
        var full = '&' + value;
        tmp$_2 = out;
        if (startsWith(value, 35)) {
          var tmp$_3 = String;
          var tmp$_4 = tmp$_3.fromCharCode;
          var endIndex = value.length - 1 | 0;
          tmp$_1 = tmp$_4.call(tmp$_3, Kotlin.toChar(toInt(value.substring(1, endIndex))));
        }
         else {
          var $receiver = this.entityToChar_0;
          var tmp$_5;
          if ((Kotlin.isType(tmp$_5 = $receiver, Map) ? tmp$_5 : Kotlin.throwCCE()).containsKey_11rb$(full)) {
            tmp$_1 = (tmp$_0 = unboxChar(this.entityToChar_0.get_11rb$(full))) === null ? null : String.fromCharCode(tmp$_0);
          }
           else {
            tmp$_1 = full;
          }
        }
        out = tmp$_2 + tmp$_1;
      }
       else
        out += String.fromCharCode(c);
    }
    return out;
  };
  XmlEntities.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'XmlEntities',
    interfaces: []
  };
  var XmlEntities_instance = null;
  function XmlEntities_getInstance() {
    if (XmlEntities_instance === null) {
      new XmlEntities();
    }
    return XmlEntities_instance;
  }
  function str($receiver, name, defaultValue) {
    if (defaultValue === void 0)
      defaultValue = '';
    var tmp$;
    return (tmp$ = first_1($receiver).attributes.get_11rb$(name)) != null ? tmp$ : defaultValue;
  }
  function children($receiver, name) {
    var destination = ArrayList_init();
    var tmp$;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      var list = element.children_61zpoe$(name);
      addAll(destination, list);
    }
    return destination;
  }
  function get_allChildren($receiver) {
    var transform = Kotlin.getPropertyCallableRef('allChildren', 1, function ($receiver) {
      return $receiver.allChildren;
    });
    var destination = ArrayList_init();
    var tmp$;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      var list = transform(element);
      addAll(destination, list);
    }
    return destination;
  }
  function get_0($receiver, name) {
    return children($receiver, name);
  }
  function toXml($receiver) {
    return Xml$Companion_getInstance().parse_61zpoe$($receiver);
  }
  function Xml_0(str) {
    return Xml$Companion_getInstance().parse_61zpoe$(str);
  }
  function readXml($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$readXml($receiver_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readXml($receiver_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$readXml.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readXml.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readXml.prototype.constructor = Coroutine$readXml;
  Coroutine$readXml.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$$receiver.readString_qa9gbo$(void 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return Xml_0(this.result_0);
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function XmlStream() {
    XmlStream_instance = this;
  }
  XmlStream.prototype.parse_61zpoe$ = function (str) {
    return this.parse_f6s5ko$(new StrReader(str));
  };
  XmlStream.prototype.parse_f6s5ko$ = function (r) {
    return new XmlStream$Xml2Iterable(r);
  };
  function XmlStream$Xml2Iterator(r2) {
    this.r = r2.clone();
    this.buffer = '';
    this.hasMore = true;
    this.current = null;
  }
  XmlStream$Xml2Iterator.prototype.flushBuffer = function () {
    if (this.buffer.length > 0) {
      this.current = new XmlStream$Element$Text(XmlEntities_getInstance().decode_61zpoe$(this.buffer));
      this.buffer = '';
    }
  };
  XmlStream$Xml2Iterator.prototype.prepare = function () {
    var tmp$, tmp$_0, tmp$_1;
    if (this.current != null)
      return;
    if (this.r.eof) {
      this.current = null;
      this.hasMore = false;
      return;
    }
    mainLoop: while (!this.r.eof) {
      if (this.r.peekChar() === 60) {
        this.flushBuffer();
        if (this.current != null)
          return;
        this.r.readExpect_61zpoe$('<');
        if (this.r.matchLit_61zpoe$('![CDATA[') != null) {
          var start = this.r.pos;
          while (!this.r.eof) {
            var end = this.r.pos;
            if (this.r.matchLit_61zpoe$(']]>') != null) {
              this.current = new XmlStream$Element$Text(this.r.createRange_n8acyv$(until(start, end)).text);
              return;
            }
            this.r.readChar();
          }
          break mainLoop;
        }
         else if (this.r.matchLit_61zpoe$('!--') != null) {
          var start_0 = this.r.pos;
          while (!this.r.eof) {
            var end_0 = this.r.pos;
            if (this.r.matchLit_61zpoe$('-->') != null) {
              this.current = new XmlStream$Element$CommentTag(this.r.createRange_n8acyv$(until(start_0, end_0)).text);
              return;
            }
            this.r.readChar();
          }
          break mainLoop;
        }
         else {
          this.r.skipSpaces();
          var processingInstruction = this.r.matchLit_61zpoe$('?') != null;
          var close = this.r.matchLit_61zpoe$('/') != null;
          this.r.skipSpaces();
          var name = (tmp$ = this.r.matchIdentifier()) != null ? tmp$ : Kotlin.throwNPE();
          this.r.skipSpaces();
          var attributes = lmapOf([]);
          while (this.r.peekChar() !== 63 && this.r.peekChar() !== 47 && this.r.peekChar() !== 62) {
            tmp$_0 = this.r.matchIdentifier();
            if (tmp$_0 == null) {
              throw new IllegalArgumentException('Malformed document or unsupported xml construct around ~' + this.r.peek_za3lpa$(10) + '~');
            }
            var key = tmp$_0;
            this.r.skipSpaces();
            if (this.r.matchLit_61zpoe$('=') != null) {
              this.r.skipSpaces();
              var argsQuote = this.r.matchSingleOrDoubleQuoteString();
              if (argsQuote != null) {
                tmp$_1 = XmlEntities_getInstance().decode_61zpoe$(substr_0(argsQuote, 1, -1));
              }
               else {
                var argsNq = this.r.matchIdentifier();
                tmp$_1 = XmlEntities_getInstance().decode_61zpoe$(argsNq != null ? argsNq : Kotlin.throwNPE());
              }
              var value = tmp$_1;
              attributes.put_xwzc9p$(key, value);
            }
             else {
              attributes.put_xwzc9p$(key, key);
            }
            this.r.skipSpaces();
          }
          var openclose = this.r.matchLit_61zpoe$('/') != null;
          var processingInstructionEnd = this.r.matchLit_61zpoe$('?') != null;
          this.r.readExpect_61zpoe$('>');
          this.current = processingInstruction ? new XmlStream$Element$ProcessingInstructionTag(name, attributes) : openclose ? new XmlStream$Element$OpenCloseTag(name, attributes) : close ? new XmlStream$Element$CloseTag(name) : new XmlStream$Element$OpenTag(name, attributes);
          return;
        }
      }
       else {
        this.buffer += String.fromCharCode(this.r.readChar());
      }
    }
    this.hasMore = this.buffer.length > 0;
    this.flushBuffer();
  };
  XmlStream$Xml2Iterator.prototype.next = function () {
    this.prepare();
    var out = this.current;
    this.current = null;
    return out != null ? out : Kotlin.throwNPE();
  };
  XmlStream$Xml2Iterator.prototype.hasNext = function () {
    this.prepare();
    return this.hasMore;
  };
  XmlStream$Xml2Iterator.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'Xml2Iterator',
    interfaces: [Iterator]
  };
  function XmlStream$Xml2Iterable(reader2) {
    this.reader2 = reader2;
    this.reader = this.reader2.clone();
  }
  XmlStream$Xml2Iterable.prototype.iterator = function () {
    return new XmlStream$Xml2Iterator(this.reader);
  };
  XmlStream$Xml2Iterable.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'Xml2Iterable',
    interfaces: [Iterable]
  };
  function XmlStream$Element() {
  }
  function XmlStream$Element$ProcessingInstructionTag(name, attributes) {
    XmlStream$Element.call(this);
    this.name = name;
    this.attributes = attributes;
  }
  XmlStream$Element$ProcessingInstructionTag.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'ProcessingInstructionTag',
    interfaces: [XmlStream$Element]
  };
  function XmlStream$Element$OpenCloseTag(name, attributes) {
    XmlStream$Element.call(this);
    this.name = name;
    this.attributes = attributes;
  }
  XmlStream$Element$OpenCloseTag.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'OpenCloseTag',
    interfaces: [XmlStream$Element]
  };
  function XmlStream$Element$OpenTag(name, attributes) {
    XmlStream$Element.call(this);
    this.name = name;
    this.attributes = attributes;
  }
  XmlStream$Element$OpenTag.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'OpenTag',
    interfaces: [XmlStream$Element]
  };
  function XmlStream$Element$CommentTag(text) {
    XmlStream$Element.call(this);
    this.text = text;
  }
  XmlStream$Element$CommentTag.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'CommentTag',
    interfaces: [XmlStream$Element]
  };
  function XmlStream$Element$CloseTag(name) {
    XmlStream$Element.call(this);
    this.name = name;
  }
  XmlStream$Element$CloseTag.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'CloseTag',
    interfaces: [XmlStream$Element]
  };
  function XmlStream$Element$Text(text) {
    XmlStream$Element.call(this);
    this.text = text;
  }
  XmlStream$Element$Text.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'Text',
    interfaces: [XmlStream$Element]
  };
  XmlStream$Element.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'Element',
    interfaces: []
  };
  XmlStream.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'XmlStream',
    interfaces: []
  };
  var XmlStream_instance = null;
  function XmlStream_getInstance() {
    if (XmlStream_instance === null) {
      new XmlStream();
    }
    return XmlStream_instance;
  }
  function Yaml() {
    Yaml_instance = this;
    this.TRACE = false;
  }
  Yaml.prototype.decode_61zpoe$ = function (str) {
    return this.read_0(new ListReader(this.tokenize_qdjkzt$(new StrReader(str))), 0);
  };
  Yaml.prototype.decodeToType_iy04uf$ = defineInlineFunction('korio-js.com.soywiz.korio.serialization.yaml.Yaml.decodeToType_iy04uf$', function (T_0, isT, s, mapper) {
    return this.decodeToType_27ii8w$(s, Kotlin.getKClass(T_0), mapper);
  });
  Yaml.prototype.decodeToType_27ii8w$ = function (s, clazz, mapper) {
    return mapper.toTyped_gkqos$(this.decode_61zpoe$(s), clazz);
  };
  Yaml.prototype.read_61zpoe$ = function (str) {
    return this.read_0(new ListReader(this.tokenize_qdjkzt$(new StrReader(str))), 0);
  };
  Yaml.prototype.parseStr_1 = function (tok) {
    if (Kotlin.isType(tok, Yaml$Token$STR))
      return tok.ustr;
    else
      return this.parseStr_0(tok.str);
  };
  Yaml.prototype.parseStr_0 = function (str) {
    var tmp$, tmp$_0;
    if (Kotlin.equals(str, 'null'))
      return null;
    else if (Kotlin.equals(str, 'true'))
      return true;
    else if (Kotlin.equals(str, 'false'))
      return false;
    else
      return (tmp$_0 = (tmp$ = toIntOrNull_0(str)) != null ? tmp$ : toDoubleOrNull(str)) != null ? tmp$_0 : str;
  };
  Yaml.prototype.read_0 = function (s, level) {
    var tmp$, tmp$_0;
    var list = null;
    var map = null;
    var levelStr = this.TRACE ? repeat('  ', level) : '';
    linehandle: while (s.hasMore) {
      var token = s.peek();
      var line = Kotlin.isType(tmp$ = token, Yaml$Token$LINE) ? tmp$ : null;
      var lineLevel = line != null ? line.level : null;
      if (this.TRACE && line != null)
        println(levelStr + 'LINE(' + Kotlin.toString(lineLevel) + ')');
      if (lineLevel != null && lineLevel > level) {
        var res = this.read_0(s, lineLevel);
        if (list != null) {
          if (this.TRACE)
            println(levelStr + 'CHILD.list.add: ' + Kotlin.toString(res));
          list.add_11rb$(res);
        }
         else {
          if (this.TRACE)
            println(levelStr + 'CHILD.return: ' + Kotlin.toString(res));
          return res;
        }
      }
       else if (lineLevel != null && lineLevel < level) {
        if (this.TRACE)
          println(levelStr + 'PARENT: level < line.level');
        break;
      }
       else {
        if (line != null)
          s.read();
        if (s.eof)
          break;
        var item = s.peek();
        tmp$_0 = item.str;
        if (Kotlin.equals(tmp$_0, '-')) {
          if (!Kotlin.equals(s.read().str, '-'))
            get_invalidOp();
          if (list == null) {
            list = ArrayList_init();
          }
          if (this.TRACE)
            println(levelStr + 'LIST_ITEM...');
          var res_0 = this.read_0(s, level + 1 | 0);
          if (this.TRACE)
            println(levelStr + 'LIST_ITEM: ' + Kotlin.toString(res_0));
          list.add_11rb$(res_0);
        }
         else if (Kotlin.equals(tmp$_0, '[')) {
          if (!Kotlin.equals(s.read().str, '['))
            get_invalidOp();
          var olist = ArrayList_init();
          array: while (!Kotlin.equals(s.peek().str, ']')) {
            var element = this.read_0(s, level + 1 | 0);
            olist.add_11rb$(element);
            var p = s.peek().str;
            if (Kotlin.equals(p, ',')) {
              s.read();
              continue array;
            }
             else if (Kotlin.equals(p, ']'))
              break array;
            else
              invalidOp("Unexpected '" + p + "'");
          }
          if (!Kotlin.equals(s.read().str, ']'))
            get_invalidOp();
          return olist;
        }
         else {
          var kkey = s.read();
          var key = kkey.str;
          if (s.eof || !Kotlin.equals(s.peek().str, ':')) {
            if (this.TRACE)
              println(levelStr + 'LIT: ' + key);
            return this.parseStr_1(kkey);
          }
           else {
            if (map == null)
              map = lmapOf([]);
            if (!Kotlin.equals(s.read().str, ':'))
              get_invalidOp();
            if (this.TRACE)
              println(levelStr + 'MAP[' + key + ']...');
            var value = this.read_0(s, level + 1 | 0);
            map.put_xwzc9p$(key, value);
            if (this.TRACE)
              println(levelStr + 'MAP[' + key + ']: ' + Kotlin.toString(value));
          }
        }
      }
    }
    if (this.TRACE)
      println(levelStr + 'RETURN: list=' + Kotlin.toString(list) + ', map=' + Kotlin.toString(map));
    return list != null ? list : map;
  };
  var isBlank = Kotlin.kotlin.text.isBlank_gw00vp$;
  function Yaml$tokenize$flush(closure$str, closure$out) {
    return function () {
      var tmp$ = !isBlank(closure$str.v);
      if (tmp$) {
        tmp$ = closure$str.v.length > 0;
      }
      if (tmp$) {
        var tmp$_0 = closure$out;
        var $receiver = closure$str.v;
        var tmp$_1;
        var element = new Yaml$Token$ID(trim_0(Kotlin.isCharSequence(tmp$_1 = $receiver) ? tmp$_1 : Kotlin.throwCCE()).toString());
        tmp$_0.add_11rb$(element);
        closure$str.v = '';
      }
    };
  }
  var StrReader$readWhile$lambda_0 = wrapFunction(function () {
    var toBoxedChar = Kotlin.toBoxedChar;
    return function (closure$filter, this$StrReader) {
      return function () {
        var $this = this$StrReader;
        var filter = closure$filter;
        while ($this.hasMore && filter(toBoxedChar($this.peekChar())))
          $this.readChar();
        return Unit;
      };
    };
  });
  Yaml.prototype.tokenize_qdjkzt$ = function ($receiver) {
    var out = ArrayList_init();
    var s = $receiver;
    var str = {v: ''};
    var flush = Yaml$tokenize$flush(str, out);
    var indents = new LinkedList();
    linestart: while ($receiver.hasMore) {
      flush();
      var tmp$;
      var start = $receiver.pos;
      while (true) {
        var tmp$_0 = $receiver.hasMore;
        if (tmp$_0) {
          tmp$_0 = isWhitespace(unboxChar(toBoxedChar($receiver.peekChar())));
        }
        if (!tmp$_0)
          break;
        $receiver.readChar();
      }
      var end = $receiver.pos;
      var indentStr = replace((tmp$ = end > start ? $receiver.slice_vux9f0$(start, end) : null) != null ? tmp$ : '', '\t', '     ');
      var indent = indentStr.length;
      if (indents.isEmpty() || indent > indents.last) {
        indents.add_11rb$(indent);
      }
       else {
        while (indents.isNotEmpty() && indent < indents.last)
          indents.removeLast();
        if (indents.isEmpty())
          get_invalidOp();
      }
      var indentLevel = indents.size - 1 | 0;
      while (!out.isEmpty() && Kotlin.isType(last(out), Yaml$Token$LINE)) {
        out.removeAt_za3lpa$(out.size - 1 | 0);
      }
      var element = new Yaml$Token$LINE(indentStr, indentLevel);
      out.add_11rb$(element);
      while ($receiver.hasMore) {
        var c = $receiver.read();
        if (c === 58 || c === 45 || c === 91 || c === 93 || c === 44) {
          flush();
          var element_0 = new Yaml$Token$SYMBOL(String.fromCharCode(c));
          out.add_11rb$(element_0);
        }
         else if (c === 35) {
          flush();
          this.readUntilLineEnd_qdjkzt$($receiver);
          $receiver.skip_za3lpa$();
          continue linestart;
        }
         else if (c === 10) {
          flush();
          continue linestart;
        }
         else if (c === 34 || c === 39) {
          flush();
          s.unread_za3lpa$();
          var element_1 = new Yaml$Token$STR(readStringLit(s));
          out.add_11rb$(element_1);
        }
         else
          str.v += String.fromCharCode(c);
      }
    }
    flush();
    return out;
  };
  function Yaml$Token() {
  }
  function Yaml$Token$LINE(str, level) {
    this.str_bmiag0$_0 = str;
    this.level = level;
  }
  Object.defineProperty(Yaml$Token$LINE.prototype, 'str', {
    get: function () {
      return this.str_bmiag0$_0;
    }
  });
  Yaml$Token$LINE.prototype.toString = function () {
    return 'LINE(' + this.level + ')';
  };
  Yaml$Token$LINE.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'LINE',
    interfaces: [Yaml$Token]
  };
  Yaml$Token$LINE.prototype.component1 = function () {
    return this.str;
  };
  Yaml$Token$LINE.prototype.component2 = function () {
    return this.level;
  };
  Yaml$Token$LINE.prototype.copy_bm4lxs$ = function (str, level) {
    return new Yaml$Token$LINE(str === void 0 ? this.str : str, level === void 0 ? this.level : level);
  };
  Yaml$Token$LINE.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.str) | 0;
    result = result * 31 + Kotlin.hashCode(this.level) | 0;
    return result;
  };
  Yaml$Token$LINE.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.str, other.str) && Kotlin.equals(this.level, other.level)))));
  };
  function Yaml$Token$ID(str) {
    this.str_z6v5y1$_0 = str;
  }
  Object.defineProperty(Yaml$Token$ID.prototype, 'str', {
    get: function () {
      return this.str_z6v5y1$_0;
    }
  });
  Yaml$Token$ID.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'ID',
    interfaces: [Yaml$Token]
  };
  Yaml$Token$ID.prototype.component1 = function () {
    return this.str;
  };
  Yaml$Token$ID.prototype.copy_61zpoe$ = function (str) {
    return new Yaml$Token$ID(str === void 0 ? this.str : str);
  };
  Yaml$Token$ID.prototype.toString = function () {
    return 'ID(str=' + Kotlin.toString(this.str) + ')';
  };
  Yaml$Token$ID.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.str) | 0;
    return result;
  };
  Yaml$Token$ID.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.str, other.str))));
  };
  function Yaml$Token$STR(str) {
    this.str_3qhttj$_0 = str;
    this.ustr = unquote(this.str);
  }
  Object.defineProperty(Yaml$Token$STR.prototype, 'str', {
    get: function () {
      return this.str_3qhttj$_0;
    }
  });
  Yaml$Token$STR.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'STR',
    interfaces: [Yaml$Token]
  };
  Yaml$Token$STR.prototype.component1 = function () {
    return this.str;
  };
  Yaml$Token$STR.prototype.copy_61zpoe$ = function (str) {
    return new Yaml$Token$STR(str === void 0 ? this.str : str);
  };
  Yaml$Token$STR.prototype.toString = function () {
    return 'STR(str=' + Kotlin.toString(this.str) + ')';
  };
  Yaml$Token$STR.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.str) | 0;
    return result;
  };
  Yaml$Token$STR.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.str, other.str))));
  };
  function Yaml$Token$SYMBOL(str) {
    this.str_q5hbek$_0 = str;
  }
  Object.defineProperty(Yaml$Token$SYMBOL.prototype, 'str', {
    get: function () {
      return this.str_q5hbek$_0;
    }
  });
  Yaml$Token$SYMBOL.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'SYMBOL',
    interfaces: [Yaml$Token]
  };
  Yaml$Token$SYMBOL.prototype.component1 = function () {
    return this.str;
  };
  Yaml$Token$SYMBOL.prototype.copy_61zpoe$ = function (str) {
    return new Yaml$Token$SYMBOL(str === void 0 ? this.str : str);
  };
  Yaml$Token$SYMBOL.prototype.toString = function () {
    return 'SYMBOL(str=' + Kotlin.toString(this.str) + ')';
  };
  Yaml$Token$SYMBOL.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.str) | 0;
    return result;
  };
  Yaml$Token$SYMBOL.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.str, other.str))));
  };
  Yaml$Token.$metadata$ = {
    kind: Kotlin.Kind.INTERFACE,
    simpleName: 'Token',
    interfaces: []
  };
  var StrReader$readUntil$lambda = wrapFunction(function () {
    var toBoxedChar = Kotlin.toBoxedChar;
    return function (closure$filter, this$StrReader) {
      return function () {
        var $this = this$StrReader;
        var filter = closure$filter;
        while ($this.hasMore && !filter(toBoxedChar($this.peekChar())))
          $this.readChar();
        return Unit;
      };
    };
  });
  Yaml.prototype.readUntilLineEnd_qdjkzt$ = function ($receiver) {
    var tmp$;
    var start = $receiver.pos;
    while (true) {
      var tmp$_0 = $receiver.hasMore;
      if (tmp$_0) {
        tmp$_0 = !(unboxChar(toBoxedChar($receiver.peekChar())) === 10);
      }
      if (!tmp$_0)
        break;
      $receiver.readChar();
    }
    var end = $receiver.pos;
    return (tmp$ = end > start ? $receiver.slice_vux9f0$(start, end) : null) != null ? tmp$ : '';
  };
  Yaml.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'Yaml',
    interfaces: []
  };
  var Yaml_instance = null;
  function Yaml_getInstance() {
    if (Yaml_instance === null) {
      new Yaml();
    }
    return Yaml_instance;
  }
  function AsyncBufferedInputStream(base, bufferSize) {
    if (bufferSize === void 0)
      bufferSize = 8192;
    this.base = base;
    this.bufferSize = bufferSize;
    this.buf_0 = new SyncProduceConsumerByteBuffer();
    this.queue_0 = new AsyncThread();
  }
  function AsyncBufferedInputStream$require$lambda(this$AsyncBufferedInputStream_0, closure$len_0) {
    return function (continuation_0, suspended) {
      var instance = new Coroutine$AsyncBufferedInputStream$require$lambda(this$AsyncBufferedInputStream_0, closure$len_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$AsyncBufferedInputStream$require$lambda(this$AsyncBufferedInputStream_0, closure$len_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$this$AsyncBufferedInputStream = this$AsyncBufferedInputStream_0;
    this.local$closure$len = closure$len_0;
    this.local$tmp$ = void 0;
  }
  Coroutine$AsyncBufferedInputStream$require$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$AsyncBufferedInputStream$require$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$AsyncBufferedInputStream$require$lambda.prototype.constructor = Coroutine$AsyncBufferedInputStream$require$lambda;
  Coroutine$AsyncBufferedInputStream$require$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            if (this.local$this$AsyncBufferedInputStream.buf_0.available >= this.local$closure$len) {
              this.state_0 = 4;
              continue;
            }

            this.local$tmp$ = this.local$this$AsyncBufferedInputStream.buf_0;
            this.state_0 = 3;
            this.result_0 = readBytesUpTo(this.local$this$AsyncBufferedInputStream.base, this.local$this$AsyncBufferedInputStream.bufferSize, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            this.local$tmp$.produce_fqrh44$(this.result_0);
            this.state_0 = 2;
            continue;
          case 4:
            return Unit;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  AsyncBufferedInputStream.prototype.require_za3lpa$ = function (len_0, continuation_0, suspended) {
    var instance = new Coroutine$require_za3lpa$(this, len_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$require_za3lpa$($this, len_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$len = len_0;
  }
  Coroutine$require_za3lpa$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$require_za3lpa$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$require_za3lpa$.prototype.constructor = Coroutine$require_za3lpa$;
  Coroutine$require_za3lpa$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$len === void 0)
              this.local$len = 1;
            this.state_0 = 2;
            this.result_0 = this.$this.queue_0.invoke_lnyleu$(AsyncBufferedInputStream$require$lambda(this.$this, this.local$len), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  AsyncBufferedInputStream.prototype.read_mj6st8$ = function (buffer_0, offset_0, len_0, continuation_0, suspended) {
    var instance = new Coroutine$read_mj6st8$_0(this, buffer_0, offset_0, len_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$read_mj6st8$_0($this, buffer_0, offset_0, len_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$buffer = buffer_0;
    this.local$offset = offset_0;
    this.local$len = len_0;
  }
  Coroutine$read_mj6st8$_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$read_mj6st8$_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$read_mj6st8$_0.prototype.constructor = Coroutine$read_mj6st8$_0;
  Coroutine$read_mj6st8$_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.require_za3lpa$(void 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.$this.buf_0.consume_mj6st8$(this.local$buffer, this.local$offset, this.local$len);
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  AsyncBufferedInputStream.prototype.readBufferedUntil_do4swe$ = function (end_0, including_0, continuation_0, suspended) {
    var instance = new Coroutine$readBufferedUntil_do4swe$(this, end_0, including_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$readBufferedUntil_do4swe$($this, end_0, including_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$out = void 0;
    this.local$chunk = void 0;
    this.local$end = end_0;
    this.local$including = including_0;
  }
  Coroutine$readBufferedUntil_do4swe$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readBufferedUntil_do4swe$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readBufferedUntil_do4swe$.prototype.constructor = Coroutine$readBufferedUntil_do4swe$;
  Coroutine$readBufferedUntil_do4swe$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$including === void 0)
              this.local$including = true;
            this.local$out = ByteArrayBuilder_init();
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.$this.require_za3lpa$(void 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            this.local$chunk = this.$this.buf_0.consumeUntil_do4swe$(this.local$end, this.local$including);
            this.local$out.append_fqrh44$(this.local$chunk);
            if (!(this.local$chunk.length === 0) && last_0(this.local$chunk) === this.local$end) {
              this.state_0 = 5;
              continue;
            }
             else {
              this.state_0 = 4;
              continue;
            }

          case 4:
            this.state_0 = 2;
            continue;
          case 5:
            return this.local$out.toByteArray();
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  AsyncBufferedInputStream.prototype.close = function (continuation_0, suspended) {
    var instance = new Coroutine$close_1(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$close_1($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
  }
  Coroutine$close_1.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$close_1.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$close_1.prototype.constructor = Coroutine$close_1;
  Coroutine$close_1.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.base.close(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  AsyncBufferedInputStream.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'AsyncBufferedInputStream',
    interfaces: [AsyncInputStream]
  };
  function toBuffered($receiver, bufferSize) {
    if (bufferSize === void 0)
      bufferSize = 8192;
    return new AsyncBufferedInputStream($receiver, bufferSize);
  }
  function AsyncProduceConsumerByteBuffer() {
    AsyncProduceConsumerByteBuffer$Companion_getInstance();
    this.current_0 = AsyncProduceConsumerByteBuffer$Companion_getInstance().EMPTY_0;
    this.currentPos_0 = 0;
    this.buffers_0 = new LinkedList();
    this.availableInBuffers_0 = 0;
    this.producedSemaphore_0 = new AsyncSemaphore();
  }
  function AsyncProduceConsumerByteBuffer$Companion() {
    AsyncProduceConsumerByteBuffer$Companion_instance = this;
    this.EMPTY_0 = new Int8Array([]);
  }
  AsyncProduceConsumerByteBuffer$Companion.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var AsyncProduceConsumerByteBuffer$Companion_instance = null;
  function AsyncProduceConsumerByteBuffer$Companion_getInstance() {
    if (AsyncProduceConsumerByteBuffer$Companion_instance === null) {
      new AsyncProduceConsumerByteBuffer$Companion();
    }
    return AsyncProduceConsumerByteBuffer$Companion_instance;
  }
  Object.defineProperty(AsyncProduceConsumerByteBuffer.prototype, 'availableInCurrent_0', {
    get: function () {
      return this.current_0.length - this.currentPos_0 | 0;
    }
  });
  Object.defineProperty(AsyncProduceConsumerByteBuffer.prototype, 'available', {
    get: function () {
      return this.availableInCurrent_0 + this.availableInBuffers_0 | 0;
    }
  });
  AsyncProduceConsumerByteBuffer.prototype.produce_fqrh44$ = function (data) {
    this.buffers_0.add_11rb$(data);
    this.availableInBuffers_0 = this.availableInBuffers_0 + data.length | 0;
    this.producedSemaphore_0.release();
  };
  AsyncProduceConsumerByteBuffer.prototype.useNextBuffer_0 = function () {
    this.current_0 = this.buffers_0.isEmpty() ? AsyncProduceConsumerByteBuffer$Companion_getInstance().EMPTY_0 : this.buffers_0.removeFirst();
    this.currentPos_0 = 0;
    this.availableInBuffers_0 = this.availableInBuffers_0 - this.current_0.length | 0;
  };
  AsyncProduceConsumerByteBuffer.prototype.ensureCurrentBuffer_0 = function () {
    if (this.availableInCurrent_0 <= 0) {
      this.useNextBuffer_0();
    }
  };
  AsyncProduceConsumerByteBuffer.prototype.consume_mj6st8$ = function (data, offset, len) {
    if (offset === void 0)
      offset = 0;
    if (len === void 0)
      len = data.length;
    var totalRead = 0;
    var remaining = len;
    var outputPos = offset;
    while (remaining > 0) {
      this.ensureCurrentBuffer_0();
      var a = this.availableInCurrent_0;
      var readInCurrent = Math_0.min(a, len);
      if (readInCurrent <= 0)
        break;
      copyRangeTo_1(this.current_0, this.currentPos_0, data, outputPos, readInCurrent);
      this.currentPos_0 = this.currentPos_0 + readInCurrent | 0;
      remaining = remaining - readInCurrent | 0;
      totalRead = totalRead + readInCurrent | 0;
      outputPos = outputPos + readInCurrent | 0;
    }
    return totalRead;
  };
  AsyncProduceConsumerByteBuffer.prototype.consume_za3lpa$ = function (len) {
    var $receiver = new Int8Array(len);
    return copyOf($receiver, this.consume_mj6st8$($receiver, 0, len));
  };
  AsyncProduceConsumerByteBuffer.prototype.consumeUntil_do4swe$ = function (end, including) {
    if (including === void 0)
      including = true;
    var out = ByteArrayBuilder_init();
    while (true) {
      this.ensureCurrentBuffer_0();
      if (this.availableInCurrent_0 <= 0)
        break;
      var p = indexOf_2(this.current_0, this.currentPos_0, end);
      var pp = p < 0 ? this.current_0.length : including ? p + 1 | 0 : p;
      var len = pp - this.currentPos_0 | 0;
      if (len > 0)
        out.append_mj6st8$(this.current_0, this.currentPos_0, len);
      this.currentPos_0 = this.currentPos_0 + len | 0;
      if (p >= 0)
        break;
    }
    return out.toByteArray();
  };
  AsyncProduceConsumerByteBuffer.prototype.write_mj6st8$$default = function (buffer, offset, len, continuation) {
    var tmp$ = this.produce_fqrh44$;
    var toIndex = offset + len | 0;
    tmp$.call(this, buffer.slice(offset, toIndex));
  };
  AsyncProduceConsumerByteBuffer.prototype.read_mj6st8$ = function (buffer_0, offset_0, len_0, continuation_0, suspended) {
    var instance = new Coroutine$read_mj6st8$_1(this, buffer_0, offset_0, len_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$read_mj6st8$_1($this, buffer_0, offset_0, len_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$out = void 0;
    this.local$buffer = buffer_0;
    this.local$offset = offset_0;
    this.local$len = len_0;
  }
  Coroutine$read_mj6st8$_1.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$read_mj6st8$_1.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$read_mj6st8$_1.prototype.constructor = Coroutine$read_mj6st8$_1;
  Coroutine$read_mj6st8$_1.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$out = this.$this.consume_mj6st8$(this.local$buffer, this.local$offset, this.local$len);
            if (this.local$out === 0) {
              this.state_0 = 3;
              this.result_0 = this.$this.producedSemaphore_0.acquire(this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              break;
            }
             else {
              return this.local$out;
            }

          case 3:
            this.state_0 = 4;
            continue;
          case 4:
            this.state_0 = 2;
            continue;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  AsyncProduceConsumerByteBuffer.prototype.close = function (continuation) {
  };
  AsyncProduceConsumerByteBuffer.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'AsyncProduceConsumerByteBuffer',
    interfaces: [AsyncInputStream, AsyncOutputStream]
  };
  function AsyncBaseStream() {
  }
  AsyncBaseStream.$metadata$ = {
    kind: Kotlin.Kind.INTERFACE,
    simpleName: 'AsyncBaseStream',
    interfaces: [AsyncCloseable]
  };
  function AsyncInputOpenable() {
  }
  AsyncInputOpenable.$metadata$ = {
    kind: Kotlin.Kind.INTERFACE,
    simpleName: 'AsyncInputOpenable',
    interfaces: []
  };
  function AsyncInputStream() {
  }
  AsyncInputStream.$metadata$ = {
    kind: Kotlin.Kind.INTERFACE,
    simpleName: 'AsyncInputStream',
    interfaces: [AsyncBaseStream]
  };
  function AsyncOutputStream() {
  }
  AsyncOutputStream.prototype.write_mj6st8$ = function (buffer, offset, len, continuation, callback$default) {
    if (offset === void 0)
      offset = 0;
    if (len === void 0)
      len = buffer.length - offset | 0;
    return callback$default ? callback$default(buffer, offset, len, continuation) : this.write_mj6st8$$default(buffer, offset, len, continuation);
  };
  AsyncOutputStream.$metadata$ = {
    kind: Kotlin.Kind.INTERFACE,
    simpleName: 'AsyncOutputStream',
    interfaces: [AsyncBaseStream]
  };
  function AsyncPositionStream() {
  }
  AsyncPositionStream.prototype.setPosition_s8cxhz$ = function (value, continuation) {
    throw new UnsupportedOperationException();
  };
  AsyncPositionStream.prototype.getPosition = function (continuation) {
    throw new UnsupportedOperationException();
  };
  AsyncPositionStream.$metadata$ = {
    kind: Kotlin.Kind.INTERFACE,
    simpleName: 'AsyncPositionStream',
    interfaces: [AsyncBaseStream]
  };
  function AsyncLengthStream() {
  }
  AsyncLengthStream.prototype.setLength_s8cxhz$ = function (value, continuation) {
    throw new UnsupportedOperationException();
  };
  AsyncLengthStream.prototype.getLength = function (continuation) {
    throw new UnsupportedOperationException();
  };
  AsyncLengthStream.$metadata$ = {
    kind: Kotlin.Kind.INTERFACE,
    simpleName: 'AsyncLengthStream',
    interfaces: [AsyncBaseStream]
  };
  function AsyncPositionLengthStream() {
  }
  AsyncPositionLengthStream.$metadata$ = {
    kind: Kotlin.Kind.INTERFACE,
    simpleName: 'AsyncPositionLengthStream',
    interfaces: [AsyncLengthStream, AsyncPositionStream]
  };
  function AsyncRAInputStream() {
  }
  AsyncRAInputStream.$metadata$ = {
    kind: Kotlin.Kind.INTERFACE,
    simpleName: 'AsyncRAInputStream',
    interfaces: []
  };
  function AsyncRAOutputStream() {
  }
  AsyncRAOutputStream.$metadata$ = {
    kind: Kotlin.Kind.INTERFACE,
    simpleName: 'AsyncRAOutputStream',
    interfaces: []
  };
  function toAsyncStream$ObjectLiteral(closure$input, closure$output, closure$rlen, closure$closeable) {
    this.closure$input = closure$input;
    this.closure$output = closure$output;
    this.closure$rlen = closure$rlen;
    this.closure$closeable = closure$closeable;
    AsyncStreamBase.call(this);
    this.expectedPosition = Kotlin.Long.ZERO;
  }
  toAsyncStream$ObjectLiteral.prototype.read_4m9kcn$ = function (position_0, buffer_0, offset_0, len_0, continuation_0, suspended) {
    var instance = new Coroutine$read_4m9kcn$(this, position_0, buffer_0, offset_0, len_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$read_4m9kcn$($this, position_0, buffer_0, offset_0, len_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$read = void 0;
    this.local$position = position_0;
    this.local$buffer = buffer_0;
    this.local$offset = offset_0;
    this.local$len = len_0;
  }
  Coroutine$read_4m9kcn$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$read_4m9kcn$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$read_4m9kcn$.prototype.constructor = Coroutine$read_4m9kcn$;
  Coroutine$read_4m9kcn$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.$this.closure$input == null)
              throw new UnsupportedOperationException();
            this.$this.checkPosition_0(this.local$position);
            this.state_0 = 2;
            this.result_0 = this.$this.closure$input.read_mj6st8$(this.local$buffer, this.local$offset, this.local$len, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$read = this.result_0;
            if (this.local$read > 0)
              this.$this.expectedPosition = this.$this.expectedPosition.add(Kotlin.Long.fromInt(this.local$read));
            return this.local$read;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  toAsyncStream$ObjectLiteral.prototype.write_4m9kcn$ = function (position_0, buffer_0, offset_0, len_0, continuation_0, suspended) {
    var instance = new Coroutine$write_4m9kcn$(this, position_0, buffer_0, offset_0, len_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$write_4m9kcn$($this, position_0, buffer_0, offset_0, len_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$position = position_0;
    this.local$buffer = buffer_0;
    this.local$offset = offset_0;
    this.local$len = len_0;
  }
  Coroutine$write_4m9kcn$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$write_4m9kcn$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$write_4m9kcn$.prototype.constructor = Coroutine$write_4m9kcn$;
  Coroutine$write_4m9kcn$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.$this.closure$output == null)
              throw new UnsupportedOperationException();
            this.$this.checkPosition_0(this.local$position);
            this.state_0 = 2;
            this.result_0 = this.$this.closure$output.write_mj6st8$(this.local$buffer, this.local$offset, this.local$len, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.$this.expectedPosition = this.$this.expectedPosition.add(Kotlin.Long.fromInt(this.local$len));
            return;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  toAsyncStream$ObjectLiteral.prototype.checkPosition_0 = function (position) {
    if (!Kotlin.equals(position, this.expectedPosition)) {
      throw new UnsupportedOperationException('Seeking not supported!');
    }
  };
  toAsyncStream$ObjectLiteral.prototype.setLength_s8cxhz$ = function (value_0, continuation_0, suspended) {
    var instance = new Coroutine$setLength_s8cxhz$(this, value_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$setLength_s8cxhz$($this, value_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$tmp$ = void 0;
    this.local$tmp$_0 = void 0;
    this.local$value = value_0;
  }
  Coroutine$setLength_s8cxhz$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$setLength_s8cxhz$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$setLength_s8cxhz$.prototype.constructor = Coroutine$setLength_s8cxhz$;
  Coroutine$setLength_s8cxhz$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = (this.local$tmp$ = this.$this.closure$rlen) != null ? (this.local$tmp$.setLength_s8cxhz$(this.local$value, this), Unit) : null;
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$tmp$_0 = this.result_0;
            if (this.local$tmp$_0 == null) {
              throw new UnsupportedOperationException();
            }

            return this.local$tmp$_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  toAsyncStream$ObjectLiteral.prototype.getLength = function (continuation_0, suspended) {
    var instance = new Coroutine$getLength(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$getLength($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$tmp$ = void 0;
    this.local$tmp$_0 = void 0;
  }
  Coroutine$getLength.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$getLength.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$getLength.prototype.constructor = Coroutine$getLength;
  Coroutine$getLength.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = (this.local$tmp$ = this.$this.closure$rlen) != null ? this.local$tmp$.getLength(this) : null;
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$tmp$_0 = this.result_0;
            if (this.local$tmp$_0 == null) {
              throw new UnsupportedOperationException();
            }

            return this.local$tmp$_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  toAsyncStream$ObjectLiteral.prototype.close = function (continuation) {
    return this.closure$closeable.close(continuation);
  };
  toAsyncStream$ObjectLiteral.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    interfaces: [AsyncStreamBase]
  };
  function toAsyncStream($receiver) {
    var tmp$, tmp$_0, tmp$_1;
    var input = Kotlin.isType(tmp$ = $receiver, AsyncInputStream) ? tmp$ : null;
    var output = Kotlin.isType(tmp$_0 = $receiver, AsyncOutputStream) ? tmp$_0 : null;
    var rlen = Kotlin.isType(tmp$_1 = $receiver, AsyncLengthStream) ? tmp$_1 : null;
    var closeable = $receiver;
    return toAsyncStream_0(new toAsyncStream$ObjectLiteral(input, output, rlen, closeable));
  }
  function AsyncStreamBase() {
  }
  AsyncStreamBase.prototype.read_4m9kcn$ = function (position, buffer, offset, len, continuation) {
    throw new UnsupportedOperationException();
  };
  AsyncStreamBase.prototype.write_4m9kcn$ = function (position, buffer, offset, len, continuation) {
    throw new UnsupportedOperationException();
  };
  AsyncStreamBase.prototype.setLength_s8cxhz$ = function (value, continuation) {
    throw new UnsupportedOperationException();
  };
  AsyncStreamBase.prototype.getLength = function (continuation) {
    throw new UnsupportedOperationException();
  };
  AsyncStreamBase.prototype.close = function (continuation) {
    return Unit;
  };
  AsyncStreamBase.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'AsyncStreamBase',
    interfaces: [AsyncLengthStream, AsyncRAOutputStream, AsyncRAInputStream, AsyncCloseable]
  };
  function toAsyncStream_0($receiver, position) {
    if (position === void 0)
      position = Kotlin.Long.ZERO;
    return new AsyncStream($receiver, position);
  }
  function AsyncStream(base, position) {
    if (position === void 0)
      position = Kotlin.Long.ZERO;
    this.base = base;
    this.position = position;
    this.$delegate_axnxby$_0 = new Extra$Mixin();
    this.readQueue_0 = new AsyncThread();
    this.writeQueue_0 = new AsyncThread();
  }
  function AsyncStream$read$lambda(this$AsyncStream_0, closure$buffer_0, closure$offset_0, closure$len_0) {
    return function (continuation_0, suspended) {
      var instance = new Coroutine$AsyncStream$read$lambda(this$AsyncStream_0, closure$buffer_0, closure$offset_0, closure$len_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$AsyncStream$read$lambda(this$AsyncStream_0, closure$buffer_0, closure$offset_0, closure$len_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$this$AsyncStream = this$AsyncStream_0;
    this.local$closure$buffer = closure$buffer_0;
    this.local$closure$offset = closure$offset_0;
    this.local$closure$len = closure$len_0;
    this.local$read = void 0;
  }
  Coroutine$AsyncStream$read$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$AsyncStream$read$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$AsyncStream$read$lambda.prototype.constructor = Coroutine$AsyncStream$read$lambda;
  Coroutine$AsyncStream$read$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$this$AsyncStream.base.read_4m9kcn$(this.local$this$AsyncStream.position, this.local$closure$buffer, this.local$closure$offset, this.local$closure$len, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$read = this.result_0;
            if (this.local$read >= 0)
              this.local$this$AsyncStream.position = this.local$this$AsyncStream.position.add(Kotlin.Long.fromInt(this.local$read));
            return this.local$read;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  AsyncStream.prototype.read_mj6st8$ = function (buffer_0, offset_0, len_0, continuation_0, suspended) {
    var instance = new Coroutine$read_mj6st8$_2(this, buffer_0, offset_0, len_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$read_mj6st8$_2($this, buffer_0, offset_0, len_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$buffer = buffer_0;
    this.local$offset = offset_0;
    this.local$len = len_0;
  }
  Coroutine$read_mj6st8$_2.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$read_mj6st8$_2.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$read_mj6st8$_2.prototype.constructor = Coroutine$read_mj6st8$_2;
  Coroutine$read_mj6st8$_2.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.readQueue_0.invoke_lnyleu$(AsyncStream$read$lambda(this.$this, this.local$buffer, this.local$offset, this.local$len), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function AsyncStream$write$lambda(this$AsyncStream_0, closure$buffer_0, closure$offset_0, closure$len_0) {
    return function (continuation_0, suspended) {
      var instance = new Coroutine$AsyncStream$write$lambda(this$AsyncStream_0, closure$buffer_0, closure$offset_0, closure$len_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$AsyncStream$write$lambda(this$AsyncStream_0, closure$buffer_0, closure$offset_0, closure$len_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$this$AsyncStream = this$AsyncStream_0;
    this.local$closure$buffer = closure$buffer_0;
    this.local$closure$offset = closure$offset_0;
    this.local$closure$len = closure$len_0;
  }
  Coroutine$AsyncStream$write$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$AsyncStream$write$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$AsyncStream$write$lambda.prototype.constructor = Coroutine$AsyncStream$write$lambda;
  Coroutine$AsyncStream$write$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$this$AsyncStream.base.write_4m9kcn$(this.local$this$AsyncStream.position, this.local$closure$buffer, this.local$closure$offset, this.local$closure$len, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.local$this$AsyncStream.position = this.local$this$AsyncStream.position.add(Kotlin.Long.fromInt(this.local$closure$len)), Unit;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  AsyncStream.prototype.write_mj6st8$$default = function (buffer_0, offset_0, len_0, continuation_0, suspended) {
    var instance = new Coroutine$write_mj6st8$$default_0(this, buffer_0, offset_0, len_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$write_mj6st8$$default_0($this, buffer_0, offset_0, len_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$buffer = buffer_0;
    this.local$offset = offset_0;
    this.local$len = len_0;
  }
  Coroutine$write_mj6st8$$default_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$write_mj6st8$$default_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$write_mj6st8$$default_0.prototype.constructor = Coroutine$write_mj6st8$$default_0;
  Coroutine$write_mj6st8$$default_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.writeQueue_0.invoke_lnyleu$(AsyncStream$write$lambda(this.$this, this.local$buffer, this.local$offset, this.local$len), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  AsyncStream.prototype.setPosition_s8cxhz$ = function (value, continuation) {
    this.position = value;
    return Unit;
  };
  AsyncStream.prototype.getPosition = function (continuation) {
    return this.position;
  };
  AsyncStream.prototype.setLength_s8cxhz$ = function (value, continuation) {
    return this.base.setLength_s8cxhz$(value, continuation);
  };
  AsyncStream.prototype.getLength = function (continuation) {
    return this.base.getLength(continuation);
  };
  AsyncStream.prototype.size = function (continuation) {
    return this.base.getLength(continuation);
  };
  AsyncStream.prototype.getAvailable = function (continuation_0, suspended) {
    var instance = new Coroutine$getAvailable(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$getAvailable($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$tmp$ = void 0;
  }
  Coroutine$getAvailable.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$getAvailable.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$getAvailable.prototype.constructor = Coroutine$getAvailable;
  Coroutine$getAvailable.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.getLength(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$tmp$ = this.result_0;
            this.state_0 = 3;
            this.result_0 = this.$this.getPosition(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            return this.local$tmp$.subtract(this.result_0);
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  AsyncStream.prototype.eof = function (continuation_0, suspended) {
    var instance = new Coroutine$eof(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$eof($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
  }
  Coroutine$eof.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$eof.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$eof.prototype.constructor = Coroutine$eof;
  Coroutine$eof.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.getAvailable(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0.compareTo_11rb$(Kotlin.Long.ZERO) <= 0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  AsyncStream.prototype.close = function (continuation) {
    return this.base.close(continuation);
  };
  AsyncStream.prototype.clone = function (continuation) {
    return new AsyncStream(this.base, this.position);
  };
  Object.defineProperty(AsyncStream.prototype, 'extra', {
    get: function () {
      return this.$delegate_axnxby$_0.extra;
    },
    set: function (tmp$) {
      this.$delegate_axnxby$_0.extra = tmp$;
    }
  });
  AsyncStream.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'AsyncStream',
    interfaces: [AsyncPositionLengthStream, AsyncOutputStream, AsyncInputStream, AsyncCloseable, Extra]
  };
  function getAvailable($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$getAvailable_0($receiver_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$getAvailable_0($receiver_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$tmp$ = void 0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$getAvailable_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$getAvailable_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$getAvailable_0.prototype.constructor = Coroutine$getAvailable_0;
  Coroutine$getAvailable_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$$receiver.getLength(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$tmp$ = this.result_0;
            this.state_0 = 3;
            this.result_0 = this.local$$receiver.getPosition(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            return this.local$tmp$.subtract(this.result_0);
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function eof($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$eof_0($receiver_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$eof_0($receiver_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$eof_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$eof_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$eof_0.prototype.constructor = Coroutine$eof_0;
  Coroutine$eof_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = getAvailable(this.local$$receiver, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0.compareTo_11rb$(Kotlin.Long.ZERO) <= 0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function SliceAsyncStreamBase(base, baseStart, baseEnd) {
    AsyncStreamBase.call(this);
    this.base_8be2vx$ = base;
    this.baseStart_8be2vx$ = baseStart;
    this.baseEnd_8be2vx$ = baseEnd;
    this.baseLength_8be2vx$ = this.baseEnd_8be2vx$.subtract(this.baseStart_8be2vx$);
  }
  SliceAsyncStreamBase.prototype.clampPosition_0 = function (position) {
    return clamp_1(position, this.baseStart_8be2vx$, this.baseEnd_8be2vx$);
  };
  SliceAsyncStreamBase.prototype.clampPositionLen_0 = function (position, len) {
    if (position.compareTo_11rb$(Kotlin.Long.ZERO) < 0)
      throw new IllegalArgumentException('Invalid position');
    var targetStartPosition = this.clampPosition_0(this.baseStart_8be2vx$.add(position));
    var targetEndPosition = this.clampPosition_0(targetStartPosition.add(Kotlin.Long.fromInt(len)));
    var targetLen = targetEndPosition.subtract(targetStartPosition).toInt();
    return new Pair(targetStartPosition, targetLen);
  };
  SliceAsyncStreamBase.prototype.read_4m9kcn$ = function (position, buffer, offset, len, continuation) {
    var tmp$ = this.clampPositionLen_0(position, len);
    var targetStartPosition = tmp$.component1()
    , targetLen = tmp$.component2();
    return this.base_8be2vx$.read_4m9kcn$(targetStartPosition, buffer, offset, targetLen, continuation);
  };
  SliceAsyncStreamBase.prototype.write_4m9kcn$ = function (position, buffer, offset, len, continuation) {
    var tmp$ = this.clampPositionLen_0(position, len);
    var targetStartPosition = tmp$.component1()
    , targetLen = tmp$.component2();
    return this.base_8be2vx$.write_4m9kcn$(targetStartPosition, buffer, offset, targetLen, continuation);
  };
  SliceAsyncStreamBase.prototype.getLength = function (continuation) {
    return this.baseLength_8be2vx$;
  };
  SliceAsyncStreamBase.prototype.close = function (continuation) {
    return Unit;
  };
  SliceAsyncStreamBase.prototype.toString = function () {
    return 'SliceAsyncStreamBase(' + this.base_8be2vx$ + ', ' + this.baseStart_8be2vx$ + ', ' + this.baseEnd_8be2vx$ + ')';
  };
  SliceAsyncStreamBase.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'SliceAsyncStreamBase',
    interfaces: [AsyncStreamBase]
  };
  function buffered($receiver, blockSize) {
    if (blockSize === void 0)
      blockSize = 2048;
    return toAsyncStream_0(new BufferedStreamBase($receiver.base, blockSize), $receiver.position);
  }
  function BufferedStreamBase(base, blockSize) {
    if (blockSize === void 0)
      blockSize = 2048;
    AsyncStreamBase.call(this);
    this.base = base;
    this.blockSize = blockSize;
    this.cached = null;
  }
  BufferedStreamBase.prototype.getSectorPosition_s8cxhz$ = function (sector) {
    return sector.multiply(Kotlin.Long.fromInt(this.blockSize));
  };
  BufferedStreamBase.prototype.getSectorAtPosition_s8cxhz$ = function (position) {
    return position.div(Kotlin.Long.fromInt(this.blockSize));
  };
  function BufferedStreamBase$CachedEntry($outer, startSector, endSector, data) {
    this.$outer = $outer;
    this.startSector = startSector;
    this.endSector = endSector;
    this.data = data;
    this.startPosition = this.$outer.getSectorPosition_s8cxhz$(this.startSector);
    this.endPosition = this.$outer.getSectorPosition_s8cxhz$(this.endSector);
  }
  BufferedStreamBase$CachedEntry.prototype.getPositionInData_s8cxhz$ = function (position) {
    return toIntSafe(position.subtract(this.startPosition));
  };
  BufferedStreamBase$CachedEntry.prototype.getAvailableAtPosition_s8cxhz$ = function (position) {
    return this.data.length - this.getPositionInData_s8cxhz$(position) | 0;
  };
  BufferedStreamBase$CachedEntry.prototype.containsSectors_3pjtqy$ = function (startSector, endSector) {
    return startSector.compareTo_11rb$(this.startSector) >= 0 && endSector.compareTo_11rb$(this.endSector) <= 0;
  };
  BufferedStreamBase$CachedEntry.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'CachedEntry',
    interfaces: []
  };
  BufferedStreamBase.prototype.readSectorsUncached_3pjtqy$ = function (start_0, end_0, continuation_0, suspended) {
    var instance = new Coroutine$readSectorsUncached_3pjtqy$(this, start_0, end_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$readSectorsUncached_3pjtqy$($this, start_0, end_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$length = void 0;
    this.local$out = void 0;
    this.local$r = void 0;
    this.local$start = start_0;
    this.local$end = end_0;
  }
  Coroutine$readSectorsUncached_3pjtqy$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readSectorsUncached_3pjtqy$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readSectorsUncached_3pjtqy$.prototype.constructor = Coroutine$readSectorsUncached_3pjtqy$;
  Coroutine$readSectorsUncached_3pjtqy$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$length = this.local$end.subtract(this.local$start);
            this.local$out = new Int8Array(Kotlin.Long.fromInt(this.$this.blockSize).multiply(this.local$length).toInt());
            this.state_0 = 2;
            this.result_0 = this.$this.base.read_4m9kcn$(this.$this.getSectorPosition_s8cxhz$(this.local$start), this.local$out, 0, this.local$out.length, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$r = this.result_0;
            return copyOf(this.local$out, this.local$r);
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  BufferedStreamBase.prototype.readSectorsCached_3pjtqy$ = function (start_0, end_0, continuation_0, suspended) {
    var instance = new Coroutine$readSectorsCached_3pjtqy$(this, start_0, end_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$readSectorsCached_3pjtqy$($this, start_0, end_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$tmp$ = void 0;
    this.local$tmp$_0 = void 0;
    this.local$tmp$_1 = void 0;
    this.local$start = start_0;
    this.local$end = end_0;
  }
  Coroutine$readSectorsCached_3pjtqy$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readSectorsCached_3pjtqy$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readSectorsCached_3pjtqy$.prototype.constructor = Coroutine$readSectorsCached_3pjtqy$;
  Coroutine$readSectorsCached_3pjtqy$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (!((this.local$tmp$_0 = (this.local$tmp$ = this.$this.cached) != null ? this.local$tmp$.containsSectors_3pjtqy$(this.local$start, this.local$end) : null) != null ? this.local$tmp$_0 : false)) {
              this.state_0 = 2;
              this.result_0 = this.$this.readSectorsUncached_3pjtqy$(this.local$start, this.local$end, this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              break;
            }
             else {
              this.state_0 = 3;
              continue;
            }

          case 1:
            throw this.exception_0;
          case 2:
            this.$this.cached = new BufferedStreamBase$CachedEntry(this.$this, this.local$start, this.local$end, this.result_0);
            this.state_0 = 3;
            continue;
          case 3:
            return (this.local$tmp$_1 = this.$this.cached) != null ? this.local$tmp$_1 : Kotlin.throwNPE();
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  BufferedStreamBase.prototype.read_4m9kcn$ = function (position_0, buffer_0, offset_0, len_0, continuation_0, suspended) {
    var instance = new Coroutine$read_4m9kcn$_0(this, position_0, buffer_0, offset_0, len_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$read_4m9kcn$_0($this, position_0, buffer_0, offset_0, len_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$entry = void 0;
    this.local$readOffset = void 0;
    this.local$a = void 0;
    this.local$readLen = void 0;
    this.local$position = position_0;
    this.local$buffer = buffer_0;
    this.local$offset = offset_0;
    this.local$len = len_0;
  }
  Coroutine$read_4m9kcn$_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$read_4m9kcn$_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$read_4m9kcn$_0.prototype.constructor = Coroutine$read_4m9kcn$_0;
  Coroutine$read_4m9kcn$_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.readSectorsCached_3pjtqy$(this.$this.getSectorAtPosition_s8cxhz$(this.local$position), this.$this.getSectorAtPosition_s8cxhz$(this.local$position.add(Kotlin.Long.fromInt(this.local$len))).add(Kotlin.Long.fromInt(1)), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$entry = this.result_0;
            this.local$readOffset = this.local$entry.getPositionInData_s8cxhz$(this.local$position);
            this.local$a = this.local$entry.getAvailableAtPosition_s8cxhz$(this.local$position);
            this.local$readLen = Math_0.min(this.local$a, this.local$len);
            copyRangeTo_1(this.local$entry.data, this.local$readOffset, this.local$buffer, this.local$offset, this.local$readLen);
            return this.local$readLen;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  BufferedStreamBase.prototype.write_4m9kcn$ = function (position_0, buffer_0, offset_0, len_0, continuation_0, suspended) {
    var instance = new Coroutine$write_4m9kcn$_0(this, position_0, buffer_0, offset_0, len_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$write_4m9kcn$_0($this, position_0, buffer_0, offset_0, len_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$position = position_0;
    this.local$buffer = buffer_0;
    this.local$offset = offset_0;
    this.local$len = len_0;
  }
  Coroutine$write_4m9kcn$_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$write_4m9kcn$_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$write_4m9kcn$_0.prototype.constructor = Coroutine$write_4m9kcn$_0;
  Coroutine$write_4m9kcn$_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.base.write_4m9kcn$(this.local$position, this.local$buffer, this.local$offset, this.local$len, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  BufferedStreamBase.prototype.setLength_s8cxhz$ = function (value, continuation) {
    return this.base.setLength_s8cxhz$(value, continuation);
  };
  BufferedStreamBase.prototype.getLength = function (continuation) {
    return this.base.getLength(continuation);
  };
  BufferedStreamBase.prototype.close = function (continuation) {
    return this.base.close(continuation);
  };
  BufferedStreamBase.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'BufferedStreamBase',
    interfaces: [AsyncStreamBase]
  };
  function sliceWithStart($receiver_0, start_0, continuation_0, suspended) {
    var instance = new Coroutine$sliceWithStart($receiver_0, start_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$sliceWithStart($receiver_0, start_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
    this.local$start = start_0;
  }
  Coroutine$sliceWithStart.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$sliceWithStart.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$sliceWithStart.prototype.constructor = Coroutine$sliceWithStart;
  Coroutine$sliceWithStart.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$$receiver.getLength(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = sliceWithBounds(this.local$$receiver, this.local$start, this.result_0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function sliceWithSize($receiver, start, length, continuation) {
    return sliceWithBounds($receiver, start, start.add(length), continuation);
  }
  function slice_0($receiver, range, continuation) {
    return sliceWithBounds($receiver, Kotlin.Long.fromInt(range.start), Kotlin.Long.fromInt(range.endInclusive).add(Kotlin.Long.fromInt(1)), continuation);
  }
  function slice_1($receiver, range, continuation) {
    return sliceWithBounds($receiver, range.start, range.endInclusive.add(Kotlin.Long.fromInt(1)), continuation);
  }
  function sliceWithBounds($receiver_0, start_0, end_0, continuation_0, suspended) {
    var instance = new Coroutine$sliceWithBounds($receiver_0, start_0, end_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$sliceWithBounds($receiver_0, start_0, end_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$tmp$ = void 0;
    this.local$len = void 0;
    this.local$clampedStart = void 0;
    this.local$clampedEnd = void 0;
    this.local$$receiver = $receiver_0;
    this.local$start = start_0;
    this.local$end = end_0;
  }
  Coroutine$sliceWithBounds.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$sliceWithBounds.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$sliceWithBounds.prototype.constructor = Coroutine$sliceWithBounds;
  Coroutine$sliceWithBounds.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$$receiver.getLength(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$len = this.result_0;
            this.local$clampedStart = clamp_1(this.local$start, Kotlin.Long.ZERO, this.local$len);
            this.local$clampedEnd = clamp_1(this.local$end, Kotlin.Long.ZERO, this.local$len);
            if (Kotlin.isType(this.local$$receiver.base, SliceAsyncStreamBase)) {
              this.local$tmp$ = toAsyncStream_0(new SliceAsyncStreamBase(this.local$$receiver.base.base_8be2vx$, this.local$$receiver.base.baseStart_8be2vx$.add(this.local$clampedStart), this.local$$receiver.base.baseStart_8be2vx$.add(this.local$clampedEnd)));
            }
             else {
              this.local$tmp$ = toAsyncStream_0(new SliceAsyncStreamBase(this.local$$receiver.base, this.local$clampedStart, this.local$clampedEnd));
            }

            return this.local$tmp$;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function slice_2($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$slice($receiver_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$slice($receiver_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$tmp$ = void 0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$slice.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$slice.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$slice.prototype.constructor = Coroutine$slice;
  Coroutine$slice.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$tmp$ = Kotlin.Long.ZERO;
            this.state_0 = 2;
            this.result_0 = this.local$$receiver.getLength(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = sliceWithSize(this.local$$receiver, this.local$tmp$, this.result_0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readSlice($receiver_0, length_0, continuation_0, suspended) {
    var instance = new Coroutine$readSlice($receiver_0, length_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readSlice($receiver_0, length_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$start = void 0;
    this.local$out = void 0;
    this.local$$receiver = $receiver_0;
    this.local$length = length_0;
  }
  Coroutine$readSlice.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readSlice.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readSlice.prototype.constructor = Coroutine$readSlice;
  Coroutine$readSlice.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$$receiver.getPosition(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$start = this.result_0;
            this.state_0 = 3;
            this.result_0 = sliceWithSize(this.local$$receiver, this.local$start, this.local$length, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            this.local$out = this.result_0;
            this.state_0 = 4;
            this.result_0 = this.local$$receiver.setPosition_s8cxhz$(this.local$start.add(this.local$length), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 4:
            return this.local$out;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readStream($receiver, length, continuation) {
    return readSlice($receiver, Kotlin.Long.fromInt(length), continuation);
  }
  function readStream_0($receiver, length, continuation) {
    return readSlice($receiver, length, continuation);
  }
  function readStringz($receiver_0, charset_0, continuation_0, suspended) {
    var instance = new Coroutine$readStringz($receiver_0, charset_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readStringz($receiver_0, charset_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$buf = void 0;
    this.local$temp = void 0;
    this.local$read = void 0;
    this.local$$receiver = $receiver_0;
    this.local$charset = charset_0;
  }
  Coroutine$readStringz.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readStringz.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readStringz.prototype.constructor = Coroutine$readStringz;
  Coroutine$readStringz.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$charset === void 0)
              this.local$charset = Charsets_getInstance().UTF_8;
            this.local$buf = ByteArrayBuilder_init();
            this.local$temp = get_BYTES_TEMP();
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.local$$receiver.read_mj6st8$(this.local$temp, 0, 1, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            this.local$read = this.result_0;
            if (this.local$read <= 0) {
              this.state_0 = 6;
              continue;
            }
             else {
              this.state_0 = 4;
              continue;
            }

          case 4:
            if (this.local$temp[0] === Kotlin.toByte(0)) {
              this.state_0 = 6;
              continue;
            }
             else {
              this.state_0 = 5;
              continue;
            }

          case 5:
            this.local$buf.append_s8j3t7$(this.local$temp[0]);
            this.state_0 = 2;
            continue;
          case 6:
            return toString(this.local$buf.toByteArray(), this.local$charset);
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readStringz_0($receiver_0, len_0, charset_0, continuation_0, suspended) {
    var instance = new Coroutine$readStringz_0($receiver_0, len_0, charset_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readStringz_0($receiver_0, len_0, charset_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$res = void 0;
    this.local$index = void 0;
    this.local$$receiver = $receiver_0;
    this.local$len = len_0;
    this.local$charset = charset_0;
  }
  Coroutine$readStringz_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readStringz_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readStringz_0.prototype.constructor = Coroutine$readStringz_0;
  Coroutine$readStringz_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$charset === void 0)
              this.local$charset = Charsets_getInstance().UTF_8;
            this.state_0 = 2;
            this.result_0 = readBytesExact(this.local$$receiver, this.local$len, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$res = this.result_0;
            this.local$index = indexOf(this.local$res, Kotlin.toByte(0));
            return toString(copyOf(this.local$res, this.local$index < 0 ? this.local$len : this.local$index), this.local$charset);
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readString($receiver_0, len_0, charset_0, continuation_0, suspended) {
    var instance = new Coroutine$readString($receiver_0, len_0, charset_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readString($receiver_0, len_0, charset_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
    this.local$len = len_0;
    this.local$charset = charset_0;
  }
  Coroutine$readString.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readString.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readString.prototype.constructor = Coroutine$readString;
  Coroutine$readString.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$charset === void 0)
              this.local$charset = Charsets_getInstance().UTF_8;
            this.state_0 = 2;
            this.result_0 = readBytesExact(this.local$$receiver, this.local$len, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return toString(this.result_0, this.local$charset);
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function writeStringz($receiver, str, charset, continuation) {
    if (charset === void 0)
      charset = Charsets_getInstance().UTF_8;
    return writeBytes($receiver, toBytez_0(str, charset), continuation);
  }
  function writeStringz_0($receiver, str, len, charset, continuation) {
    if (charset === void 0)
      charset = Charsets_getInstance().UTF_8;
    return writeBytes($receiver, toBytez(str, len, charset), continuation);
  }
  function writeString($receiver, string, charset, continuation) {
    if (charset === void 0)
      charset = Charsets_getInstance().UTF_8;
    return writeBytes($receiver, toByteArray(string, charset), continuation);
  }
  function readExact($receiver_0, buffer_0, offset_0, len_0, continuation_0, suspended) {
    var instance = new Coroutine$readExact($receiver_0, buffer_0, offset_0, len_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readExact($receiver_0, buffer_0, offset_0, len_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$remaining = void 0;
    this.local$coffset = void 0;
    this.local$read = void 0;
    this.local$$receiver = $receiver_0;
    this.local$buffer = buffer_0;
    this.local$offset = offset_0;
    this.local$len = len_0;
  }
  Coroutine$readExact.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readExact.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readExact.prototype.constructor = Coroutine$readExact;
  Coroutine$readExact.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$remaining = this.local$len;
            this.local$coffset = this.local$offset;
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            if (this.local$remaining <= 0) {
              this.state_0 = 5;
              continue;
            }

            this.state_0 = 3;
            this.result_0 = this.local$$receiver.read_mj6st8$(this.local$buffer, this.local$coffset, this.local$remaining, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            this.local$read = this.result_0;
            if (this.local$read < 0) {
              this.state_0 = 5;
              continue;
            }
             else {
              this.state_0 = 4;
              continue;
            }

          case 4:
            if (this.local$read === 0)
              throw new EOFException('Not enough data');
            this.local$coffset = this.local$coffset + this.local$read | 0;
            this.local$remaining = this.local$remaining - this.local$read | 0;
            this.state_0 = 2;
            continue;
          case 5:
            return;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readSmallTempExact($receiver_0, len_0, continuation_0, suspended) {
    var instance = new Coroutine$readSmallTempExact($receiver_0, len_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readSmallTempExact($receiver_0, len_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$t = void 0;
    this.local$$receiver = $receiver_0;
    this.local$len = len_0;
  }
  Coroutine$readSmallTempExact.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readSmallTempExact.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readSmallTempExact.prototype.constructor = Coroutine$readSmallTempExact;
  Coroutine$readSmallTempExact.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$t = get_BYTES_TEMP();
            this.state_0 = 2;
            this.result_0 = readExact(this.local$$receiver, this.local$t, 0, this.local$len, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.local$t;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readTempExact($receiver_0, len_0, temp_0, continuation_0, suspended) {
    var instance = new Coroutine$readTempExact($receiver_0, len_0, temp_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readTempExact($receiver_0, len_0, temp_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
    this.local$len = len_0;
    this.local$temp = temp_0;
  }
  Coroutine$readTempExact.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readTempExact.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readTempExact.prototype.constructor = Coroutine$readTempExact;
  Coroutine$readTempExact.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$temp === void 0)
              this.local$temp = get_BYTES_TEMP();
            this.state_0 = 2;
            this.result_0 = readExact(this.local$$receiver, this.local$temp, 0, this.local$len, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.local$temp;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function read($receiver, data, continuation) {
    return $receiver.read_mj6st8$(data, 0, data.length, continuation);
  }
  function read_0($receiver, data, continuation) {
    return $receiver.read_mj6st8$(data.data, 0, data.size, continuation);
  }
  function readBytes($receiver, len, continuation) {
    return readBytesUpTo($receiver, len, continuation);
  }
  function readBytesUpTo($receiver_0, len_0, continuation_0, suspended) {
    var instance = new Coroutine$readBytesUpTo($receiver_0, len_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readBytesUpTo($receiver_0, len_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$b_0 = void 0;
    this.local$alen = void 0;
    this.local$ba_0 = void 0;
    this.local$available_0 = void 0;
    this.local$pos_0 = void 0;
    this.local$alen2 = void 0;
    this.local$pending = void 0;
    this.local$temp = void 0;
    this.local$bout = void 0;
    this.local$b = void 0;
    this.local$read = void 0;
    this.local$ba = void 0;
    this.local$available = void 0;
    this.local$pos = void 0;
    this.local$rlen = void 0;
    this.local$$receiver = $receiver_0;
    this.local$len = len_0;
  }
  Coroutine$readBytesUpTo.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readBytesUpTo.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readBytesUpTo.prototype.constructor = Coroutine$readBytesUpTo;
  Coroutine$readBytesUpTo.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$len > BYTES_TEMP_SIZE) {
              if (Kotlin.isType(this.local$$receiver, AsyncPositionLengthStream)) {
                this.state_0 = 10;
                this.result_0 = getAvailable(this.local$$receiver, this);
                if (this.result_0 === COROUTINE_SUSPENDED)
                  return COROUTINE_SUSPENDED;
                break;
              }
               else {
                this.local$pending = this.local$len;
                this.local$temp = get_BYTES_TEMP();
                this.local$bout = ByteArrayBuilder_init();
                this.state_0 = 6;
                continue;
              }
            }
             else {
              this.local$ba = new Int8Array(this.local$len);
              this.local$available = this.local$len;
              this.local$pos = 0;
              this.state_0 = 2;
              continue;
            }

          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.local$$receiver.read_mj6st8$(this.local$ba, this.local$pos, this.local$available, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            this.local$rlen = this.result_0;
            if (this.local$rlen <= 0) {
              this.state_0 = 5;
              continue;
            }
             else {
              this.state_0 = 4;
              continue;
            }

          case 4:
            this.local$pos = this.local$pos + this.local$rlen | 0;
            this.local$available = this.local$available - this.local$rlen | 0;
            this.state_0 = 2;
            continue;
          case 5:
            return this.local$ba.length === this.local$pos ? this.local$ba : copyOf(this.local$ba, this.local$pos);
          case 6:
            if (this.local$pending <= 0) {
              this.state_0 = 9;
              continue;
            }

            this.local$b = this.local$pending;
            this.state_0 = 7;
            this.result_0 = this.local$$receiver.read_mj6st8$(this.local$temp, 0, Math_0.min(this.local$temp.length, this.local$b), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 7:
            this.local$read = this.result_0;
            if (this.local$read <= 0) {
              this.state_0 = 9;
              continue;
            }
             else {
              this.state_0 = 8;
              continue;
            }

          case 8:
            this.local$bout.append_mj6st8$(this.local$temp, 0, this.local$read);
            this.local$pending = this.local$pending - this.local$read | 0;
            this.state_0 = 6;
            continue;
          case 9:
            return this.local$bout.toByteArray();
          case 10:
            this.local$b_0 = toIntClamp(this.result_0);
            this.local$alen = Math_0.min(this.local$len, this.local$b_0);
            this.local$ba_0 = new Int8Array(this.local$alen);
            this.local$available_0 = this.local$alen;
            this.local$pos_0 = 0;
            this.state_0 = 11;
            continue;
          case 11:
            this.state_0 = 12;
            this.result_0 = this.local$$receiver.read_mj6st8$(this.local$ba_0, this.local$pos_0, this.local$available_0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 12:
            this.local$alen2 = this.result_0;
            if (this.local$alen2 <= 0) {
              this.state_0 = 14;
              continue;
            }
             else {
              this.state_0 = 13;
              continue;
            }

          case 13:
            this.local$pos_0 = this.local$pos_0 + this.local$alen2 | 0;
            this.local$available_0 = this.local$available_0 - this.local$alen2 | 0;
            this.state_0 = 11;
            continue;
          case 14:
            return this.local$ba_0.length === this.local$pos_0 ? this.local$ba_0 : copyOf(this.local$ba_0, this.local$pos_0);
          case 15:
            this.state_0 = 16;
            continue;
          case 16:
            return;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readBytesExact($receiver_0, len_0, continuation_0, suspended) {
    var instance = new Coroutine$readBytesExact($receiver_0, len_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readBytesExact($receiver_0, len_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = void 0;
    this.local$$receiver_0 = $receiver_0;
    this.local$len = len_0;
  }
  Coroutine$readBytesExact.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readBytesExact.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readBytesExact.prototype.constructor = Coroutine$readBytesExact;
  Coroutine$readBytesExact.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$$receiver = new Int8Array(this.local$len);
            this.state_0 = 2;
            this.result_0 = readExact(this.local$$receiver_0, this.local$$receiver, 0, this.local$len, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.local$$receiver;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readU8($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$readU8($receiver_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readU8($receiver_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$readU8.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readU8.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readU8.prototype.constructor = Coroutine$readU8;
  Coroutine$readU8.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = readSmallTempExact(this.local$$receiver, 1, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return readU8_1(this.result_0, 0);
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readS8($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$readS8($receiver_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readS8($receiver_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$readS8.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readS8.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readS8.prototype.constructor = Coroutine$readS8;
  Coroutine$readS8.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = readSmallTempExact(this.local$$receiver, 1, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return readS8_1(this.result_0, 0);
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readU16_le($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$readU16_le($receiver_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readU16_le($receiver_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$readU16_le.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readU16_le.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readU16_le.prototype.constructor = Coroutine$readU16_le;
  Coroutine$readU16_le.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = readSmallTempExact(this.local$$receiver, 2, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return readU16_le_1(this.result_0, 0);
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readU24_le($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$readU24_le($receiver_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readU24_le($receiver_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$readU24_le.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readU24_le.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readU24_le.prototype.constructor = Coroutine$readU24_le;
  Coroutine$readU24_le.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = readSmallTempExact(this.local$$receiver, 3, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return readU24_le_1(this.result_0, 0);
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readU32_le($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$readU32_le($receiver_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readU32_le($receiver_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$readU32_le.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readU32_le.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readU32_le.prototype.constructor = Coroutine$readU32_le;
  Coroutine$readU32_le.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = readSmallTempExact(this.local$$receiver, 4, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return readU32_le_1(this.result_0, 0);
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readS16_le($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$readS16_le($receiver_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readS16_le($receiver_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$readS16_le.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readS16_le.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readS16_le.prototype.constructor = Coroutine$readS16_le;
  Coroutine$readS16_le.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = readSmallTempExact(this.local$$receiver, 2, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return readS16_le_1(this.result_0, 0);
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readS24_le($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$readS24_le($receiver_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readS24_le($receiver_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$readS24_le.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readS24_le.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readS24_le.prototype.constructor = Coroutine$readS24_le;
  Coroutine$readS24_le.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = readSmallTempExact(this.local$$receiver, 3, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return readS24_le_1(this.result_0, 0);
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readS32_le($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$readS32_le($receiver_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readS32_le($receiver_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$readS32_le.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readS32_le.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readS32_le.prototype.constructor = Coroutine$readS32_le;
  Coroutine$readS32_le.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = readSmallTempExact(this.local$$receiver, 4, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return readS32_le_1(this.result_0, 0);
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readS64_le($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$readS64_le($receiver_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readS64_le($receiver_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$readS64_le.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readS64_le.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readS64_le.prototype.constructor = Coroutine$readS64_le;
  Coroutine$readS64_le.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = readSmallTempExact(this.local$$receiver, 8, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return readS64_le_1(this.result_0, 0);
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readF32_le($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$readF32_le($receiver_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readF32_le($receiver_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$readF32_le.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readF32_le.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readF32_le.prototype.constructor = Coroutine$readF32_le;
  Coroutine$readF32_le.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = readSmallTempExact(this.local$$receiver, 4, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return readF32_le_1(this.result_0, 0);
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readF64_le($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$readF64_le($receiver_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readF64_le($receiver_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$readF64_le.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readF64_le.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readF64_le.prototype.constructor = Coroutine$readF64_le;
  Coroutine$readF64_le.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = readSmallTempExact(this.local$$receiver, 8, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return readF64_le_1(this.result_0, 0);
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readU16_be($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$readU16_be($receiver_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readU16_be($receiver_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$readU16_be.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readU16_be.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readU16_be.prototype.constructor = Coroutine$readU16_be;
  Coroutine$readU16_be.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = readSmallTempExact(this.local$$receiver, 2, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return readU16_be_1(this.result_0, 0);
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readU24_be($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$readU24_be($receiver_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readU24_be($receiver_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$readU24_be.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readU24_be.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readU24_be.prototype.constructor = Coroutine$readU24_be;
  Coroutine$readU24_be.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = readSmallTempExact(this.local$$receiver, 3, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return readU24_be_1(this.result_0, 0);
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readU32_be($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$readU32_be($receiver_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readU32_be($receiver_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$readU32_be.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readU32_be.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readU32_be.prototype.constructor = Coroutine$readU32_be;
  Coroutine$readU32_be.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = readSmallTempExact(this.local$$receiver, 4, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return readU32_be_1(this.result_0, 0);
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readS16_be($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$readS16_be($receiver_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readS16_be($receiver_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$readS16_be.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readS16_be.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readS16_be.prototype.constructor = Coroutine$readS16_be;
  Coroutine$readS16_be.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = readSmallTempExact(this.local$$receiver, 2, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return readS16_be_1(this.result_0, 0);
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readS24_be($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$readS24_be($receiver_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readS24_be($receiver_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$readS24_be.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readS24_be.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readS24_be.prototype.constructor = Coroutine$readS24_be;
  Coroutine$readS24_be.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = readSmallTempExact(this.local$$receiver, 3, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return readS24_be_1(this.result_0, 0);
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readS32_be($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$readS32_be($receiver_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readS32_be($receiver_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$readS32_be.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readS32_be.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readS32_be.prototype.constructor = Coroutine$readS32_be;
  Coroutine$readS32_be.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = readSmallTempExact(this.local$$receiver, 4, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return readS32_be_1(this.result_0, 0);
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readS64_be($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$readS64_be($receiver_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readS64_be($receiver_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$readS64_be.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readS64_be.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readS64_be.prototype.constructor = Coroutine$readS64_be;
  Coroutine$readS64_be.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = readSmallTempExact(this.local$$receiver, 8, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return readS64_be_1(this.result_0, 0);
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readF32_be($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$readF32_be($receiver_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readF32_be($receiver_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$readF32_be.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readF32_be.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readF32_be.prototype.constructor = Coroutine$readF32_be;
  Coroutine$readF32_be.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = readSmallTempExact(this.local$$receiver, 4, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return readF32_be_1(this.result_0, 0);
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readF64_be($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$readF64_be($receiver_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readF64_be($receiver_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$readF64_be.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readF64_be.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readF64_be.prototype.constructor = Coroutine$readF64_be;
  Coroutine$readF64_be.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = readSmallTempExact(this.local$$receiver, 8, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return readF64_be_1(this.result_0, 0);
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function hasLength($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$hasLength($receiver_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$hasLength($receiver_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 5;
    this.local$$receiver = $receiver_0;
    this.local$t = void 0;
  }
  Coroutine$hasLength.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$hasLength.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$hasLength.prototype.constructor = Coroutine$hasLength;
  Coroutine$hasLength.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.exceptionState_0 = 2;
            this.state_0 = 1;
            this.result_0 = this.local$$receiver.getLength(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            return true;
          case 2:
            this.exceptionState_0 = 5;
            this.local$t = this.exception_0;
            if (Kotlin.isType(this.local$t, Throwable)) {
              return false;
            }
             else {
              throw this.local$t;
            }

          case 3:
            this.state_0 = 4;
            continue;
          case 4:
            return;
          case 5:
            throw this.exception_0;
        }
      }
       catch (e) {
        if (this.state_0 === 5)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function hasAvailable($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$hasAvailable($receiver_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$hasAvailable($receiver_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 5;
    this.local$$receiver = $receiver_0;
    this.local$t = void 0;
  }
  Coroutine$hasAvailable.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$hasAvailable.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$hasAvailable.prototype.constructor = Coroutine$hasAvailable;
  Coroutine$hasAvailable.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.exceptionState_0 = 2;
            this.state_0 = 1;
            this.result_0 = this.local$$receiver.getAvailable(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            return true;
          case 2:
            this.exceptionState_0 = 5;
            this.local$t = this.exception_0;
            if (Kotlin.isType(this.local$t, Throwable)) {
              return false;
            }
             else {
              throw this.local$t;
            }

          case 3:
            this.state_0 = 4;
            continue;
          case 4:
            return;
          case 5:
            throw this.exception_0;
        }
      }
       catch (e) {
        if (this.state_0 === 5)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readAll($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$readAll($receiver_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readAll($receiver_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 15;
    this.local$tmp$ = void 0;
    this.local$tmp$_0 = void 0;
    this.local$available = void 0;
    this.local$out = void 0;
    this.local$temp = void 0;
    this.local$r = void 0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$readAll.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readAll.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readAll.prototype.constructor = Coroutine$readAll;
  Coroutine$readAll.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.exceptionState_0 = 12;
            if (Kotlin.isType(this.local$$receiver, AsyncStream)) {
              this.state_0 = 1;
              this.result_0 = hasAvailable(this.local$$receiver, this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              break;
            }
             else {
              this.local$tmp$ = false;
              this.state_0 = 2;
              continue;
            }

          case 1:
            this.local$tmp$ = this.result_0;
            this.state_0 = 2;
            continue;
          case 2:
            if (this.local$tmp$) {
              this.state_0 = 7;
              this.result_0 = this.local$$receiver.getAvailable(this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              break;
            }
             else {
              this.local$out = ByteArrayBuilder_init();
              this.local$temp = get_BYTES_TEMP();
              this.state_0 = 3;
              continue;
            }

          case 3:
            this.state_0 = 4;
            this.result_0 = this.local$$receiver.read_mj6st8$(this.local$temp, 0, this.local$temp.length, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 4:
            this.local$r = this.result_0;
            if (this.local$r <= 0) {
              this.state_0 = 6;
              continue;
            }
             else {
              this.state_0 = 5;
              continue;
            }

          case 5:
            this.local$out.append_mj6st8$(this.local$temp, 0, this.local$r);
            this.state_0 = 3;
            continue;
          case 6:
            this.local$tmp$_0 = this.local$out.toByteArray();
            this.state_0 = 10;
            continue;
          case 7:
            this.local$available = this.result_0.toInt();
            this.state_0 = 8;
            this.result_0 = readBytes(this.local$$receiver, this.local$available, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 8:
            this.exceptionState_0 = 15;
            this.finallyPath_0 = [9];
            this.state_0 = 13;
            this.$returnValue = this.result_0;
            continue;
          case 9:
            return this.$returnValue;
          case 10:
            this.exceptionState_0 = 15;
            this.finallyPath_0 = [11];
            this.state_0 = 13;
            continue;
          case 11:
            return this.local$tmp$_0;
          case 12:
            this.finallyPath_0 = [15];
            this.state_0 = 13;
            continue;
          case 13:
            this.state_0 = 14;
            this.result_0 = this.local$$receiver.close(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 14:
            this.state_0 = this.finallyPath_0.shift();
            continue;
          case 15:
            throw this.exception_0;
        }
      }
       catch (e) {
        if (this.state_0 === 15)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readAvailable($receiver, continuation) {
    return readAll($receiver, continuation);
  }
  function skip($receiver_0, count_0, continuation_0, suspended) {
    var instance = new Coroutine$skip($receiver_0, count_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$skip($receiver_0, count_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$temp = void 0;
    this.local$remaining = void 0;
    this.local$a = void 0;
    this.local$toRead = void 0;
    this.local$$receiver = $receiver_0;
    this.local$count = count_0;
  }
  Coroutine$skip.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$skip.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$skip.prototype.constructor = Coroutine$skip;
  Coroutine$skip.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (Kotlin.isType(this.local$$receiver, AsyncPositionLengthStream)) {
              this.state_0 = 5;
              this.result_0 = this.local$$receiver.getPosition(this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              break;
            }
             else {
              this.local$temp = get_BYTES_TEMP();
              this.local$remaining = this.local$count;
              this.state_0 = 2;
              continue;
            }

          case 1:
            throw this.exception_0;
          case 2:
            if (this.local$remaining <= 0) {
              this.state_0 = 4;
              continue;
            }

            this.local$a = this.local$remaining;
            this.local$toRead = Math_0.min(this.local$a, this.local$count);
            this.state_0 = 3;
            this.result_0 = readTempExact(this.local$$receiver, this.local$toRead, this.local$temp, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            this.local$remaining = this.local$remaining - this.local$toRead | 0;
            this.state_0 = 2;
            continue;
          case 4:
            this.state_0 = 7;
            continue;
          case 5:
            this.state_0 = 6;
            this.result_0 = this.local$$receiver.setPosition_s8cxhz$(this.result_0.add(Kotlin.Long.fromInt(this.local$count)), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 6:
            this.state_0 = 7;
            continue;
          case 7:
            return;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readUByteArray($receiver_0, count_0, continuation_0, suspended) {
    var instance = new Coroutine$readUByteArray($receiver_0, count_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readUByteArray($receiver_0, count_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
    this.local$count = count_0;
  }
  Coroutine$readUByteArray.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readUByteArray.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readUByteArray.prototype.constructor = Coroutine$readUByteArray;
  Coroutine$readUByteArray.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = readBytesExact(this.local$$receiver, this.local$count, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return new UByteArray(this.result_0);
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readShortArray_le($receiver_0, count_0, continuation_0, suspended) {
    var instance = new Coroutine$readShortArray_le($receiver_0, count_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readShortArray_le($receiver_0, count_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
    this.local$count = count_0;
  }
  Coroutine$readShortArray_le.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readShortArray_le.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readShortArray_le.prototype.constructor = Coroutine$readShortArray_le;
  Coroutine$readShortArray_le.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = readBytesExact(this.local$$receiver, this.local$count * 2 | 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return readShortArray_le_1(this.result_0, 0, this.local$count);
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readShortArray_be($receiver_0, count_0, continuation_0, suspended) {
    var instance = new Coroutine$readShortArray_be($receiver_0, count_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readShortArray_be($receiver_0, count_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
    this.local$count = count_0;
  }
  Coroutine$readShortArray_be.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readShortArray_be.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readShortArray_be.prototype.constructor = Coroutine$readShortArray_be;
  Coroutine$readShortArray_be.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = readBytesExact(this.local$$receiver, this.local$count * 2 | 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return readShortArray_be_1(this.result_0, 0, this.local$count);
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readCharArray_le($receiver_0, count_0, continuation_0, suspended) {
    var instance = new Coroutine$readCharArray_le($receiver_0, count_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readCharArray_le($receiver_0, count_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
    this.local$count = count_0;
  }
  Coroutine$readCharArray_le.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readCharArray_le.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readCharArray_le.prototype.constructor = Coroutine$readCharArray_le;
  Coroutine$readCharArray_le.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = readBytesExact(this.local$$receiver, this.local$count * 2 | 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return readCharArray_le_1(this.result_0, 0, this.local$count);
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readCharArray_be($receiver_0, count_0, continuation_0, suspended) {
    var instance = new Coroutine$readCharArray_be($receiver_0, count_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readCharArray_be($receiver_0, count_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
    this.local$count = count_0;
  }
  Coroutine$readCharArray_be.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readCharArray_be.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readCharArray_be.prototype.constructor = Coroutine$readCharArray_be;
  Coroutine$readCharArray_be.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = readBytesExact(this.local$$receiver, this.local$count * 2 | 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return readCharArray_be_1(this.result_0, 0, this.local$count);
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readIntArray_le($receiver_0, count_0, continuation_0, suspended) {
    var instance = new Coroutine$readIntArray_le($receiver_0, count_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readIntArray_le($receiver_0, count_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
    this.local$count = count_0;
  }
  Coroutine$readIntArray_le.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readIntArray_le.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readIntArray_le.prototype.constructor = Coroutine$readIntArray_le;
  Coroutine$readIntArray_le.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = readBytesExact(this.local$$receiver, this.local$count * 4 | 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return readIntArray_le_1(this.result_0, 0, this.local$count);
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readIntArray_be($receiver_0, count_0, continuation_0, suspended) {
    var instance = new Coroutine$readIntArray_be($receiver_0, count_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readIntArray_be($receiver_0, count_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
    this.local$count = count_0;
  }
  Coroutine$readIntArray_be.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readIntArray_be.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readIntArray_be.prototype.constructor = Coroutine$readIntArray_be;
  Coroutine$readIntArray_be.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = readBytesExact(this.local$$receiver, this.local$count * 4 | 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return readIntArray_be_1(this.result_0, 0, this.local$count);
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readLongArray_le($receiver_0, count_0, continuation_0, suspended) {
    var instance = new Coroutine$readLongArray_le($receiver_0, count_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readLongArray_le($receiver_0, count_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
    this.local$count = count_0;
  }
  Coroutine$readLongArray_le.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readLongArray_le.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readLongArray_le.prototype.constructor = Coroutine$readLongArray_le;
  Coroutine$readLongArray_le.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = readBytesExact(this.local$$receiver, this.local$count * 8 | 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return readLongArray_le_1(this.result_0, 0, this.local$count);
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readLongArray_be($receiver_0, count_0, continuation_0, suspended) {
    var instance = new Coroutine$readLongArray_be($receiver_0, count_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readLongArray_be($receiver_0, count_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
    this.local$count = count_0;
  }
  Coroutine$readLongArray_be.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readLongArray_be.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readLongArray_be.prototype.constructor = Coroutine$readLongArray_be;
  Coroutine$readLongArray_be.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = readBytesExact(this.local$$receiver, this.local$count * 8 | 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return readLongArray_le_1(this.result_0, 0, this.local$count);
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readFloatArray_le($receiver_0, count_0, continuation_0, suspended) {
    var instance = new Coroutine$readFloatArray_le($receiver_0, count_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readFloatArray_le($receiver_0, count_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
    this.local$count = count_0;
  }
  Coroutine$readFloatArray_le.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readFloatArray_le.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readFloatArray_le.prototype.constructor = Coroutine$readFloatArray_le;
  Coroutine$readFloatArray_le.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = readBytesExact(this.local$$receiver, this.local$count * 4 | 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return readFloatArray_le_1(this.result_0, 0, this.local$count);
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readFloatArray_be($receiver_0, count_0, continuation_0, suspended) {
    var instance = new Coroutine$readFloatArray_be($receiver_0, count_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readFloatArray_be($receiver_0, count_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
    this.local$count = count_0;
  }
  Coroutine$readFloatArray_be.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readFloatArray_be.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readFloatArray_be.prototype.constructor = Coroutine$readFloatArray_be;
  Coroutine$readFloatArray_be.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = readBytesExact(this.local$$receiver, this.local$count * 4 | 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return readFloatArray_be_1(this.result_0, 0, this.local$count);
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readDoubleArray_le($receiver_0, count_0, continuation_0, suspended) {
    var instance = new Coroutine$readDoubleArray_le($receiver_0, count_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readDoubleArray_le($receiver_0, count_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
    this.local$count = count_0;
  }
  Coroutine$readDoubleArray_le.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readDoubleArray_le.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readDoubleArray_le.prototype.constructor = Coroutine$readDoubleArray_le;
  Coroutine$readDoubleArray_le.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = readBytesExact(this.local$$receiver, this.local$count * 8 | 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return readDoubleArray_le_1(this.result_0, 0, this.local$count);
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readDoubleArray_be($receiver_0, count_0, continuation_0, suspended) {
    var instance = new Coroutine$readDoubleArray_be($receiver_0, count_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readDoubleArray_be($receiver_0, count_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
    this.local$count = count_0;
  }
  Coroutine$readDoubleArray_be.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readDoubleArray_be.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readDoubleArray_be.prototype.constructor = Coroutine$readDoubleArray_be;
  Coroutine$readDoubleArray_be.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = readBytesExact(this.local$$receiver, this.local$count * 8 | 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return readDoubleArray_be_1(this.result_0, 0, this.local$count);
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function writeBytes($receiver, data, continuation) {
    return $receiver.write_mj6st8$(data, 0, data.length, continuation);
  }
  function writeBytes_0($receiver, data, continuation) {
    return $receiver.write_mj6st8$(data.data, data.position, data.length, continuation);
  }
  function write8($receiver, v, continuation) {
    var $receiver_0 = get_BYTES_TEMP();
    write8_1(get_BYTES_TEMP(), 0, v);
    return $receiver.write_mj6st8$($receiver_0, 0, 1, continuation);
  }
  function write16_le($receiver, v, continuation) {
    var $receiver_0 = get_BYTES_TEMP();
    write16_le_1(get_BYTES_TEMP(), 0, v);
    return $receiver.write_mj6st8$($receiver_0, 0, 2, continuation);
  }
  function write24_le($receiver, v, continuation) {
    var $receiver_0 = get_BYTES_TEMP();
    write24_le_1(get_BYTES_TEMP(), 0, v);
    return $receiver.write_mj6st8$($receiver_0, 0, 3, continuation);
  }
  function write32_le($receiver, v, continuation) {
    var $receiver_0 = get_BYTES_TEMP();
    write32_le_3(get_BYTES_TEMP(), 0, v);
    return $receiver.write_mj6st8$($receiver_0, 0, 4, continuation);
  }
  function write32_le_0($receiver, v, continuation) {
    var $receiver_0 = get_BYTES_TEMP();
    write32_le_4(get_BYTES_TEMP(), 0, v);
    return $receiver.write_mj6st8$($receiver_0, 0, 4, continuation);
  }
  function write64_le($receiver, v, continuation) {
    var $receiver_0 = get_BYTES_TEMP();
    write64_le_1(get_BYTES_TEMP(), 0, v);
    return $receiver.write_mj6st8$($receiver_0, 0, 8, continuation);
  }
  function writeF32_le($receiver, v, continuation) {
    var $receiver_0 = get_BYTES_TEMP();
    writeF32_le_1(get_BYTES_TEMP(), 0, v);
    return $receiver.write_mj6st8$($receiver_0, 0, 4, continuation);
  }
  function writeF64_le($receiver, v, continuation) {
    var $receiver_0 = get_BYTES_TEMP();
    writeF64_le_1(get_BYTES_TEMP(), 0, v);
    return $receiver.write_mj6st8$($receiver_0, 0, 8, continuation);
  }
  function write16_be($receiver, v, continuation) {
    var $receiver_0 = get_BYTES_TEMP();
    write16_be_1(get_BYTES_TEMP(), 0, v);
    return $receiver.write_mj6st8$($receiver_0, 0, 2, continuation);
  }
  function write24_be($receiver, v, continuation) {
    var $receiver_0 = get_BYTES_TEMP();
    write24_be_1(get_BYTES_TEMP(), 0, v);
    return $receiver.write_mj6st8$($receiver_0, 0, 3, continuation);
  }
  function write32_be($receiver, v, continuation) {
    var $receiver_0 = get_BYTES_TEMP();
    write32_be_3(get_BYTES_TEMP(), 0, v);
    return $receiver.write_mj6st8$($receiver_0, 0, 4, continuation);
  }
  function write32_be_0($receiver, v, continuation) {
    var $receiver_0 = get_BYTES_TEMP();
    write32_be_4(get_BYTES_TEMP(), 0, v);
    return $receiver.write_mj6st8$($receiver_0, 0, 4, continuation);
  }
  function write64_be($receiver, v, continuation) {
    var $receiver_0 = get_BYTES_TEMP();
    write64_be_1(get_BYTES_TEMP(), 0, v);
    return $receiver.write_mj6st8$($receiver_0, 0, 8, continuation);
  }
  function writeF32_be($receiver, v, continuation) {
    var $receiver_0 = get_BYTES_TEMP();
    writeF32_be_1(get_BYTES_TEMP(), 0, v);
    return $receiver.write_mj6st8$($receiver_0, 0, 4, continuation);
  }
  function writeF64_be($receiver, v, continuation) {
    var $receiver_0 = get_BYTES_TEMP();
    writeF64_be_1(get_BYTES_TEMP(), 0, v);
    return $receiver.write_mj6st8$($receiver_0, 0, 8, continuation);
  }
  function toAsync($receiver) {
    return toAsyncStream_0(toAsync_0($receiver.base), $receiver.position);
  }
  function toAsync_0($receiver) {
    return new SyncAsyncStreamBase($receiver);
  }
  function toAsyncInWorker($receiver) {
    return toAsyncStream_0(toAsyncInWorker_0($receiver.base), $receiver.position);
  }
  function toAsyncInWorker_0($receiver) {
    return new SyncAsyncStreamBaseInWorker($receiver);
  }
  function SyncAsyncStreamBase(sync) {
    AsyncStreamBase.call(this);
    this.sync = sync;
  }
  SyncAsyncStreamBase.prototype.read_4m9kcn$ = function (position, buffer, offset, len, continuation) {
    return this.sync.read_4m9kcn$(position, buffer, offset, len);
  };
  SyncAsyncStreamBase.prototype.write_4m9kcn$ = function (position, buffer, offset, len, continuation) {
    return this.sync.write_4m9kcn$(position, buffer, offset, len);
  };
  SyncAsyncStreamBase.prototype.setLength_s8cxhz$ = function (value, continuation) {
    this.sync.length = value;
    return Unit;
  };
  SyncAsyncStreamBase.prototype.getLength = function (continuation) {
    return this.sync.length;
  };
  SyncAsyncStreamBase.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'SyncAsyncStreamBase',
    interfaces: [AsyncStreamBase]
  };
  function SyncAsyncStreamBaseInWorker(sync) {
    AsyncStreamBase.call(this);
    this.sync = sync;
  }
  function SyncAsyncStreamBaseInWorker$read$lambda(this$SyncAsyncStreamBaseInWorker_0, closure$position_0, closure$buffer_0, closure$offset_0, closure$len_0) {
    return function (continuation_0, suspended) {
      var instance = new Coroutine$SyncAsyncStreamBaseInWorker$read$lambda(this$SyncAsyncStreamBaseInWorker_0, closure$position_0, closure$buffer_0, closure$offset_0, closure$len_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$SyncAsyncStreamBaseInWorker$read$lambda(this$SyncAsyncStreamBaseInWorker_0, closure$position_0, closure$buffer_0, closure$offset_0, closure$len_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$this$SyncAsyncStreamBaseInWorker = this$SyncAsyncStreamBaseInWorker_0;
    this.local$closure$position = closure$position_0;
    this.local$closure$buffer = closure$buffer_0;
    this.local$closure$offset = closure$offset_0;
    this.local$closure$len = closure$len_0;
  }
  Coroutine$SyncAsyncStreamBaseInWorker$read$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$SyncAsyncStreamBaseInWorker$read$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$SyncAsyncStreamBaseInWorker$read$lambda.prototype.constructor = Coroutine$SyncAsyncStreamBaseInWorker$read$lambda;
  Coroutine$SyncAsyncStreamBaseInWorker$read$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            return this.local$this$SyncAsyncStreamBaseInWorker.sync.read_4m9kcn$(this.local$closure$position, this.local$closure$buffer, this.local$closure$offset, this.local$closure$len);
          case 1:
            throw this.exception_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  SyncAsyncStreamBaseInWorker.prototype.read_4m9kcn$ = function (position, buffer, offset, len, continuation) {
    return executeInWorker(SyncAsyncStreamBaseInWorker$read$lambda(this, position, buffer, offset, len), continuation);
  };
  function SyncAsyncStreamBaseInWorker$write$lambda(this$SyncAsyncStreamBaseInWorker_0, closure$position_0, closure$buffer_0, closure$offset_0, closure$len_0) {
    return function (continuation_0, suspended) {
      var instance = new Coroutine$SyncAsyncStreamBaseInWorker$write$lambda(this$SyncAsyncStreamBaseInWorker_0, closure$position_0, closure$buffer_0, closure$offset_0, closure$len_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$SyncAsyncStreamBaseInWorker$write$lambda(this$SyncAsyncStreamBaseInWorker_0, closure$position_0, closure$buffer_0, closure$offset_0, closure$len_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$this$SyncAsyncStreamBaseInWorker = this$SyncAsyncStreamBaseInWorker_0;
    this.local$closure$position = closure$position_0;
    this.local$closure$buffer = closure$buffer_0;
    this.local$closure$offset = closure$offset_0;
    this.local$closure$len = closure$len_0;
  }
  Coroutine$SyncAsyncStreamBaseInWorker$write$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$SyncAsyncStreamBaseInWorker$write$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$SyncAsyncStreamBaseInWorker$write$lambda.prototype.constructor = Coroutine$SyncAsyncStreamBaseInWorker$write$lambda;
  Coroutine$SyncAsyncStreamBaseInWorker$write$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            return this.local$this$SyncAsyncStreamBaseInWorker.sync.write_4m9kcn$(this.local$closure$position, this.local$closure$buffer, this.local$closure$offset, this.local$closure$len), Unit;
          case 1:
            throw this.exception_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  SyncAsyncStreamBaseInWorker.prototype.write_4m9kcn$ = function (position, buffer, offset, len, continuation) {
    return executeInWorker(SyncAsyncStreamBaseInWorker$write$lambda(this, position, buffer, offset, len), continuation);
  };
  function SyncAsyncStreamBaseInWorker$setLength$lambda(closure$value_0, this$SyncAsyncStreamBaseInWorker_0) {
    return function (continuation_0, suspended) {
      var instance = new Coroutine$SyncAsyncStreamBaseInWorker$setLength$lambda(closure$value_0, this$SyncAsyncStreamBaseInWorker_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$SyncAsyncStreamBaseInWorker$setLength$lambda(closure$value_0, this$SyncAsyncStreamBaseInWorker_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$closure$value = closure$value_0;
    this.local$this$SyncAsyncStreamBaseInWorker = this$SyncAsyncStreamBaseInWorker_0;
  }
  Coroutine$SyncAsyncStreamBaseInWorker$setLength$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$SyncAsyncStreamBaseInWorker$setLength$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$SyncAsyncStreamBaseInWorker$setLength$lambda.prototype.constructor = Coroutine$SyncAsyncStreamBaseInWorker$setLength$lambda;
  Coroutine$SyncAsyncStreamBaseInWorker$setLength$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            return this.local$this$SyncAsyncStreamBaseInWorker.sync.length = this.local$closure$value, Unit;
          case 1:
            throw this.exception_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  SyncAsyncStreamBaseInWorker.prototype.setLength_s8cxhz$ = function (value, continuation) {
    return executeInWorker(SyncAsyncStreamBaseInWorker$setLength$lambda(value, this), continuation);
  };
  function SyncAsyncStreamBaseInWorker$getLength$lambda(this$SyncAsyncStreamBaseInWorker_0) {
    return function (continuation_0, suspended) {
      var instance = new Coroutine$SyncAsyncStreamBaseInWorker$getLength$lambda(this$SyncAsyncStreamBaseInWorker_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$SyncAsyncStreamBaseInWorker$getLength$lambda(this$SyncAsyncStreamBaseInWorker_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$this$SyncAsyncStreamBaseInWorker = this$SyncAsyncStreamBaseInWorker_0;
  }
  Coroutine$SyncAsyncStreamBaseInWorker$getLength$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$SyncAsyncStreamBaseInWorker$getLength$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$SyncAsyncStreamBaseInWorker$getLength$lambda.prototype.constructor = Coroutine$SyncAsyncStreamBaseInWorker$getLength$lambda;
  Coroutine$SyncAsyncStreamBaseInWorker$getLength$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            return this.local$this$SyncAsyncStreamBaseInWorker.sync.length;
          case 1:
            throw this.exception_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  SyncAsyncStreamBaseInWorker.prototype.getLength = function (continuation) {
    return executeInWorker(SyncAsyncStreamBaseInWorker$getLength$lambda(this), continuation);
  };
  SyncAsyncStreamBaseInWorker.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'SyncAsyncStreamBaseInWorker',
    interfaces: [AsyncStreamBase]
  };
  function writeStream($receiver, source, continuation) {
    return copyTo(source, $receiver, continuation);
  }
  function writeFile$lambda(closure$out_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$writeFile$lambda(closure$out_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$writeFile$lambda(closure$out_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$closure$out = closure$out_0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$writeFile$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$writeFile$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$writeFile$lambda.prototype.constructor = Coroutine$writeFile$lambda;
  Coroutine$writeFile$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = writeStream(this.local$closure$out, this.local$$receiver, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function VfsFile$openUse$lambda(closure$callback_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$VfsFile$openUse$lambda(closure$callback_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$VfsFile$openUse$lambda(closure$callback_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$closure$callback = closure$callback_0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$VfsFile$openUse$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$VfsFile$openUse$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$VfsFile$openUse$lambda.prototype.constructor = Coroutine$VfsFile$openUse$lambda;
  Coroutine$VfsFile$openUse$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = await_1(this.local$closure$callback, this.local$$receiver, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function writeFile($receiver, source, continuation) {
    var out = $receiver;
    source.open_7c7tmz$(VfsOpenMode$READ_getInstance(), $this$);
    var $receiver_0 = $this$.$$coroutineResult$$;
    $this$;
    try {
      await_1(VfsFile$openUse$lambda(writeFile$lambda(out)), $receiver_0, $this$);
      $this$.$$coroutineResult$$ = $this$.$$coroutineResult$$;
    }
    finally {
      $receiver_0.close($this$);
      $this$;
    }
    return $this$.$$coroutineResult$$;
  }
  function copyTo($receiver_0, target_0, continuation_0, suspended) {
    var instance = new Coroutine$copyTo($receiver_0, target_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$copyTo($receiver_0, target_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$chunk = void 0;
    this.local$totalCount = void 0;
    this.local$count = void 0;
    this.local$$receiver = $receiver_0;
    this.local$target = target_0;
  }
  Coroutine$copyTo.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$copyTo.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$copyTo.prototype.constructor = Coroutine$copyTo;
  Coroutine$copyTo.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$chunk = get_BYTES_TEMP();
            this.local$totalCount = Kotlin.Long.ZERO;
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = read(this.local$$receiver, this.local$chunk, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            this.local$count = this.result_0;
            if (this.local$count <= 0) {
              this.state_0 = 6;
              continue;
            }
             else {
              this.state_0 = 4;
              continue;
            }

          case 4:
            this.state_0 = 5;
            this.result_0 = this.local$target.write_mj6st8$(this.local$chunk, 0, this.local$count, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 5:
            this.local$totalCount = this.local$totalCount.add(Kotlin.Long.fromInt(this.local$count));
            this.state_0 = 2;
            continue;
          case 6:
            return this.local$totalCount;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function writeToAlign($receiver_0, alignment_0, value_0, continuation_0, suspended) {
    var instance = new Coroutine$writeToAlign($receiver_0, alignment_0, value_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$writeToAlign($receiver_0, alignment_0, value_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$tmp$ = void 0;
    this.local$nextPosition = void 0;
    this.local$data = void 0;
    this.local$$receiver = $receiver_0;
    this.local$alignment = alignment_0;
    this.local$value = value_0;
  }
  Coroutine$writeToAlign.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$writeToAlign.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$writeToAlign.prototype.constructor = Coroutine$writeToAlign;
  Coroutine$writeToAlign.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$value === void 0)
              this.local$value = 0;
            this.state_0 = 2;
            this.result_0 = this.local$$receiver.getPosition(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$nextPosition = nextAlignedTo_0(this.result_0, Kotlin.Long.fromInt(this.local$alignment));
            this.state_0 = 3;
            this.result_0 = this.local$$receiver.getPosition(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            this.local$tmp$ = this.local$nextPosition.subtract(this.result_0).toInt();
            this.local$data = new Int8Array(this.local$tmp$);
            fill_1(this.local$data, Kotlin.toByte(this.local$value));
            this.state_0 = 4;
            this.result_0 = writeBytes(this.local$$receiver, this.local$data, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 4:
            return;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function skip_0($receiver, count, continuation) {
    $receiver.position = $receiver.position.add(Kotlin.Long.fromInt(count));
    return $receiver;
  }
  function skipToAlign($receiver_0, alignment_0, continuation_0, suspended) {
    var instance = new Coroutine$skipToAlign($receiver_0, alignment_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$skipToAlign($receiver_0, alignment_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$nextPosition = void 0;
    this.local$$receiver = $receiver_0;
    this.local$alignment = alignment_0;
  }
  Coroutine$skipToAlign.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$skipToAlign.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$skipToAlign.prototype.constructor = Coroutine$skipToAlign;
  Coroutine$skipToAlign.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$$receiver.getPosition(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$nextPosition = nextAlignedTo_0(this.result_0, Kotlin.Long.fromInt(this.local$alignment));
            this.state_0 = 3;
            this.result_0 = this.local$$receiver.getPosition(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            this.state_0 = 4;
            this.result_0 = readBytes(this.local$$receiver, this.local$nextPosition.subtract(this.result_0).toInt(), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 4:
            return;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function truncate($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$truncate($receiver_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$truncate($receiver_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$truncate.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$truncate.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$truncate.prototype.constructor = Coroutine$truncate;
  Coroutine$truncate.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$$receiver.getPosition(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.local$$receiver.setLength_s8cxhz$(this.result_0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function writeCharArray_le($receiver, array, continuation) {
    var $receiver_0 = new Int8Array(array.length * 2 | 0);
    writeArray_le($receiver_0, 0, array);
    return writeBytes($receiver, $receiver_0, continuation);
  }
  function writeShortArray_le($receiver, array, continuation) {
    var $receiver_0 = new Int8Array(array.length * 2 | 0);
    writeArray_le_0($receiver_0, 0, array);
    return writeBytes($receiver, $receiver_0, continuation);
  }
  function writeIntArray_le($receiver, array, continuation) {
    var $receiver_0 = new Int8Array(array.length * 4 | 0);
    writeArray_le_1($receiver_0, 0, array);
    return writeBytes($receiver, $receiver_0, continuation);
  }
  function writeLongArray_le($receiver, array, continuation) {
    var $receiver_0 = new Int8Array(array.length * 8 | 0);
    writeArray_le_2($receiver_0, 0, array);
    return writeBytes($receiver, $receiver_0, continuation);
  }
  function writeFloatArray_le($receiver, array, continuation) {
    var $receiver_0 = new Int8Array(array.length * 4 | 0);
    writeArray_le_3($receiver_0, 0, array);
    return writeBytes($receiver, $receiver_0, continuation);
  }
  function writeDoubleArray_le($receiver, array, continuation) {
    var $receiver_0 = new Int8Array(array.length * 8 | 0);
    writeArray_le_4($receiver_0, 0, array);
    return writeBytes($receiver, $receiver_0, continuation);
  }
  function writeCharArray_be($receiver, array, continuation) {
    var $receiver_0 = new Int8Array(array.length * 2 | 0);
    writeArray_be($receiver_0, 0, array);
    return writeBytes($receiver, $receiver_0, continuation);
  }
  function writeShortArray_be($receiver, array, continuation) {
    var $receiver_0 = new Int8Array(array.length * 2 | 0);
    writeArray_be_0($receiver_0, 0, array);
    return writeBytes($receiver, $receiver_0, continuation);
  }
  function writeIntArray_be($receiver, array, continuation) {
    var $receiver_0 = new Int8Array(array.length * 4 | 0);
    writeArray_be_1($receiver_0, 0, array);
    return writeBytes($receiver, $receiver_0, continuation);
  }
  function writeLongArray_be($receiver, array, continuation) {
    var $receiver_0 = new Int8Array(array.length * 8 | 0);
    writeArray_be_2($receiver_0, 0, array);
    return writeBytes($receiver, $receiver_0, continuation);
  }
  function writeFloatArray_be($receiver, array, continuation) {
    var $receiver_0 = new Int8Array(array.length * 4 | 0);
    writeArray_be_3($receiver_0, 0, array);
    return writeBytes($receiver, $receiver_0, continuation);
  }
  function writeDoubleArray_be($receiver, array, continuation) {
    var $receiver_0 = new Int8Array(array.length * 8 | 0);
    writeArray_be_4($receiver_0, 0, array);
    return writeBytes($receiver, $receiver_0, continuation);
  }
  function readUntil($receiver_0, endByte_0, continuation_0, suspended) {
    var instance = new Coroutine$readUntil($receiver_0, endByte_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readUntil($receiver_0, endByte_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 7;
    this.local$out = void 0;
    this.local$c = void 0;
    this.local$$receiver = $receiver_0;
    this.local$endByte = endByte_0;
    this.local$e = void 0;
  }
  Coroutine$readUntil.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readUntil.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readUntil.prototype.constructor = Coroutine$readUntil;
  Coroutine$readUntil.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$out = ByteArrayBuilder_init();
            this.exceptionState_0 = 5;
            this.state_0 = 1;
            continue;
          case 1:
            this.state_0 = 2;
            this.result_0 = readU8(this.local$$receiver, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 2:
            this.local$c = this.result_0;
            if (Kotlin.toByte(this.local$c) === this.local$endByte) {
              this.state_0 = 4;
              continue;
            }
             else {
              this.state_0 = 3;
              continue;
            }

          case 3:
            this.local$out.append_s8j3t7$(Kotlin.toByte(this.local$c));
            this.state_0 = 1;
            continue;
          case 4:
            this.exceptionState_0 = 7;
            this.state_0 = 6;
            continue;
          case 5:
            this.exceptionState_0 = 7;
            this.local$e = this.exception_0;
            if (!Kotlin.isType(this.local$e, EOFException))
              throw this.local$e;
            this.state_0 = 6;
            continue;
          case 6:
            return this.local$out.toByteArray();
          case 7:
            throw this.exception_0;
        }
      }
       catch (e) {
        if (this.state_0 === 7)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readLine($receiver_0, eol_0, charset_0, continuation_0, suspended) {
    var instance = new Coroutine$readLine($receiver_0, eol_0, charset_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readLine($receiver_0, eol_0, charset_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 7;
    this.local$out = void 0;
    this.local$c = void 0;
    this.local$$receiver = $receiver_0;
    this.local$eol = eol_0;
    this.local$charset = charset_0;
    this.local$e = void 0;
  }
  Coroutine$readLine.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readLine.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readLine.prototype.constructor = Coroutine$readLine;
  Coroutine$readLine.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$eol === void 0)
              this.local$eol = 10;
            if (this.local$charset === void 0)
              this.local$charset = Charsets_getInstance().UTF_8;
            this.local$out = ByteArrayBuilder_init();
            this.exceptionState_0 = 5;
            this.state_0 = 1;
            continue;
          case 1:
            this.state_0 = 2;
            this.result_0 = readU8(this.local$$receiver, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 2:
            this.local$c = this.result_0;
            if (Kotlin.toChar(this.local$c) === this.local$eol) {
              this.state_0 = 4;
              continue;
            }
             else {
              this.state_0 = 3;
              continue;
            }

          case 3:
            this.local$out.append_s8j3t7$(Kotlin.toByte(this.local$c));
            this.state_0 = 1;
            continue;
          case 4:
            this.exceptionState_0 = 7;
            this.state_0 = 6;
            continue;
          case 5:
            this.exceptionState_0 = 7;
            this.local$e = this.exception_0;
            if (!Kotlin.isType(this.local$e, EOFException))
              throw this.local$e;
            this.state_0 = 6;
            continue;
          case 6:
            return toString(this.local$out.toByteArray(), this.local$charset);
          case 7:
            throw this.exception_0;
        }
      }
       catch (e) {
        if (this.state_0 === 7)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function toAsyncInputStream$ObjectLiteral(this$toAsyncInputStream) {
    this.this$toAsyncInputStream = this$toAsyncInputStream;
  }
  toAsyncInputStream$ObjectLiteral.prototype.read_mj6st8$ = function (buffer, offset, len, continuation) {
    return this.this$toAsyncInputStream.read_mj6st8$(buffer, offset, len);
  };
  toAsyncInputStream$ObjectLiteral.prototype.close = function (continuation) {
    var tmp$, tmp$_0;
    (tmp$_0 = Kotlin.isType(tmp$ = this.this$toAsyncInputStream, Closeable) ? tmp$ : null) != null ? (tmp$_0.close(), Unit) : null;
  };
  toAsyncInputStream$ObjectLiteral.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    interfaces: [AsyncInputStream]
  };
  function toAsyncInputStream_0($receiver) {
    return new toAsyncInputStream$ObjectLiteral($receiver);
  }
  function toAsyncOutputStream$ObjectLiteral(this$toAsyncOutputStream) {
    this.this$toAsyncOutputStream = this$toAsyncOutputStream;
  }
  toAsyncOutputStream$ObjectLiteral.prototype.write_mj6st8$$default = function (buffer, offset, len, continuation) {
    this.this$toAsyncOutputStream.write_mj6st8$(buffer, offset, len);
  };
  toAsyncOutputStream$ObjectLiteral.prototype.close = function (continuation) {
    var tmp$, tmp$_0;
    (tmp$_0 = Kotlin.isType(tmp$ = this.this$toAsyncOutputStream, Closeable) ? tmp$ : null) != null ? (tmp$_0.close(), Unit) : null;
  };
  toAsyncOutputStream$ObjectLiteral.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    interfaces: [AsyncOutputStream]
  };
  function toAsyncOutputStream_0($receiver) {
    return new toAsyncOutputStream$ObjectLiteral($receiver);
  }
  function FastByteArrayInputStream(ba, offset) {
    if (offset === void 0)
      offset = 0;
    this.ba = ba;
    this.offset = offset;
  }
  Object.defineProperty(FastByteArrayInputStream.prototype, 'length', {
    get: function () {
      return this.ba.length;
    }
  });
  Object.defineProperty(FastByteArrayInputStream.prototype, 'available', {
    get: function () {
      return this.ba.length - this.offset | 0;
    }
  });
  FastByteArrayInputStream.prototype.skip_za3lpa$ = function (count) {
    this.offset = this.offset + count | 0;
  };
  FastByteArrayInputStream.prototype.skipToAlign_za3lpa$ = function (count) {
    var nextPosition = nextAlignedTo(this.offset, this.offset);
    this.readBytes_za3lpa$(nextPosition - this.offset | 0);
  };
  FastByteArrayInputStream.prototype.readS8 = function () {
    var tmp$;
    return this.ba[tmp$ = this.offset, this.offset = tmp$ + 1 | 0, tmp$];
  };
  FastByteArrayInputStream.prototype.readU8 = function () {
    var tmp$;
    return this.ba[tmp$ = this.offset, this.offset = tmp$ + 1 | 0, tmp$] & 255;
  };
  FastByteArrayInputStream.prototype.readS16_le = function () {
    var out = readS16_le_1(this.ba, this.offset);
    this.offset = this.offset + 2 | 0;
    return out;
  };
  FastByteArrayInputStream.prototype.readS16_be = function () {
    var out = readS16_be_1(this.ba, this.offset);
    this.offset = this.offset + 2 | 0;
    return out;
  };
  FastByteArrayInputStream.prototype.readU16_le = function () {
    var out = readU16_le_1(this.ba, this.offset);
    this.offset = this.offset + 2 | 0;
    return out;
  };
  FastByteArrayInputStream.prototype.readU16_be = function () {
    var out = readU16_be_1(this.ba, this.offset);
    this.offset = this.offset + 2 | 0;
    return out;
  };
  FastByteArrayInputStream.prototype.readS24_le = function () {
    var out = readS24_le_1(this.ba, this.offset);
    this.offset = this.offset + 3 | 0;
    return out;
  };
  FastByteArrayInputStream.prototype.readS24_be = function () {
    var out = readS24_be_1(this.ba, this.offset);
    this.offset = this.offset + 3 | 0;
    return out;
  };
  FastByteArrayInputStream.prototype.readU24_le = function () {
    var out = readU24_le_1(this.ba, this.offset);
    this.offset = this.offset + 3 | 0;
    return out;
  };
  FastByteArrayInputStream.prototype.readU24_be = function () {
    var out = readU24_be_1(this.ba, this.offset);
    this.offset = this.offset + 3 | 0;
    return out;
  };
  FastByteArrayInputStream.prototype.readS32_le = function () {
    var out = readS32_le_1(this.ba, this.offset);
    this.offset = this.offset + 4 | 0;
    return out;
  };
  FastByteArrayInputStream.prototype.readS32_be = function () {
    var out = readS32_be_1(this.ba, this.offset);
    this.offset = this.offset + 4 | 0;
    return out;
  };
  FastByteArrayInputStream.prototype.readU32_le = function () {
    var out = readU32_le_1(this.ba, this.offset);
    this.offset = this.offset + 4 | 0;
    return out;
  };
  FastByteArrayInputStream.prototype.readU32_be = function () {
    var out = readU32_be_1(this.ba, this.offset);
    this.offset = this.offset + 4 | 0;
    return out;
  };
  FastByteArrayInputStream.prototype.readF32_le = function () {
    var out = readF32_le_1(this.ba, this.offset);
    this.offset = this.offset + 4 | 0;
    return out;
  };
  FastByteArrayInputStream.prototype.readF32_be = function () {
    var out = readF32_be_1(this.ba, this.offset);
    this.offset = this.offset + 4 | 0;
    return out;
  };
  FastByteArrayInputStream.prototype.readF64_le = function () {
    var out = readF64_le_1(this.ba, this.offset);
    this.offset = this.offset + 8 | 0;
    return out;
  };
  FastByteArrayInputStream.prototype.readF64_be = function () {
    var out = readF64_be_1(this.ba, this.offset);
    this.offset = this.offset + 8 | 0;
    return out;
  };
  FastByteArrayInputStream.prototype.readBytes_za3lpa$ = function (count) {
    var out = readByteArray(this.ba, this.offset, count);
    this.offset = this.offset + count | 0;
    return out;
  };
  FastByteArrayInputStream.prototype.readUBytes_za3lpa$ = function (count) {
    return new UByteArray(this.readBytes_za3lpa$(count));
  };
  FastByteArrayInputStream.prototype.readShortArray_le_za3lpa$ = function (count) {
    var count_0 = count * 2 | 0;
    var out = readShortArray_le_1(this.ba, this.offset, count);
    this.offset = this.offset + count_0 | 0;
    return out;
  };
  FastByteArrayInputStream.prototype.readShortArray_be_za3lpa$ = function (count) {
    var count_0 = count * 2 | 0;
    var out = readShortArray_be_1(this.ba, this.offset, count);
    this.offset = this.offset + count_0 | 0;
    return out;
  };
  FastByteArrayInputStream.prototype.readCharArray_le_za3lpa$ = function (count) {
    var count_0 = count * 2 | 0;
    var out = readCharArray_le_1(this.ba, this.offset, count);
    this.offset = this.offset + count_0 | 0;
    return out;
  };
  FastByteArrayInputStream.prototype.readCharArray_be_za3lpa$ = function (count) {
    var count_0 = count * 2 | 0;
    var out = readCharArray_be_1(this.ba, this.offset, count);
    this.offset = this.offset + count_0 | 0;
    return out;
  };
  FastByteArrayInputStream.prototype.readIntArray_le_za3lpa$ = function (count) {
    var count_0 = count * 4 | 0;
    var out = readIntArray_le_1(this.ba, this.offset, count);
    this.offset = this.offset + count_0 | 0;
    return out;
  };
  FastByteArrayInputStream.prototype.readIntArray_be_za3lpa$ = function (count) {
    var count_0 = count * 4 | 0;
    var out = readIntArray_be_1(this.ba, this.offset, count);
    this.offset = this.offset + count_0 | 0;
    return out;
  };
  FastByteArrayInputStream.prototype.readLongArray_le_za3lpa$ = function (count) {
    var count_0 = count * 8 | 0;
    var out = readLongArray_le_1(this.ba, this.offset, count);
    this.offset = this.offset + count_0 | 0;
    return out;
  };
  FastByteArrayInputStream.prototype.readLongArray_be_za3lpa$ = function (count) {
    var count_0 = count * 8 | 0;
    var out = readLongArray_be_1(this.ba, this.offset, count);
    this.offset = this.offset + count_0 | 0;
    return out;
  };
  FastByteArrayInputStream.prototype.readFloatArray_le_za3lpa$ = function (count) {
    var count_0 = count * 4 | 0;
    var out = readFloatArray_le_1(this.ba, this.offset, count);
    this.offset = this.offset + count_0 | 0;
    return out;
  };
  FastByteArrayInputStream.prototype.readFloatArray_be_za3lpa$ = function (count) {
    var count_0 = count * 4 | 0;
    var out = readFloatArray_be_1(this.ba, this.offset, count);
    this.offset = this.offset + count_0 | 0;
    return out;
  };
  FastByteArrayInputStream.prototype.readDoubleArray_le_za3lpa$ = function (count) {
    var count_0 = count * 8 | 0;
    var out = readDoubleArray_le_1(this.ba, this.offset, count);
    this.offset = this.offset + count_0 | 0;
    return out;
  };
  FastByteArrayInputStream.prototype.readDoubleArray_be_za3lpa$ = function (count) {
    var count_0 = count * 8 | 0;
    var out = readDoubleArray_be_1(this.ba, this.offset, count);
    this.offset = this.offset + count_0 | 0;
    return out;
  };
  FastByteArrayInputStream.prototype.readU_VL = function () {
    var result = this.readU8();
    if ((result & 128) === 0)
      return result;
    result = result & 127 | this.readU8() << 7;
    if ((result & 16384) === 0)
      return result;
    result = result & 16383 | this.readU8() << 14;
    if ((result & 2097152) === 0)
      return result;
    result = result & 2097151 | this.readU8() << 21;
    if ((result & 268435456) === 0)
      return result;
    result = result & 268435455 | this.readU8() << 28;
    return result;
  };
  FastByteArrayInputStream.prototype.readS_VL = function () {
    var v = this.readU_VL();
    var sign = (v & 1) !== 0;
    var uvalue = v >>> 1;
    return sign ? -uvalue - 1 | 0 : uvalue;
  };
  FastByteArrayInputStream.prototype.readString_uyw3ma$ = function (len, charset) {
    if (charset === void 0)
      charset = Charsets_getInstance().UTF_8;
    return toString(this.readBytes_za3lpa$(len), charset);
  };
  FastByteArrayInputStream.prototype.readStringz_uyw3ma$ = function (len, charset) {
    if (charset === void 0)
      charset = Charsets_getInstance().UTF_8;
    var res = this.readBytes_za3lpa$(len);
    var index = indexOf(res, Kotlin.toByte(0));
    return toString(copyOf(res, index < 0 ? len : index), charset);
  };
  FastByteArrayInputStream.prototype.readStringz_qa9gbo$ = function (charset) {
    if (charset === void 0)
      charset = Charsets_getInstance().UTF_8;
    var startOffset = this.offset;
    var index = indexOf_2(this.ba, this.offset, Kotlin.toByte(0));
    var end = index >= 0 ? index : this.ba.length;
    var $receiver = this.ba;
    var toIndex = end - startOffset | 0;
    var str = toString($receiver.slice(startOffset, toIndex), charset);
    this.offset = index >= 0 ? end + 1 | 0 : end;
    return str;
  };
  FastByteArrayInputStream.prototype.readStringVL_qa9gbo$ = function (charset) {
    if (charset === void 0)
      charset = Charsets_getInstance().UTF_8;
    return this.readString_uyw3ma$(this.readU_VL(), charset);
  };
  FastByteArrayInputStream.prototype.increment_0 = function (count, callback) {
    var out = callback();
    this.offset = this.offset + count | 0;
    return out;
  };
  FastByteArrayInputStream.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'FastByteArrayInputStream',
    interfaces: []
  };
  function SyncProduceConsumerByteBuffer() {
    SyncProduceConsumerByteBuffer$Companion_getInstance();
    this.current_0 = SyncProduceConsumerByteBuffer$Companion_getInstance().EMPTY_0;
    this.currentPos_0 = 0;
    this.buffers_0 = new LinkedList();
    this.availableInBuffers_0 = 0;
    this.producedSema_0 = new Semaphore(0);
  }
  function SyncProduceConsumerByteBuffer$Companion() {
    SyncProduceConsumerByteBuffer$Companion_instance = this;
    this.EMPTY_0 = new Int8Array([]);
  }
  SyncProduceConsumerByteBuffer$Companion.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var SyncProduceConsumerByteBuffer$Companion_instance = null;
  function SyncProduceConsumerByteBuffer$Companion_getInstance() {
    if (SyncProduceConsumerByteBuffer$Companion_instance === null) {
      new SyncProduceConsumerByteBuffer$Companion();
    }
    return SyncProduceConsumerByteBuffer$Companion_instance;
  }
  Object.defineProperty(SyncProduceConsumerByteBuffer.prototype, 'availableInCurrent_0', {
    get: function () {
      return this.current_0.length - this.currentPos_0 | 0;
    }
  });
  Object.defineProperty(SyncProduceConsumerByteBuffer.prototype, 'available', {
    get: function () {
      return this.availableInCurrent_0 + this.availableInBuffers_0 | 0;
    }
  });
  SyncProduceConsumerByteBuffer.prototype.produce_fqrh44$ = function (data) {
    this.buffers_0.add_11rb$(data);
    this.availableInBuffers_0 = this.availableInBuffers_0 + data.length | 0;
    this.producedSema_0.release();
  };
  SyncProduceConsumerByteBuffer.prototype.useNextBuffer_0 = function () {
    this.current_0 = this.buffers_0.isEmpty() ? SyncProduceConsumerByteBuffer$Companion_getInstance().EMPTY_0 : this.buffers_0.removeFirst();
    this.currentPos_0 = 0;
    this.availableInBuffers_0 = this.availableInBuffers_0 - this.current_0.length | 0;
  };
  SyncProduceConsumerByteBuffer.prototype.ensureCurrentBuffer_0 = function () {
    if (this.availableInCurrent_0 <= 0) {
      this.useNextBuffer_0();
    }
  };
  SyncProduceConsumerByteBuffer.prototype.consume_mj6st8$ = function (data, offset, len) {
    if (offset === void 0)
      offset = 0;
    if (len === void 0)
      len = data.length;
    var totalRead = 0;
    var remaining = len;
    var outputPos = offset;
    while (remaining > 0) {
      this.ensureCurrentBuffer_0();
      var a = this.availableInCurrent_0;
      var readInCurrent = Math_0.min(a, len);
      if (readInCurrent <= 0)
        break;
      copyRangeTo_1(this.current_0, this.currentPos_0, data, outputPos, readInCurrent);
      this.currentPos_0 = this.currentPos_0 + readInCurrent | 0;
      remaining = remaining - readInCurrent | 0;
      totalRead = totalRead + readInCurrent | 0;
      outputPos = outputPos + readInCurrent | 0;
    }
    return totalRead;
  };
  SyncProduceConsumerByteBuffer.prototype.consume_za3lpa$ = function (len) {
    var $receiver = new Int8Array(len);
    return copyOf($receiver, this.consume_mj6st8$($receiver, 0, len));
  };
  SyncProduceConsumerByteBuffer.prototype.consumeUntil_do4swe$ = function (end, including) {
    if (including === void 0)
      including = true;
    var out = ByteArrayBuilder_init();
    while (true) {
      this.ensureCurrentBuffer_0();
      if (this.availableInCurrent_0 <= 0)
        break;
      var p = indexOf_2(this.current_0, this.currentPos_0, end);
      var pp = p < 0 ? this.current_0.length : including ? p + 1 | 0 : p;
      var len = pp - this.currentPos_0 | 0;
      if (len > 0)
        out.append_mj6st8$(this.current_0, this.currentPos_0, len);
      this.currentPos_0 = this.currentPos_0 + len | 0;
      if (p >= 0)
        break;
    }
    return out.toByteArray();
  };
  SyncProduceConsumerByteBuffer.prototype.write_mj6st8$ = function (buffer, offset, len) {
    var tmp$ = this.produce_fqrh44$;
    var toIndex = offset + len | 0;
    tmp$.call(this, buffer.slice(offset, toIndex));
  };
  SyncProduceConsumerByteBuffer.prototype.read_mj6st8$ = function (buffer, offset, len) {
    while (true) {
      if (len === 0)
        return 0;
      var out = this.consume_mj6st8$(buffer, offset, len);
      if (out === 0) {
        this.producedSema_0.acquire();
      }
       else {
        return out;
      }
    }
  };
  SyncProduceConsumerByteBuffer.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'SyncProduceConsumerByteBuffer',
    interfaces: [SyncInputStream, SyncOutputStream]
  };
  function SyncInputStream() {
  }
  SyncInputStream.$metadata$ = {
    kind: Kotlin.Kind.INTERFACE,
    simpleName: 'SyncInputStream',
    interfaces: []
  };
  function SyncOutputStream() {
  }
  SyncOutputStream.$metadata$ = {
    kind: Kotlin.Kind.INTERFACE,
    simpleName: 'SyncOutputStream',
    interfaces: []
  };
  function SyncLengthStream() {
  }
  SyncLengthStream.$metadata$ = {
    kind: Kotlin.Kind.INTERFACE,
    simpleName: 'SyncLengthStream',
    interfaces: []
  };
  function SyncRAInputStream() {
  }
  SyncRAInputStream.$metadata$ = {
    kind: Kotlin.Kind.INTERFACE,
    simpleName: 'SyncRAInputStream',
    interfaces: []
  };
  function SyncRAOutputStream() {
  }
  SyncRAOutputStream.$metadata$ = {
    kind: Kotlin.Kind.INTERFACE,
    simpleName: 'SyncRAOutputStream',
    interfaces: []
  };
  function SyncStreamBase() {
    this.smallTemp = new Int8Array(16);
  }
  SyncStreamBase.prototype.read_s8cxhz$ = function (position) {
    var count = this.read_4m9kcn$(position, this.smallTemp, 0, 1);
    return count >= 1 ? this.smallTemp[0] & 255 : -1;
  };
  SyncStreamBase.prototype.read_4m9kcn$ = function (position, buffer, offset, len) {
    throw new UnsupportedOperationException();
  };
  SyncStreamBase.prototype.write_4m9kcn$ = function (position, buffer, offset, len) {
    throw new UnsupportedOperationException();
  };
  Object.defineProperty(SyncStreamBase.prototype, 'length', {
    get: function () {
      throw new UnsupportedOperationException();
    },
    set: function (value) {
      throw new UnsupportedOperationException();
    }
  });
  SyncStreamBase.prototype.close = function () {
  };
  SyncStreamBase.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'SyncStreamBase',
    interfaces: [SyncLengthStream, SyncRAOutputStream, SyncRAInputStream, Closeable]
  };
  function SyncStream(base, position) {
    if (position === void 0)
      position = Kotlin.Long.ZERO;
    this.base = base;
    this.position = position;
    this.$delegate_39qel5$_0 = new Extra$Mixin();
  }
  SyncStream.prototype.read_mj6st8$ = function (buffer, offset, len) {
    var read = this.base.read_4m9kcn$(this.position, buffer, offset, len);
    this.position = this.position.add(Kotlin.Long.fromInt(read));
    return read;
  };
  SyncStream.prototype.write_mj6st8$ = function (buffer, offset, len) {
    this.base.write_4m9kcn$(this.position, buffer, offset, len);
    this.position = this.position.add(Kotlin.Long.fromInt(len));
  };
  Object.defineProperty(SyncStream.prototype, 'length', {
    get: function () {
      return this.base.length;
    },
    set: function (value) {
      this.base.length = value;
    }
  });
  Object.defineProperty(SyncStream.prototype, 'available', {
    get: function () {
      return this.length.subtract(this.position);
    }
  });
  SyncStream.prototype.close = function () {
    this.base.close();
  };
  SyncStream.prototype.clone = function () {
    return new SyncStream(this.base, this.position);
  };
  SyncStream.prototype.toString = function () {
    return 'SyncStream(' + this.base + ', ' + this.position + ')';
  };
  Object.defineProperty(SyncStream.prototype, 'extra', {
    get: function () {
      return this.$delegate_39qel5$_0.extra;
    },
    set: function (tmp$) {
      this.$delegate_39qel5$_0.extra = tmp$;
    }
  });
  SyncStream.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'SyncStream',
    interfaces: [SyncLengthStream, SyncOutputStream, SyncInputStream, Closeable, Extra]
  };
  var keepPosition = defineInlineFunction('korio-js.com.soywiz.korio.stream.keepPosition_1v0ofm$', function ($receiver, callback) {
    var old = $receiver.position;
    try {
      return callback();
    }
    finally {
      $receiver.position = old;
    }
  });
  function SliceSyncStreamBase(base, baseStart, baseEnd) {
    SyncStreamBase.call(this);
    this.base_8be2vx$ = base;
    this.baseStart_8be2vx$ = baseStart;
    this.baseEnd_8be2vx$ = baseEnd;
    this.baseLength_8be2vx$ = this.baseEnd_8be2vx$.subtract(this.baseStart_8be2vx$);
  }
  Object.defineProperty(SliceSyncStreamBase.prototype, 'length', {
    get: function () {
      return this.baseLength_8be2vx$;
    },
    set: function (value) {
      throw new UnsupportedOperationException();
    }
  });
  SliceSyncStreamBase.prototype.clampPosition_0 = function (position) {
    return clamp_1(position, this.baseStart_8be2vx$, this.baseEnd_8be2vx$);
  };
  SliceSyncStreamBase.prototype.clampPositionLen_0 = function (position, len) {
    if (position.compareTo_11rb$(Kotlin.Long.ZERO) < 0)
      throw new IllegalArgumentException('Invalid position');
    var targetStartPosition = this.clampPosition_0(this.baseStart_8be2vx$.add(position));
    var targetEndPosition = this.clampPosition_0(targetStartPosition.add(Kotlin.Long.fromInt(len)));
    var targetLen = targetEndPosition.subtract(targetStartPosition).toInt();
    return new Pair(targetStartPosition, targetLen);
  };
  SliceSyncStreamBase.prototype.read_4m9kcn$ = function (position, buffer, offset, len) {
    var tmp$ = this.clampPositionLen_0(position, len);
    var targetStartPosition = tmp$.component1()
    , targetLen = tmp$.component2();
    return this.base_8be2vx$.read_4m9kcn$(targetStartPosition, buffer, offset, targetLen);
  };
  SliceSyncStreamBase.prototype.write_4m9kcn$ = function (position, buffer, offset, len) {
    var tmp$ = this.clampPositionLen_0(position, len);
    var targetStartPosition = tmp$.component1()
    , targetLen = tmp$.component2();
    return this.base_8be2vx$.write_4m9kcn$(targetStartPosition, buffer, offset, targetLen);
  };
  SliceSyncStreamBase.prototype.close = function () {
  };
  SliceSyncStreamBase.prototype.toString = function () {
    return 'SliceAsyncStreamBase(' + this.base_8be2vx$ + ', ' + this.baseStart_8be2vx$ + ', ' + this.baseEnd_8be2vx$ + ')';
  };
  SliceSyncStreamBase.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'SliceSyncStreamBase',
    interfaces: [SyncStreamBase]
  };
  function FillSyncStreamBase(fill, length) {
    SyncStreamBase.call(this);
    this.fill = fill;
    this.length_9bjrn1$_0 = length;
  }
  Object.defineProperty(FillSyncStreamBase.prototype, 'length', {
    get: function () {
      return this.length_9bjrn1$_0;
    },
    set: function (length) {
      this.length_9bjrn1$_0 = length;
    }
  });
  var min = Kotlin.kotlin.js.min_bug313$;
  FillSyncStreamBase.prototype.read_4m9kcn$ = function (position, buffer, offset, len) {
    var end = min(Math_0, this.length, position.add(Kotlin.Long.fromInt(len)));
    var actualLen = toIntSafe(end.subtract(position));
    fill_1(buffer, this.fill, offset, offset + actualLen | 0);
    return actualLen;
  };
  FillSyncStreamBase.prototype.write_4m9kcn$ = function (position, buffer, offset, len) {
  };
  FillSyncStreamBase.prototype.close = function () {
  };
  FillSyncStreamBase.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'FillSyncStreamBase',
    interfaces: [SyncStreamBase]
  };
  function FillSyncStream(fillByte, length) {
    if (fillByte === void 0)
      fillByte = 0;
    if (length === void 0)
      length = new Kotlin.Long(-1, 2147483647);
    return toSyncStream(new FillSyncStreamBase(Kotlin.toByte(fillByte), length));
  }
  function MemorySyncStream(data) {
    if (data === void 0)
      data = new Int8Array(0);
    return toSyncStream(new MemorySyncStreamBase(new ByteArrayBuffer(data)));
  }
  function MemorySyncStream_0(data) {
    return toSyncStream(new MemorySyncStreamBase(data));
  }
  var MemorySyncStreamToByteArray = defineInlineFunction('korio-js.com.soywiz.korio.stream.MemorySyncStreamToByteArray_l6bp58$', wrapFunction(function () {
    var ByteArrayBuffer_init = _.com.soywiz.korio.util.ByteArrayBuffer_init_za3lpa$;
    var MemorySyncStream = _.com.soywiz.korio.stream.MemorySyncStream_r6iki3$;
    return function (initialCapacity, callback) {
      if (initialCapacity === void 0)
        initialCapacity = 4096;
      var buffer = ByteArrayBuffer_init(initialCapacity);
      var s = MemorySyncStream(buffer);
      callback(s);
      return buffer.toByteArray();
    };
  }));
  function get_hasLength($receiver) {
    try {
      $receiver.length;
      return true;
    }
     catch (e) {
      if (Kotlin.isType(e, Throwable)) {
        return false;
      }
       else
        throw e;
    }
  }
  function get_hasAvailable($receiver) {
    try {
      $receiver.available;
      return true;
    }
     catch (e) {
      if (Kotlin.isType(e, Throwable)) {
        return false;
      }
       else
        throw e;
    }
  }
  function toByteArray_0($receiver) {
    if (get_hasLength($receiver)) {
      return readAll_0(sliceWithBounds_0($receiver, Kotlin.Long.ZERO, $receiver.length));
    }
     else {
      return readAll_0($receiver.clone());
    }
  }
  function MemorySyncStreamBase(data) {
    SyncStreamBase.call(this);
    this.data = data;
  }
  Object.defineProperty(MemorySyncStreamBase.prototype, 'length', {
    get: function () {
      return Kotlin.Long.fromInt(this.data.size);
    },
    set: function (value) {
      this.data.size = value.toInt();
    }
  });
  MemorySyncStreamBase.prototype.read_4m9kcn$ = function (position, buffer, offset, len) {
    var end = min(Math_0, this.length, position.add(Kotlin.Long.fromInt(len)));
    var actualLen = end.subtract(position).toInt();
    copyRangeTo_1(this.data.data, position.toInt(), buffer, offset, actualLen);
    return actualLen;
  };
  MemorySyncStreamBase.prototype.write_4m9kcn$ = function (position, buffer, offset, len) {
    this.data.ensure_za3lpa$(position.add(Kotlin.Long.fromInt(len)).toInt());
    copyRangeTo_1(buffer, offset, this.data.data, position.toInt(), len);
  };
  MemorySyncStreamBase.prototype.close = function () {
  };
  MemorySyncStreamBase.prototype.toString = function () {
    return 'MemorySyncStreamBase(' + this.data.size + ')';
  };
  MemorySyncStreamBase.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'MemorySyncStreamBase',
    interfaces: [SyncStreamBase]
  };
  function MemorySyncStreamBase_init(initialCapacity, $this) {
    if (initialCapacity === void 0)
      initialCapacity = 4096;
    $this = $this || Object.create(MemorySyncStreamBase.prototype);
    MemorySyncStreamBase.call($this, ByteArrayBuffer_init(initialCapacity));
    return $this;
  }
  function sliceWithStart_0($receiver, start) {
    return sliceWithBounds_0($receiver, start, $receiver.length);
  }
  function slice_3($receiver) {
    return new SyncStream(new SliceSyncStreamBase($receiver.base, Kotlin.Long.ZERO, $receiver.length));
  }
  function slice_4($receiver, range) {
    return sliceWithBounds_0($receiver, Kotlin.Long.fromInt(range.start), Kotlin.Long.fromInt(range.endInclusive).add(Kotlin.Long.fromInt(1)));
  }
  function slice_5($receiver, range) {
    return sliceWithBounds_0($receiver, range.start, range.endInclusive.add(Kotlin.Long.fromInt(1)));
  }
  function sliceWithBounds_0($receiver, start, end) {
    var len = $receiver.length;
    var clampedStart = clamp_1(start, Kotlin.Long.ZERO, len);
    var clampedEnd = clamp_1(end, Kotlin.Long.ZERO, len);
    if (Kotlin.isType($receiver.base, SliceSyncStreamBase)) {
      return toSyncStream(new SliceSyncStreamBase($receiver.base.base_8be2vx$, $receiver.base.baseStart_8be2vx$.add(clampedStart), $receiver.base.baseStart_8be2vx$.add(clampedEnd)));
    }
     else {
      return toSyncStream(new SliceSyncStreamBase($receiver.base, clampedStart, clampedEnd));
    }
  }
  function sliceWithSize_0($receiver, position, length) {
    return sliceWithBounds_0($receiver, position, position.add(length));
  }
  function readSlice_0($receiver, length) {
    var $receiver_0 = sliceWithSize_0($receiver, $receiver.position, length);
    $receiver.position = $receiver.position.add(length);
    return $receiver_0;
  }
  function readStream_1($receiver, length) {
    return readSlice_0($receiver, Kotlin.Long.fromInt(length));
  }
  function readStream_2($receiver, length) {
    return readSlice_0($receiver, length);
  }
  function readStringz_1($receiver, charset) {
    if (charset === void 0)
      charset = Charsets_getInstance().UTF_8;
    var buf = ByteArrayBuilder_init();
    var temp = get_BYTES_TEMP();
    while (true) {
      var read = $receiver.read_mj6st8$(temp, 0, 1);
      if (read <= 0)
        break;
      if (temp[0] === Kotlin.toByte(0))
        break;
      buf.append_s8j3t7$(temp[0]);
    }
    return toString(buf.toByteArray(), charset);
  }
  function readStringz_2($receiver, len, charset) {
    if (charset === void 0)
      charset = Charsets_getInstance().UTF_8;
    var res = readBytes_0($receiver, len);
    var index = indexOf(res, Kotlin.toByte(0));
    return toString(copyOf(res, index < 0 ? len : index), charset);
  }
  function readString_0($receiver, len, charset) {
    if (charset === void 0)
      charset = Charsets_getInstance().UTF_8;
    return toString(readBytes_0($receiver, len), charset);
  }
  function writeString_0($receiver, string, charset) {
    if (charset === void 0)
      charset = Charsets_getInstance().UTF_8;
    writeBytes_1($receiver, toByteArray(string, charset));
  }
  function readExact_0($receiver, out, offset, len) {
    var ooffset = offset;
    var remaining = len;
    while (remaining > 0) {
      var read = $receiver.read_mj6st8$(out, ooffset, remaining);
      if (read <= 0) {
        throw new RuntimeException_0('EOF');
      }
      remaining = remaining - read | 0;
      ooffset = ooffset + read | 0;
    }
  }
  function read_1($receiver, data) {
    return $receiver.read_mj6st8$(data, 0, data.length);
  }
  function read_2($receiver, data) {
    return $receiver.read_mj6st8$(data.data, 0, data.size);
  }
  function readBytesExact_0($receiver, len) {
    var $receiver_0 = new Int8Array(len);
    readExact_0($receiver, $receiver_0, 0, len);
    return $receiver_0;
  }
  function writeStringz_1($receiver, str, charset) {
    if (charset === void 0)
      charset = Charsets_getInstance().UTF_8;
    writeBytes_1($receiver, toBytez_0(str, charset));
  }
  function writeStringz_2($receiver, str, len, charset) {
    if (charset === void 0)
      charset = Charsets_getInstance().UTF_8;
    writeBytes_1($receiver, toBytez(str, len, charset));
  }
  function readBytes_0($receiver, len) {
    var bytes = new Int8Array(len);
    return copyOf(bytes, $receiver.read_mj6st8$(bytes, 0, len));
  }
  function writeBytes_1($receiver, data) {
    $receiver.write_mj6st8$(data, 0, data.length);
  }
  function writeBytes_2($receiver, data) {
    $receiver.write_mj6st8$(data.data, data.position, data.length);
  }
  function smallTemp$lambda() {
    return new Int8Array(16);
  }
  var smallTemp;
  function get_smallTemp() {
    new Kotlin.PropertyMetadata('smallTemp');
    return smallTemp.local.get();
  }
  function read_3($receiver) {
    var count = $receiver.read_mj6st8$(get_smallTemp(), 0, 1);
    return count < 0 ? -1 : get_smallTemp()[0] & 255;
  }
  function get_eof($receiver) {
    return $receiver.available.compareTo_11rb$(Kotlin.Long.ZERO) <= 0;
  }
  function readSmallTempExact_0($receiver, count) {
    var t = get_smallTemp();
    readExact_0($receiver, t, 0, count);
    return t;
  }
  function readTempExact_0($receiver, count) {
    var temp = get_BYTES_TEMP();
    readExact_0($receiver, temp, 0, count);
    return temp;
  }
  function readTemp($receiver, count) {
    var temp = get_BYTES_TEMP();
    $receiver.read_mj6st8$(temp, 0, count);
    return temp;
  }
  function fastReadU8($receiver) {
    return read_3($receiver) & 255;
  }
  function fastReadS8($receiver) {
    return Kotlin.toByte(read_3($receiver));
  }
  function readU8_0($receiver) {
    return readU8_1(readSmallTempExact_0($receiver, 1), 0);
  }
  function readS8_0($receiver) {
    return readS8_1(readSmallTempExact_0($receiver, 1), 0);
  }
  function readU16_le_0($receiver) {
    return readU16_le_1(readSmallTempExact_0($receiver, 2), 0);
  }
  function readU24_le_0($receiver) {
    return readU24_le_1(readSmallTempExact_0($receiver, 3), 0);
  }
  function readU32_le_0($receiver) {
    return readU32_le_1(readSmallTempExact_0($receiver, 4), 0);
  }
  function readS16_le_0($receiver) {
    return readS16_le_1(readSmallTempExact_0($receiver, 2), 0);
  }
  function readS24_le_0($receiver) {
    return readS24_le_1(readSmallTempExact_0($receiver, 3), 0);
  }
  function readS32_le_0($receiver) {
    return readS32_le_1(readSmallTempExact_0($receiver, 4), 0);
  }
  function readS64_le_0($receiver) {
    return readS64_le_1(readSmallTempExact_0($receiver, 8), 0);
  }
  function readF32_le_0($receiver) {
    return readF32_le_1(readSmallTempExact_0($receiver, 4), 0);
  }
  function readF64_le_0($receiver) {
    return readF64_le_1(readSmallTempExact_0($receiver, 8), 0);
  }
  function readU16_be_0($receiver) {
    return readU16_be_1(readSmallTempExact_0($receiver, 2), 0);
  }
  function readU24_be_0($receiver) {
    return readU24_be_1(readSmallTempExact_0($receiver, 3), 0);
  }
  function readU32_be_0($receiver) {
    return readU32_be_1(readSmallTempExact_0($receiver, 4), 0);
  }
  function readS16_be_0($receiver) {
    return readS16_be_1(readSmallTempExact_0($receiver, 2), 0);
  }
  function readS24_be_0($receiver) {
    return readS24_be_1(readSmallTempExact_0($receiver, 3), 0);
  }
  function readS32_be_0($receiver) {
    return readS32_be_1(readSmallTempExact_0($receiver, 4), 0);
  }
  function readS64_be_0($receiver) {
    return readS64_be_1(readSmallTempExact_0($receiver, 8), 0);
  }
  function readF32_be_0($receiver) {
    return readF32_be_1(readSmallTempExact_0($receiver, 4), 0);
  }
  function readF64_be_0($receiver) {
    return readF64_be_1(readSmallTempExact_0($receiver, 8), 0);
  }
  function readAvailable_0($receiver) {
    return readBytes_0($receiver, $receiver.available.toInt());
  }
  function readAll_0($receiver) {
    return readBytes_0($receiver, $receiver.available.toInt());
  }
  function readUByteArray_0($receiver, count) {
    return new UByteArray(readBytesExact_0($receiver, count));
  }
  function readShortArray_le_0($receiver, count) {
    return readShortArray_le_1(readBytesExact_0($receiver, count * 2 | 0), 0, count);
  }
  function readShortArray_be_0($receiver, count) {
    return readShortArray_be_1(readBytesExact_0($receiver, count * 2 | 0), 0, count);
  }
  function readCharArray_le_0($receiver, count) {
    return readCharArray_le_1(readBytesExact_0($receiver, count * 2 | 0), 0, count);
  }
  function readCharArray_be_0($receiver, count) {
    return readCharArray_be_1(readBytesExact_0($receiver, count * 2 | 0), 0, count);
  }
  function readIntArray_le_0($receiver, count) {
    return readIntArray_le_1(readBytesExact_0($receiver, count * 4 | 0), 0, count);
  }
  function readIntArray_be_0($receiver, count) {
    return readIntArray_be_1(readBytesExact_0($receiver, count * 4 | 0), 0, count);
  }
  function readLongArray_le_0($receiver, count) {
    return readLongArray_le_1(readBytesExact_0($receiver, count * 8 | 0), 0, count);
  }
  function readLongArray_be_0($receiver, count) {
    return readLongArray_be_1(readBytesExact_0($receiver, count * 8 | 0), 0, count);
  }
  function readFloatArray_le_0($receiver, count) {
    return readFloatArray_le_1(readBytesExact_0($receiver, count * 4 | 0), 0, count);
  }
  function readFloatArray_be_0($receiver, count) {
    return readFloatArray_be_1(readBytesExact_0($receiver, count * 4 | 0), 0, count);
  }
  function readDoubleArray_le_0($receiver, count) {
    return readDoubleArray_le_1(readBytesExact_0($receiver, count * 8 | 0), 0, count);
  }
  function readDoubleArray_be_0($receiver, count) {
    return readDoubleArray_be_1(readBytesExact_0($receiver, count * 8 | 0), 0, count);
  }
  function write8_0($receiver, v) {
    var $receiver_0 = get_BYTES_TEMP();
    write8_1(get_BYTES_TEMP(), 0, v);
    $receiver.write_mj6st8$($receiver_0, 0, 1);
  }
  function write16_le_0($receiver, v) {
    var $receiver_0 = get_BYTES_TEMP();
    write16_le_1(get_BYTES_TEMP(), 0, v);
    $receiver.write_mj6st8$($receiver_0, 0, 2);
  }
  function write24_le_0($receiver, v) {
    var $receiver_0 = get_BYTES_TEMP();
    write24_le_1(get_BYTES_TEMP(), 0, v);
    $receiver.write_mj6st8$($receiver_0, 0, 3);
  }
  function write32_le_1($receiver, v) {
    var $receiver_0 = get_BYTES_TEMP();
    write32_le_3(get_BYTES_TEMP(), 0, v);
    $receiver.write_mj6st8$($receiver_0, 0, 4);
  }
  function write32_le_2($receiver, v) {
    var $receiver_0 = get_BYTES_TEMP();
    write32_le_4(get_BYTES_TEMP(), 0, v);
    $receiver.write_mj6st8$($receiver_0, 0, 4);
  }
  function write64_le_0($receiver, v) {
    var $receiver_0 = get_BYTES_TEMP();
    write64_le_1(get_BYTES_TEMP(), 0, v);
    $receiver.write_mj6st8$($receiver_0, 0, 8);
  }
  function writeF32_le_0($receiver, v) {
    var $receiver_0 = get_BYTES_TEMP();
    writeF32_le_1(get_BYTES_TEMP(), 0, v);
    $receiver.write_mj6st8$($receiver_0, 0, 4);
  }
  function writeF64_le_0($receiver, v) {
    var $receiver_0 = get_BYTES_TEMP();
    writeF64_le_1(get_BYTES_TEMP(), 0, v);
    $receiver.write_mj6st8$($receiver_0, 0, 8);
  }
  function write16_be_0($receiver, v) {
    var $receiver_0 = get_BYTES_TEMP();
    write16_be_1(get_BYTES_TEMP(), 0, v);
    $receiver.write_mj6st8$($receiver_0, 0, 2);
  }
  function write24_be_0($receiver, v) {
    var $receiver_0 = get_BYTES_TEMP();
    write24_be_1(get_BYTES_TEMP(), 0, v);
    $receiver.write_mj6st8$($receiver_0, 0, 3);
  }
  function write32_be_1($receiver, v) {
    var $receiver_0 = get_BYTES_TEMP();
    write32_be_3(get_BYTES_TEMP(), 0, v);
    $receiver.write_mj6st8$($receiver_0, 0, 4);
  }
  function write32_be_2($receiver, v) {
    var $receiver_0 = get_BYTES_TEMP();
    write32_be_4(get_BYTES_TEMP(), 0, v);
    $receiver.write_mj6st8$($receiver_0, 0, 4);
  }
  function write64_be_0($receiver, v) {
    var $receiver_0 = get_BYTES_TEMP();
    write64_be_1(get_BYTES_TEMP(), 0, v);
    $receiver.write_mj6st8$($receiver_0, 0, 8);
  }
  function writeF32_be_0($receiver, v) {
    var $receiver_0 = get_BYTES_TEMP();
    writeF32_be_1(get_BYTES_TEMP(), 0, v);
    $receiver.write_mj6st8$($receiver_0, 0, 4);
  }
  function writeF64_be_0($receiver, v) {
    var $receiver_0 = get_BYTES_TEMP();
    writeF64_be_1(get_BYTES_TEMP(), 0, v);
    $receiver.write_mj6st8$($receiver_0, 0, 8);
  }
  function toSyncStream($receiver, position) {
    if (position === void 0)
      position = Kotlin.Long.ZERO;
    return new SyncStream($receiver, position);
  }
  function openSync($receiver, mode) {
    if (mode === void 0)
      mode = 'r';
    return toSyncStream(new MemorySyncStreamBase(new ByteArrayBuffer($receiver)), Kotlin.Long.ZERO);
  }
  function openAsync($receiver, mode) {
    if (mode === void 0)
      mode = 'r';
    return toAsync(openSync($receiver, mode));
  }
  function openAsync_0($receiver, charset) {
    if (charset === void 0)
      charset = Charsets_getInstance().UTF_8;
    return toAsync(openSync(toByteArray($receiver, charset), 'r'));
  }
  function writeStream_0($receiver, source) {
    copyTo_0(source, $receiver);
  }
  function copyTo_0($receiver, target) {
    var chunk = get_BYTES_TEMP();
    while (true) {
      var count = read_1($receiver, chunk);
      if (count <= 0)
        break;
      target.write_mj6st8$(chunk, 0, count);
    }
  }
  function writeToAlign_0($receiver, alignment, value) {
    if (value === void 0)
      value = 0;
    var nextPosition = nextAlignedTo_0($receiver.position, Kotlin.Long.fromInt(alignment));
    var data = new Int8Array(nextPosition.subtract($receiver.position).toInt());
    fill_1(data, Kotlin.toByte(value));
    writeBytes_1($receiver, data);
  }
  function skip_1($receiver, count) {
    $receiver.position = $receiver.position.add(Kotlin.Long.fromInt(count));
    return $receiver;
  }
  function skipToAlign_0($receiver, alignment) {
    var nextPosition = nextAlignedTo_0($receiver.position, Kotlin.Long.fromInt(alignment));
    readBytes_0($receiver, nextPosition.subtract($receiver.position).toInt());
  }
  function truncate_0($receiver) {
    $receiver.length = $receiver.position;
  }
  function writeCharArray_le_0($receiver, array) {
    var $receiver_0 = new Int8Array(array.length * 2 | 0);
    writeArray_le($receiver_0, 0, array);
    writeBytes_1($receiver, $receiver_0);
  }
  function writeShortArray_le_0($receiver, array) {
    var $receiver_0 = new Int8Array(array.length * 2 | 0);
    writeArray_le_0($receiver_0, 0, array);
    writeBytes_1($receiver, $receiver_0);
  }
  function writeIntArray_le_0($receiver, array) {
    var $receiver_0 = new Int8Array(array.length * 4 | 0);
    writeArray_le_1($receiver_0, 0, array);
    writeBytes_1($receiver, $receiver_0);
  }
  function writeLongArray_le_0($receiver, array) {
    var $receiver_0 = new Int8Array(array.length * 8 | 0);
    writeArray_le_2($receiver_0, 0, array);
    writeBytes_1($receiver, $receiver_0);
  }
  function writeFloatArray_le_0($receiver, array) {
    var $receiver_0 = new Int8Array(array.length * 4 | 0);
    writeArray_le_3($receiver_0, 0, array);
    writeBytes_1($receiver, $receiver_0);
  }
  function writeDoubleArray_le_0($receiver, array) {
    var $receiver_0 = new Int8Array(array.length * 8 | 0);
    writeArray_le_4($receiver_0, 0, array);
    writeBytes_1($receiver, $receiver_0);
  }
  function writeCharArray_be_0($receiver, array) {
    var $receiver_0 = new Int8Array(array.length * 2 | 0);
    writeArray_be($receiver_0, 0, array);
    writeBytes_1($receiver, $receiver_0);
  }
  function writeShortArray_be_0($receiver, array) {
    var $receiver_0 = new Int8Array(array.length * 2 | 0);
    writeArray_be_0($receiver_0, 0, array);
    writeBytes_1($receiver, $receiver_0);
  }
  function writeIntArray_be_0($receiver, array) {
    var $receiver_0 = new Int8Array(array.length * 4 | 0);
    writeArray_be_1($receiver_0, 0, array);
    writeBytes_1($receiver, $receiver_0);
  }
  function writeLongArray_be_0($receiver, array) {
    var $receiver_0 = new Int8Array(array.length * 8 | 0);
    writeArray_be_2($receiver_0, 0, array);
    writeBytes_1($receiver, $receiver_0);
  }
  function writeFloatArray_be_0($receiver, array) {
    var $receiver_0 = new Int8Array(array.length * 4 | 0);
    writeArray_be_3($receiver_0, 0, array);
    writeBytes_1($receiver, $receiver_0);
  }
  function writeDoubleArray_be_0($receiver, array) {
    var $receiver_0 = new Int8Array(array.length * 8 | 0);
    writeArray_be_4($receiver_0, 0, array);
    writeBytes_1($receiver, $receiver_0);
  }
  function readU_VL($receiver) {
    var result = readU8_0($receiver);
    if ((result & 128) === 0)
      return result;
    result = result & 127 | readU8_0($receiver) << 7;
    if ((result & 16384) === 0)
      return result;
    result = result & 16383 | readU8_0($receiver) << 14;
    if ((result & 2097152) === 0)
      return result;
    result = result & 2097151 | readU8_0($receiver) << 21;
    if ((result & 268435456) === 0)
      return result;
    result = result & 268435455 | readU8_0($receiver) << 28;
    return result;
  }
  function readS_VL($receiver) {
    var v = readU_VL($receiver);
    var sign = (v & 1) !== 0;
    var uvalue = v >>> 1;
    return sign ? -uvalue - 1 | 0 : uvalue;
  }
  function writeU_VL($receiver, v) {
    var value = v;
    while (true) {
      var c = value & 127;
      value = value >>> 7;
      if (value === 0) {
        write8_0($receiver, c);
        break;
      }
      write8_0($receiver, c | 128);
    }
  }
  function writeS_VL($receiver, v) {
    var sign = v < 0 ? 1 : 0;
    writeU_VL($receiver, sign | (v < 0 ? -v - 1 | 0 : v) << 1);
  }
  function writeStringVL($receiver, str, charset) {
    if (charset === void 0)
      charset = Charsets_getInstance().UTF_8;
    var bytes = toByteArray(str, charset);
    writeU_VL($receiver, bytes.length);
    writeBytes_1($receiver, bytes);
  }
  function readStringVL($receiver, charset) {
    if (charset === void 0)
      charset = Charsets_getInstance().UTF_8;
    var bytes = new Int8Array(readU_VL($receiver));
    readExact_0($receiver, bytes, 0, bytes.length);
    return toString(bytes, charset);
  }
  function readExactTo($receiver, buffer, offset, length) {
    if (offset === void 0)
      offset = 0;
    if (length === void 0)
      length = buffer.length - offset | 0;
    var end = offset + length | 0;
    var pos = offset;
    while (true) {
      var read = $receiver.read_mj6st8$(buffer, pos, end - pos | 0);
      if (read <= 0)
        break;
      pos = pos + read | 0;
    }
    return pos - offset | 0;
  }
  function AsyncTextWriter() {
  }
  AsyncTextWriter.$metadata$ = {
    kind: Kotlin.Kind.INTERFACE,
    simpleName: 'AsyncTextWriter',
    interfaces: []
  };
  function AsyncTextWriterContainer() {
  }
  AsyncTextWriterContainer.$metadata$ = {
    kind: Kotlin.Kind.INTERFACE,
    simpleName: 'AsyncTextWriterContainer',
    interfaces: []
  };
  function SimplerDateFormat(format) {
    SimplerDateFormat$Companion_getInstance();
    this.format = format;
    this.parts_0 = ArrayList_init();
    this.escapedFormat_0 = Regex_0.Companion.escapeReplacement_61zpoe$(this.format);
    var $receiver = this.escapedFormat_0;
    var regex = SimplerDateFormat$Companion_getInstance().rx_0;
    var replace_20wsma$result;
    replace_20wsma$break: do {
      var match = regex.find_905azu$($receiver);
      if (match == null) {
        replace_20wsma$result = $receiver.toString();
        break replace_20wsma$break;
      }
      var lastStart = 0;
      var length = $receiver.length;
      var sb = StringBuilder_init(length);
      do {
        var foundMatch = match != null ? match : Kotlin.throwNPE();
        sb.append_ezbsdh$($receiver, lastStart, foundMatch.range.start);
        var tmp$ = sb.append_gw00v9$;
        var $receiver_0 = this.parts_0;
        var element = foundMatch.groupValues.get_za3lpa$(0);
        $receiver_0.add_11rb$(element);
        tmp$.call(sb, '([\\w\\+\\-]+)');
        lastStart = foundMatch.range.endInclusive + 1 | 0;
        match = foundMatch.next();
      }
       while (lastStart < length && match != null);
      if (lastStart < length) {
        sb.append_ezbsdh$($receiver, lastStart, length);
      }
      replace_20wsma$result = sb.toString();
    }
     while (false);
    this.rx2_0 = Regex('^' + replace_20wsma$result + '$');
    this.parts2_0 = splitKeep(this.escapedFormat_0, SimplerDateFormat$Companion_getInstance().rx_0);
  }
  function SimplerDateFormat$Companion() {
    SimplerDateFormat$Companion_instance = this;
    this.rx_0 = Regex('[\\w]+');
    this.englishDaysOfWeek_0 = listOf_0(['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday']);
    this.englishMonths_0 = listOf_0(['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december']);
    var $receiver = this.englishMonths_0;
    var destination = ArrayList_init(collectionSizeOrDefault($receiver, 10));
    var tmp$;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      destination.add_11rb$(substr_0(item, 0, 3));
    }
    this.englishMonths3_0 = destination;
  }
  SimplerDateFormat$Companion.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var SimplerDateFormat$Companion_instance = null;
  function SimplerDateFormat$Companion_getInstance() {
    if (SimplerDateFormat$Companion_instance === null) {
      new SimplerDateFormat$Companion();
    }
    return SimplerDateFormat$Companion_instance;
  }
  SimplerDateFormat.prototype.format_s8cxhz$ = function (date) {
    var tmp$, tmp$_0, tmp$_1;
    var dd = new UTCDate(date);
    var out = '';
    tmp$ = this.parts2_0.iterator();
    while (tmp$.hasNext()) {
      var name = tmp$.next();
      tmp$_1 = out;
      if (Kotlin.equals(name, 'EEE'))
        tmp$_0 = capitalize(substr_0(SimplerDateFormat$Companion_getInstance().englishDaysOfWeek_0.get_za3lpa$(dd.dayOfWeek), 0, 3));
      else if (Kotlin.equals(name, 'z') || Kotlin.equals(name, 'zzz'))
        tmp$_0 = 'UTC';
      else if (Kotlin.equals(name, 'd'))
        tmp$_0 = format('%d', [dd.dayOfMonth]);
      else if (Kotlin.equals(name, 'dd'))
        tmp$_0 = format('%02d', [dd.dayOfMonth]);
      else if (Kotlin.equals(name, 'MM'))
        tmp$_0 = format('%02d', [dd.month0 + 1 | 0]);
      else if (Kotlin.equals(name, 'MMM'))
        tmp$_0 = capitalize(substr_0(SimplerDateFormat$Companion_getInstance().englishMonths_0.get_za3lpa$(dd.month0), 0, 3));
      else if (Kotlin.equals(name, 'yyyy'))
        tmp$_0 = format('%04d', [dd.fullYear]);
      else if (Kotlin.equals(name, 'YYYY'))
        tmp$_0 = format('%04d', [dd.fullYear]);
      else if (Kotlin.equals(name, 'HH'))
        tmp$_0 = format('%02d', [dd.hours]);
      else if (Kotlin.equals(name, 'mm'))
        tmp$_0 = format('%02d', [dd.minutes]);
      else if (Kotlin.equals(name, 'ss'))
        tmp$_0 = format('%02d', [dd.seconds]);
      else
        tmp$_0 = name;
      out = tmp$_1 + tmp$_0;
    }
    return out;
  };
  SimplerDateFormat.prototype.parse_61zpoe$ = function (str) {
    var tmp$, tmp$_0;
    var second = 0;
    var minute = 0;
    var hour = 0;
    var day = 1;
    var month0 = 0;
    var fullYear = 1970;
    var result = (tmp$ = this.rx2_0.find_905azu$(str)) != null ? tmp$ : invalidOp("Not a valid format: '" + str + "' for '" + this.format + "'");
    tmp$_0 = zip(this.parts_0, drop(result.groupValues, 1)).iterator();
    while (tmp$_0.hasNext()) {
      var tmp$_1 = tmp$_0.next();
      var name = tmp$_1.component1()
      , value = tmp$_1.component2();
      if (!Kotlin.equals(name, 'EEE'))
        if (!Kotlin.equals(name, 'z') && !Kotlin.equals(name, 'zzz'))
          if (Kotlin.equals(name, 'd') || Kotlin.equals(name, 'dd'))
            day = toInt(value);
          else if (Kotlin.equals(name, 'MM'))
            month0 = toInt(value) - 1 | 0;
          else if (Kotlin.equals(name, 'MMM')) {
            month0 = SimplerDateFormat$Companion_getInstance().englishMonths3_0.indexOf_11rb$(value.toLowerCase());
          }
           else if (Kotlin.equals(name, 'yyyy') || Kotlin.equals(name, 'YYYY'))
            fullYear = toInt(value);
          else if (Kotlin.equals(name, 'HH'))
            hour = toInt(value);
          else if (Kotlin.equals(name, 'mm'))
            minute = toInt(value);
          else if (Kotlin.equals(name, 'ss'))
            second = toInt(value);
    }
    return UTCDate$Companion_getInstance().invoke_mbbjvw$(fullYear, month0, day, hour, minute, second).time;
  };
  SimplerDateFormat.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'SimplerDateFormat',
    interfaces: []
  };
  function TimeSpan(ms) {
    TimeSpan$Companion_getInstance();
    this.ms = ms;
  }
  Object.defineProperty(TimeSpan.prototype, 'milliseconds', {
    get: function () {
      return this.ms;
    }
  });
  Object.defineProperty(TimeSpan.prototype, 'seconds', {
    get: function () {
      return this.ms / 1000.0;
    }
  });
  function TimeSpan$Companion() {
    TimeSpan$Companion_instance = this;
    this.ZERO = new TimeSpan(0);
  }
  TimeSpan$Companion.prototype.fromMilliseconds_za3lpa$ = function (ms) {
    if (ms === 0)
      return this.ZERO;
    else
      return new TimeSpan(ms);
  };
  TimeSpan$Companion.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var TimeSpan$Companion_instance = null;
  function TimeSpan$Companion_getInstance() {
    if (TimeSpan$Companion_instance === null) {
      new TimeSpan$Companion();
    }
    return TimeSpan$Companion_instance;
  }
  TimeSpan.prototype.compareTo_11rb$ = function (other) {
    return Kotlin.primitiveCompareTo(this.ms, other.ms);
  };
  TimeSpan.prototype.plus_63ndaw$ = function (other) {
    return new TimeSpan(this.ms + other.ms | 0);
  };
  TimeSpan.prototype.minus_63ndaw$ = function (other) {
    return new TimeSpan(this.ms - other.ms | 0);
  };
  TimeSpan.prototype.times_za3lpa$ = function (scale) {
    return new TimeSpan(Kotlin.imul(this.ms, scale));
  };
  TimeSpan.prototype.times_14dthe$ = function (scale) {
    return new TimeSpan(this.ms * scale | 0);
  };
  TimeSpan.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'TimeSpan',
    interfaces: [Comparable]
  };
  TimeSpan.prototype.component1 = function () {
    return this.ms;
  };
  TimeSpan.prototype.copy_za3lpa$ = function (ms) {
    return new TimeSpan(ms === void 0 ? this.ms : ms);
  };
  TimeSpan.prototype.toString = function () {
    return 'TimeSpan(ms=' + Kotlin.toString(this.ms) + ')';
  };
  TimeSpan.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.ms) | 0;
    return result;
  };
  TimeSpan.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.ms, other.ms))));
  };
  var get_milliseconds = defineInlineFunction('korio-js.com.soywiz.korio.time.get_milliseconds_rcaex3$', wrapFunction(function () {
    var TimeSpan = _.com.soywiz.korio.time.TimeSpan;
    return function ($receiver) {
      return TimeSpan.Companion.fromMilliseconds_za3lpa$(Kotlin.numberToInt($receiver));
    };
  }));
  var get_seconds = defineInlineFunction('korio-js.com.soywiz.korio.time.get_seconds_rcaex3$', wrapFunction(function () {
    var TimeSpan = _.com.soywiz.korio.time.TimeSpan;
    return function ($receiver) {
      return TimeSpan.Companion.fromMilliseconds_za3lpa$(Kotlin.numberToDouble($receiver) * 1000.0 | 0);
    };
  }));
  function TimeProvider() {
    TimeProvider_instance = this;
  }
  TimeProvider.prototype.now = function () {
    return STimeProvider_getInstance().currentTimeMillis();
  };
  TimeProvider.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'TimeProvider',
    interfaces: []
  };
  var TimeProvider_instance = null;
  function TimeProvider_getInstance() {
    if (TimeProvider_instance === null) {
      new TimeProvider();
    }
    return TimeProvider_instance;
  }
  function copyRangeTo($receiver, srcPos, dst, dstPos, count) {
    Arrays_getInstance().copyRangeTo_vybhjg$($receiver, srcPos, dst, dstPos, count);
  }
  function copyRangeTo_0($receiver, srcPos, dst, dstPos, count) {
    Arrays_getInstance().copyRangeTo_3poh7i$($receiver, srcPos, dst, dstPos, count);
  }
  function copyRangeTo_1($receiver, srcPos, dst, dstPos, count) {
    Arrays_getInstance().copyRangeTo_nlwz52$($receiver, srcPos, dst, dstPos, count);
  }
  function copyRangeTo_2($receiver, srcPos, dst, dstPos, count) {
    Arrays_getInstance().copyRangeTo_ai5qaq$($receiver, srcPos, dst, dstPos, count);
  }
  function copyRangeTo_3($receiver, srcPos, dst, dstPos, count) {
    Arrays_getInstance().copyRangeTo_lvhpry$($receiver, srcPos, dst, dstPos, count);
  }
  function copyRangeTo_4($receiver, srcPos, dst, dstPos, count) {
    Arrays_getInstance().copyRangeTo_m70dtq$($receiver, srcPos, dst, dstPos, count);
  }
  function copyRangeTo_5($receiver, srcPos, dst, dstPos, count) {
    Arrays_getInstance().copyRangeTo_5ukzfm$($receiver, srcPos, dst, dstPos, count);
  }
  function copyRangeTo_6($receiver, srcPos, dst, dstPos, count) {
    Arrays_getInstance().copyRangeTo_dgpv4k$($receiver, srcPos, dst, dstPos, count);
  }
  function fill($receiver, value, from, to) {
    if (from === void 0)
      from = 0;
    if (to === void 0)
      to = $receiver.length;
    Arrays_getInstance().fill_iv3oks$($receiver, value, from, to);
  }
  function fill_0($receiver, value, from, to) {
    if (from === void 0)
      from = 0;
    if (to === void 0)
      to = $receiver.length;
    Arrays_getInstance().fill_9l0r9l$($receiver, value, from, to);
  }
  function fill_1($receiver, value, from, to) {
    if (from === void 0)
      from = 0;
    if (to === void 0)
      to = $receiver.length;
    Arrays_getInstance().fill_diwe25$($receiver, value, from, to);
  }
  function fill_2($receiver, value, from, to) {
    if (from === void 0)
      from = 0;
    if (to === void 0)
      to = $receiver.length;
    Arrays_getInstance().fill_38ja29$($receiver, value, from, to);
  }
  function fill_3($receiver, value, from, to) {
    if (from === void 0)
      from = 0;
    if (to === void 0)
      to = $receiver.length;
    Arrays_getInstance().fill_7lcbvb$($receiver, value, from, to);
  }
  function fill_4($receiver, value, from, to) {
    if (from === void 0)
      from = 0;
    if (to === void 0)
      to = $receiver.length;
    Arrays_getInstance().fill_9c50fl$($receiver, value, from, to);
  }
  function fill_5($receiver, value, from, to) {
    if (from === void 0)
      from = 0;
    if (to === void 0)
      to = $receiver.length;
    Arrays_getInstance().fill_7e20el$($receiver, value, from, to);
  }
  function AsyncCache() {
    this.promises = lmapOf([]);
  }
  function AsyncCache$invoke$lambda(this$AsyncCache_0, closure$key_0, closure$gen_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$AsyncCache$invoke$lambda(this$AsyncCache_0, closure$key_0, closure$gen_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$AsyncCache$invoke$lambda(this$AsyncCache_0, closure$key_0, closure$gen_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$this$AsyncCache = this$AsyncCache_0;
    this.local$closure$key = closure$key_0;
    this.local$closure$gen = closure$gen_0;
    this.local$tmp$ = void 0;
    this.local$$receiver = void 0;
    this.local$key = void 0;
    this.local$tmp$_0 = void 0;
    this.local$value = void 0;
    this.local$answer = void 0;
    this.local$$receiver_0 = $receiver_0;
  }
  Coroutine$AsyncCache$invoke$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$AsyncCache$invoke$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$AsyncCache$invoke$lambda.prototype.constructor = Coroutine$AsyncCache$invoke$lambda;
  Coroutine$AsyncCache$invoke$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$$receiver = this.local$this$AsyncCache.promises;
            this.local$key = this.local$closure$key;
            this.local$value = this.local$$receiver.get_11rb$(this.local$key);
            if (this.local$value == null) {
              this.local$answer = async(this.local$$receiver_0, this.local$closure$gen);
              this.local$$receiver.put_xwzc9p$(this.local$key, this.local$answer);
              this.local$tmp$_0 = this.local$answer;
            }
             else {
              this.local$tmp$_0 = this.local$value;
            }

            this.state_0 = 2;
            this.result_0 = (Kotlin.isType(this.local$tmp$ = this.local$tmp$_0, Promise) ? this.local$tmp$ : Kotlin.throwCCE()).await(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  AsyncCache.prototype.invoke_vvrf4k$ = function (key, gen, continuation) {
    return withCoroutineContext(AsyncCache$invoke$lambda(this, key, gen), continuation);
  };
  AsyncCache.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'AsyncCache',
    interfaces: []
  };
  function AsyncCacheItem() {
    this.promise = null;
  }
  function AsyncCacheItem$invoke$lambda(this$AsyncCacheItem_0, closure$gen_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$AsyncCacheItem$invoke$lambda(this$AsyncCacheItem_0, closure$gen_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$AsyncCacheItem$invoke$lambda(this$AsyncCacheItem_0, closure$gen_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$this$AsyncCacheItem = this$AsyncCacheItem_0;
    this.local$closure$gen = closure$gen_0;
    this.local$tmp$ = void 0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$AsyncCacheItem$invoke$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$AsyncCacheItem$invoke$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$AsyncCacheItem$invoke$lambda.prototype.constructor = Coroutine$AsyncCacheItem$invoke$lambda;
  Coroutine$AsyncCacheItem$invoke$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$this$AsyncCacheItem.promise == null)
              this.local$this$AsyncCacheItem.promise = async(this.local$$receiver, this.local$closure$gen);
            this.state_0 = 2;
            this.result_0 = ((this.local$tmp$ = this.local$this$AsyncCacheItem.promise) != null ? this.local$tmp$ : Kotlin.throwNPE()).await(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  AsyncCacheItem.prototype.invoke_cbny1b$ = function (gen, continuation) {
    return withCoroutineContext(AsyncCacheItem$invoke$lambda(this, gen), continuation);
  };
  AsyncCacheItem.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'AsyncCacheItem',
    interfaces: []
  };
  function AsyncCloseable() {
    AsyncCloseable$Companion_getInstance();
  }
  function AsyncCloseable$Companion() {
    AsyncCloseable$Companion_instance = this;
    this.DUMMY = new AsyncCloseable$Companion$DUMMY$ObjectLiteral();
  }
  function AsyncCloseable$Companion$DUMMY$ObjectLiteral() {
  }
  AsyncCloseable$Companion$DUMMY$ObjectLiteral.prototype.close = function (continuation) {
    return Unit;
  };
  AsyncCloseable$Companion$DUMMY$ObjectLiteral.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    interfaces: [AsyncCloseable]
  };
  AsyncCloseable$Companion.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var AsyncCloseable$Companion_instance = null;
  function AsyncCloseable$Companion_getInstance() {
    if (AsyncCloseable$Companion_instance === null) {
      new AsyncCloseable$Companion();
    }
    return AsyncCloseable$Companion_instance;
  }
  AsyncCloseable.$metadata$ = {
    kind: Kotlin.Kind.INTERFACE,
    simpleName: 'AsyncCloseable',
    interfaces: []
  };
  var use_0 = defineInlineFunction('korio-js.com.soywiz.korio.util.use_fs35jz$', wrapFunction(function () {
    var await_0 = _.com.soywiz.korio.async.await_7zc599$;
    return function ($receiver_0, callback_0, continuation_0, suspended) {
      var instance = new Coroutine$use($receiver_0, callback_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }));
  function Coroutine$use($receiver_0, callback_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 7;
    this.local$$receiver = $receiver_0;
    this.local$callback = callback_0;
  }
  Coroutine$use.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$use.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$use.prototype.constructor = Coroutine$use;
  Coroutine$use.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.exceptionState_0 = 4;
            this.state_0 = 1;
            this.result_0 = await_0(this.local$callback, this.local$$receiver, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            this.exceptionState_0 = 7;
            this.finallyPath_0 = [2];
            this.state_0 = 5;
            this.$returnValue = this.result_0;
            continue;
          case 2:
            return this.$returnValue;
          case 3:
            return;
          case 4:
            this.finallyPath_0 = [7];
            this.state_0 = 5;
            continue;
          case 5:
            this.state_0 = 6;
            this.result_0 = this.local$$receiver.close(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 6:
            this.state_0 = this.finallyPath_0.shift();
            continue;
          case 7:
            throw this.exception_0;
        }
      }
       catch (e) {
        if (this.state_0 === 7)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function AsyncInmemoryCache() {
    this.cache = lmapOf([]);
  }
  function AsyncInmemoryCache$Entry(timestamp, data) {
    this.timestamp = timestamp;
    this.data = data;
  }
  AsyncInmemoryCache$Entry.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'Entry',
    interfaces: []
  };
  AsyncInmemoryCache$Entry.prototype.component1 = function () {
    return this.timestamp;
  };
  AsyncInmemoryCache$Entry.prototype.component2 = function () {
    return this.data;
  };
  AsyncInmemoryCache$Entry.prototype.copy_wsd7um$ = function (timestamp, data) {
    return new AsyncInmemoryCache$Entry(timestamp === void 0 ? this.timestamp : timestamp, data === void 0 ? this.data : data);
  };
  AsyncInmemoryCache$Entry.prototype.toString = function () {
    return 'Entry(timestamp=' + Kotlin.toString(this.timestamp) + (', data=' + Kotlin.toString(this.data)) + ')';
  };
  AsyncInmemoryCache$Entry.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.timestamp) | 0;
    result = result * 31 + Kotlin.hashCode(this.data) | 0;
    return result;
  };
  AsyncInmemoryCache$Entry.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.timestamp, other.timestamp) && Kotlin.equals(this.data, other.data)))));
  };
  AsyncInmemoryCache.prototype.get_ulu11i$ = function (clazz, key, ttlMs) {
    return new AsyncInmemoryEntry(clazz, this, key, ttlMs);
  };
  function AsyncInmemoryCache$get$lambda(this$AsyncInmemoryCache_0, closure$key_0, closure$ttlMs_0, closure$gen_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$AsyncInmemoryCache$get$lambda(this$AsyncInmemoryCache_0, closure$key_0, closure$ttlMs_0, closure$gen_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$AsyncInmemoryCache$get$lambda(this$AsyncInmemoryCache_0, closure$key_0, closure$ttlMs_0, closure$gen_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$this$AsyncInmemoryCache = this$AsyncInmemoryCache_0;
    this.local$closure$key = closure$key_0;
    this.local$closure$ttlMs = closure$ttlMs_0;
    this.local$closure$gen = closure$gen_0;
    this.local$tmp$ = void 0;
    this.local$tmp$_0 = void 0;
    this.local$tmp$_1 = void 0;
    this.local$tmp$_2 = void 0;
    this.local$tmp$_3 = void 0;
    this.local$entry = void 0;
    this.local$$receiver_0 = void 0;
    this.local$key = void 0;
    this.local$value = void 0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$AsyncInmemoryCache$get$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$AsyncInmemoryCache$get$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$AsyncInmemoryCache$get$lambda.prototype.constructor = Coroutine$AsyncInmemoryCache$get$lambda;
  Coroutine$AsyncInmemoryCache$get$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$entry = this.local$this$AsyncInmemoryCache.cache.get_11rb$(this.local$closure$key);
            if (this.local$entry == null || STimeProvider_getInstance().currentTimeMillis().subtract(this.local$entry.timestamp).compareTo_11rb$(Kotlin.Long.fromInt(this.local$closure$ttlMs)) >= 0) {
              this.local$tmp$ = STimeProvider_getInstance().currentTimeMillis();
              this.local$tmp$_1 = Kotlin.isType(this.local$tmp$_0 = async(this.local$$receiver, this.local$closure$gen), Promise) ? this.local$tmp$_0 : Kotlin.throwCCE();
              this.local$$receiver_0 = this.local$this$AsyncInmemoryCache.cache;
              this.local$key = this.local$closure$key;
              this.local$value = new AsyncInmemoryCache$Entry(this.local$tmp$, this.local$tmp$_1);
              this.local$$receiver_0.put_xwzc9p$(this.local$key, this.local$value);
            }

            this.state_0 = 2;
            this.result_0 = (Kotlin.isType(this.local$tmp$_3 = ((this.local$tmp$_2 = this.local$this$AsyncInmemoryCache.cache.get_11rb$(this.local$closure$key)) != null ? this.local$tmp$_2 : Kotlin.throwNPE()).data, Promise) ? this.local$tmp$_3 : Kotlin.throwCCE()).await(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  AsyncInmemoryCache.prototype.get_7z9egy$ = function (key, ttlMs, gen, continuation) {
    return withCoroutineContext(AsyncInmemoryCache$get$lambda(this, key, ttlMs, gen), continuation);
  };
  AsyncInmemoryCache.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'AsyncInmemoryCache',
    interfaces: []
  };
  function AsyncInmemoryEntry(clazz, cache, key, ttlMs) {
    this.clazz = clazz;
    this.cache = cache;
    this.key = key;
    this.ttlMs = ttlMs;
  }
  AsyncInmemoryEntry.prototype.get_1xgmjb$ = function (routine, continuation) {
    return this.cache.get_7z9egy$(this.key, this.ttlMs, routine, continuation);
  };
  AsyncInmemoryEntry.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'AsyncInmemoryEntry',
    interfaces: []
  };
  var BYTES_EMPTY;
  var BYTES_TEMP_SIZE;
  function BYTES_TEMP$lambda() {
    return new Int8Array(BYTES_TEMP_SIZE);
  }
  var BYTES_TEMP;
  function get_BYTES_TEMP() {
    new Kotlin.PropertyMetadata('BYTES_TEMP');
    return BYTES_TEMP.local.get();
  }
  function ByteArrayBuffer(data, size) {
    if (size === void 0)
      size = data.length;
    this.data = data;
    this._size_0 = size;
  }
  Object.defineProperty(ByteArrayBuffer.prototype, 'size', {
    get: function () {
      return this._size_0;
    },
    set: function (len) {
      this.ensure_za3lpa$(len);
      this._size_0 = len;
    }
  });
  ByteArrayBuffer.prototype.ensure_za3lpa$ = function (expected) {
    if (this.data.length < expected) {
      var tmp$ = this.data;
      var b = (this.data.length + 7 | 0) * 5 | 0;
      this.data = copyOf(tmp$, Math_0.max(expected, b));
    }
    var a = this.size;
    this._size_0 = Math_0.max(a, expected);
  };
  ByteArrayBuffer.prototype.toByteArraySlice_s8cxhz$ = function (position) {
    if (position === void 0)
      position = Kotlin.Long.ZERO;
    return new ByteArraySlice(this.data, position.toInt(), this.size);
  };
  ByteArrayBuffer.prototype.toByteArray = function () {
    return copyOf(this.data, this.size);
  };
  ByteArrayBuffer.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'ByteArrayBuffer',
    interfaces: []
  };
  function ByteArrayBuffer_init(initialCapacity, $this) {
    if (initialCapacity === void 0)
      initialCapacity = 4096;
    $this = $this || Object.create(ByteArrayBuffer.prototype);
    ByteArrayBuffer.call($this, new Int8Array(initialCapacity), 0);
    return $this;
  }
  function set($receiver, o, v) {
    $receiver[o] = Kotlin.toByte(v);
  }
  function set_0($receiver, o, v) {
    $receiver[o] = Kotlin.toByte(v.toInt());
  }
  function getu($receiver, o) {
    return toUnsigned($receiver[o]);
  }
  function join($receiver) {
    var tmp$;
    var tmp$_0 = Int8Array;
    var tmp$_1;
    var sum = 0;
    tmp$_1 = $receiver.iterator();
    while (tmp$_1.hasNext()) {
      var element = tmp$_1.next();
      sum = sum + element.length | 0;
    }
    var out = new tmp$_0(sum);
    var pos = 0;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var c = tmp$.next();
      copyRangeTo_1(c, 0, out, pos, c.length);
      pos = pos + c.length | 0;
    }
    return out;
  }
  function get_hexString($receiver) {
    return Hex_getInstance().encodeLower_fqrh44$($receiver);
  }
  function toUtf8String($receiver) {
    return toString($receiver, Charsets_getInstance().UTF_8);
  }
  function toHexString($receiver) {
    return Hex_getInstance().encode_fqrh44$($receiver);
  }
  function toHexStringLower($receiver) {
    return Hex_getInstance().encodeLower_fqrh44$($receiver);
  }
  function toHexStringUpper($receiver) {
    return Hex_getInstance().encodeUpper_fqrh44$($receiver);
  }
  function indexOfElse($receiver, element, default_0) {
    if (default_0 === void 0)
      default_0 = $receiver.length;
    var idx = indexOf($receiver, element);
    return idx >= 0 ? idx : default_0;
  }
  function indexOf_2($receiver, startOffset, v) {
    for (var n = startOffset; n < $receiver.length; n++)
      if ($receiver[n] === v)
        return n;
    return -1;
  }
  function fromHexString($receiver) {
    return Hex_getInstance().decode_61zpoe$($receiver);
  }
  function fromHexStringIgnoreSpaces($receiver) {
    return fromHexString(replace($receiver, ' ', ''));
  }
  function fromHexChunks($receiver) {
    return fromHexStringIgnoreSpaces(joinToString($receiver, ''));
  }
  function ByteArraySlice(data, position, length) {
    ByteArraySlice$Companion_getInstance();
    this.data = data;
    this.position = position;
    this.length = length;
  }
  ByteArraySlice.prototype.getPointer = function () {
    return new Pointer(this.data, this.position);
  };
  ByteArraySlice.prototype.toString = function () {
    return 'ByteArraySlice(data=' + this.data + ', position=' + this.position + ', length=' + this.length + ')';
  };
  ByteArraySlice.prototype.get_za3lpa$ = function (n) {
    return this.data[this.position + n | 0];
  };
  ByteArraySlice.prototype.set_6t1wet$ = function (n, value) {
    this.data[this.position + n | 0] = value;
  };
  function ByteArraySlice$Companion() {
    ByteArraySlice$Companion_instance = this;
  }
  ByteArraySlice$Companion.prototype.create_vex5g6$ = function (start, end) {
    if (!Kotlin.equals(start.ba, end.ba))
      throw new RuntimeException('Pointer must reference the samea array');
    return new ByteArraySlice(start.ba, start.offset, end.offset - start.offset | 0);
  };
  ByteArraySlice$Companion.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var ByteArraySlice$Companion_instance = null;
  function ByteArraySlice$Companion_getInstance() {
    if (ByteArraySlice$Companion_instance === null) {
      new ByteArraySlice$Companion();
    }
    return ByteArraySlice$Companion_instance;
  }
  ByteArraySlice.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'ByteArraySlice',
    interfaces: []
  };
  function toByteArraySlice($receiver) {
    return new ByteArraySlice($receiver, 0, $receiver.length);
  }
  function contains_1($receiver, other) {
    return indexOf_3($receiver, other) >= 0;
  }
  function indexOf_3($receiver, other) {
    var tmp$;
    var full = $receiver;
    tmp$ = full.length - other.length | 0;
    for (var n = 0; n < tmp$; n++) {
      var $receiver_0 = get_indices(other);
      var all$result;
      all$break: do {
        var tmp$_0;
        if (Kotlin.isType($receiver_0, Collection) && $receiver_0.isEmpty()) {
          all$result = true;
          break all$break;
        }
        tmp$_0 = $receiver_0.iterator();
        while (tmp$_0.hasNext()) {
          var element = tmp$_0.next();
          if (!(full[n + element | 0] === other[element])) {
            all$result = false;
            break all$break;
          }
        }
        all$result = true;
      }
       while (false);
      if (all$result) {
        return n;
      }
    }
    return -1;
  }
  function Cancellable() {
    Cancellable$Companion_getInstance();
  }
  Cancellable.prototype.cancel_tcv7n7$ = function (e, callback$default) {
    if (e === void 0)
      e = new CancellationException('');
    callback$default ? callback$default(e) : this.cancel_tcv7n7$$default(e);
  };
  function Cancellable$Listener() {
  }
  Cancellable$Listener.$metadata$ = {
    kind: Kotlin.Kind.INTERFACE,
    simpleName: 'Listener',
    interfaces: []
  };
  function Cancellable$Companion() {
    Cancellable$Companion_instance = this;
  }
  function Cancellable$Companion$invoke$ObjectLiteral(closure$callback) {
    this.closure$callback = closure$callback;
  }
  Cancellable$Companion$invoke$ObjectLiteral.prototype.cancel_tcv7n7$$default = function (e) {
    this.closure$callback(e);
  };
  Cancellable$Companion$invoke$ObjectLiteral.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    interfaces: [Cancellable]
  };
  Cancellable$Companion.prototype.invoke_4m4org$ = function (callback) {
    return new Cancellable$Companion$invoke$ObjectLiteral(callback);
  };
  Cancellable$Companion.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Cancellable$Companion_instance = null;
  function Cancellable$Companion_getInstance() {
    if (Cancellable$Companion_instance === null) {
      new Cancellable$Companion();
    }
    return Cancellable$Companion_instance;
  }
  Cancellable.$metadata$ = {
    kind: Kotlin.Kind.INTERFACE,
    simpleName: 'Cancellable',
    interfaces: []
  };
  function cancel($receiver, e) {
    if (e === void 0)
      e = new CancellationException('');
    var tmp$;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var c = tmp$.next();
      c.cancel_tcv7n7$(e);
    }
  }
  function cancellable$lambda(this$cancellable) {
    return function (it) {
      cancel(this$cancellable);
      return Unit;
    };
  }
  function cancellable($receiver) {
    return Cancellable$Companion_getInstance().invoke_4m4org$(cancellable$lambda($receiver));
  }
  function close($receiver) {
    var tmp$;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var c = tmp$.next();
      c.close();
    }
  }
  function closeable$lambda_0(this$closeable) {
    return function () {
      close(this$closeable);
      return Unit;
    };
  }
  function closeable_0($receiver) {
    return Closeable_0(closeable$lambda_0($receiver));
  }
  function cancellable$lambda_0(this$cancellable) {
    return function (it) {
      this$cancellable.close();
      return Unit;
    };
  }
  function cancellable_0($receiver) {
    return Cancellable$Companion_getInstance().invoke_4m4org$(cancellable$lambda_0($receiver));
  }
  function closeable$lambda_1() {
    return new CancellationException('');
  }
  function closeable$lambda_2(this$closeable, closure$e) {
    return function () {
      this$closeable.cancel_tcv7n7$(closure$e());
      return Unit;
    };
  }
  function closeable_1($receiver, e) {
    if (e === void 0)
      e = closeable$lambda_1;
    return Closeable_0(closeable$lambda_2($receiver, e));
  }
  function isDigit($receiver) {
    return (new CharRange(48, 57)).contains_mef7kx$($receiver);
  }
  function isLetter($receiver) {
    return (new CharRange(97, 122)).contains_mef7kx$($receiver) || (new CharRange(65, 90)).contains_mef7kx$($receiver);
  }
  function isLetterOrDigit($receiver) {
    return isLetter($receiver) || isDigit($receiver);
  }
  function isLetterOrUnderscore($receiver) {
    return isLetter($receiver) || $receiver === 95 || $receiver === 36;
  }
  function isLetterDigitOrUnderscore($receiver) {
    return isLetterOrDigit($receiver) || $receiver === 95 || $receiver === 36;
  }
  function isLetterOrDigitOrDollar($receiver) {
    return isLetterOrDigit($receiver) || $receiver === 36;
  }
  function get_isNumeric($receiver) {
    return isDigit($receiver) || $receiver === 46 || $receiver === 101 || $receiver === 45;
  }
  function isPrintable($receiver) {
    return (new CharRange(32, 126)).contains_mef7kx$($receiver) || (new CharRange(161, 255)).contains_mef7kx$($receiver);
  }
  var compareToChain = defineInlineFunction('korio-js.com.soywiz.korio.util.compareToChain_ssq1th$', function ($receiver, callback) {
    return $receiver !== 0 ? $receiver : callback();
  });
  function Computed(prop, default_0) {
    this.prop = prop;
    this.default = default_0;
  }
  function Computed$WithParent() {
  }
  Computed$WithParent.$metadata$ = {
    kind: Kotlin.Kind.INTERFACE,
    simpleName: 'WithParent',
    interfaces: []
  };
  Computed.prototype.getValue_7w76kw$ = function (thisRef, p) {
    var current = thisRef;
    while (current != null) {
      var result = this.prop.get(current);
      if (result != null)
        return result;
      current = current.parent;
    }
    return this.default();
  };
  Computed.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'Computed',
    interfaces: []
  };
  function Extra() {
  }
  function Extra$Mixin(extra) {
    if (extra === void 0)
      extra = null;
    this.extra_gs6n81$_0 = extra;
  }
  Object.defineProperty(Extra$Mixin.prototype, 'extra', {
    get: function () {
      return this.extra_gs6n81$_0;
    },
    set: function (extra) {
      this.extra_gs6n81$_0 = extra;
    }
  });
  Extra$Mixin.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'Mixin',
    interfaces: [Extra]
  };
  function Extra$Property(name, defaultGen) {
    if (name === void 0)
      name = null;
    this.name = name;
    this.defaultGen = defaultGen;
  }
  Extra$Property.prototype.getValue_uu943u$ = defineInlineFunction('korio-js.com.soywiz.korio.util.Extra.Property.getValue_uu943u$', wrapFunction(function () {
    var Any = Object;
    var lmapOf = _.com.soywiz.korio.ds.lmapOf_qfcya0$;
    return function (thisRef, property) {
      var tmp$, tmp$_0, tmp$_1, tmp$_2;
      tmp$_1 = thisRef.extra;
      tmp$_0 = (tmp$ = this.name) != null ? tmp$ : property.callableName;
      var res = (tmp$_2 = tmp$_1 != null ? tmp$_1.get_11rb$(tmp$_0) : null) == null || Kotlin.isType(tmp$_2, Any) ? tmp$_2 : Kotlin.throwCCE();
      if (res == null) {
        var r = this.defaultGen();
        var tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7;
        if (thisRef.extra == null)
          thisRef.extra = lmapOf([]);
        tmp$_7 = thisRef.extra;
        tmp$_4 = (tmp$_3 = this.name) != null ? tmp$_3 : property.callableName;
        tmp$_6 = (tmp$_5 = r) == null || Kotlin.isType(tmp$_5, Any) ? tmp$_5 : Kotlin.throwCCE();
        if (tmp$_7 != null) {
          tmp$_7.put_xwzc9p$(tmp$_4, tmp$_6);
        }
        return r;
      }
      return res;
    };
  }));
  Extra$Property.prototype.setValue_ydgkmp$ = defineInlineFunction('korio-js.com.soywiz.korio.util.Extra.Property.setValue_ydgkmp$', wrapFunction(function () {
    var lmapOf = _.com.soywiz.korio.ds.lmapOf_qfcya0$;
    var Any = Object;
    return function (thisRef, property, value) {
      var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
      if (thisRef.extra == null)
        thisRef.extra = lmapOf([]);
      tmp$_3 = thisRef.extra;
      tmp$_0 = (tmp$ = this.name) != null ? tmp$ : property.callableName;
      tmp$_2 = (tmp$_1 = value) == null || Kotlin.isType(tmp$_1, Any) ? tmp$_1 : Kotlin.throwCCE();
      if (tmp$_3 != null) {
        tmp$_3.put_xwzc9p$(tmp$_0, tmp$_2);
      }
    };
  }));
  Extra$Property.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'Property',
    interfaces: []
  };
  function Extra$PropertyThis(name, defaultGen) {
    if (name === void 0)
      name = null;
    this.name = name;
    this.defaultGen = defaultGen;
  }
  Extra$PropertyThis.prototype.getValue_k5kq3i$ = defineInlineFunction('korio-js.com.soywiz.korio.util.Extra.PropertyThis.getValue_k5kq3i$', wrapFunction(function () {
    var Any = Object;
    var lmapOf = _.com.soywiz.korio.ds.lmapOf_qfcya0$;
    return function (thisRef, property) {
      var tmp$, tmp$_0, tmp$_1, tmp$_2;
      tmp$_1 = thisRef.extra;
      tmp$_0 = (tmp$ = this.name) != null ? tmp$ : property.callableName;
      var res = (tmp$_2 = tmp$_1 != null ? tmp$_1.get_11rb$(tmp$_0) : null) == null || Kotlin.isType(tmp$_2, Any) ? tmp$_2 : Kotlin.throwCCE();
      if (res == null) {
        var r = this.defaultGen(thisRef);
        var tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7;
        if (thisRef.extra == null)
          thisRef.extra = lmapOf([]);
        tmp$_7 = thisRef.extra;
        tmp$_4 = (tmp$_3 = this.name) != null ? tmp$_3 : property.callableName;
        tmp$_6 = (tmp$_5 = r) == null || Kotlin.isType(tmp$_5, Any) ? tmp$_5 : Kotlin.throwCCE();
        if (tmp$_7 != null) {
          tmp$_7.put_xwzc9p$(tmp$_4, tmp$_6);
        }
        return r;
      }
      return res;
    };
  }));
  Extra$PropertyThis.prototype.setValue_ta936u$ = defineInlineFunction('korio-js.com.soywiz.korio.util.Extra.PropertyThis.setValue_ta936u$', wrapFunction(function () {
    var lmapOf = _.com.soywiz.korio.ds.lmapOf_qfcya0$;
    var Any = Object;
    return function (thisRef, property, value) {
      var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
      if (thisRef.extra == null)
        thisRef.extra = lmapOf([]);
      tmp$_3 = thisRef.extra;
      tmp$_0 = (tmp$ = this.name) != null ? tmp$ : property.callableName;
      tmp$_2 = (tmp$_1 = value) == null || Kotlin.isType(tmp$_1, Any) ? tmp$_1 : Kotlin.throwCCE();
      if (tmp$_3 != null) {
        tmp$_3.put_xwzc9p$(tmp$_0, tmp$_2);
      }
    };
  }));
  Extra$PropertyThis.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'PropertyThis',
    interfaces: []
  };
  Extra.$metadata$ = {
    kind: Kotlin.Kind.INTERFACE,
    simpleName: 'Extra',
    interfaces: []
  };
  function extraProperty(name, default_0) {
    this.name = name;
    this.default = default_0;
  }
  extraProperty.prototype.getValue_uu943u$ = defineInlineFunction('korio-js.com.soywiz.korio.util.extraProperty.getValue_uu943u$', wrapFunction(function () {
    var Any = Object;
    return function (thisRef, property) {
      var tmp$, tmp$_0, tmp$_1;
      return (tmp$_1 = (tmp$_0 = (tmp$ = thisRef.extra) != null ? tmp$.get_11rb$(this.name) : null) == null || Kotlin.isType(tmp$_0, Any) ? tmp$_0 : Kotlin.throwCCE()) != null ? tmp$_1 : this.default;
    };
  }));
  extraProperty.prototype.setValue_ydgkmp$ = defineInlineFunction('korio-js.com.soywiz.korio.util.extraProperty.setValue_ydgkmp$', wrapFunction(function () {
    var lmapOf = _.com.soywiz.korio.ds.lmapOf_qfcya0$;
    var Any = Object;
    return function (thisRef, property, value) {
      var tmp$, tmp$_0, tmp$_1, tmp$_2;
      if (thisRef.extra == null)
        thisRef.extra = lmapOf([]);
      tmp$_2 = thisRef.extra;
      tmp$ = this.name;
      tmp$_1 = (tmp$_0 = value) == null || Kotlin.isType(tmp$_0, Any) ? tmp$_0 : Kotlin.throwCCE();
      if (tmp$_2 != null) {
        tmp$_2.put_xwzc9p$(tmp$, tmp$_1);
      }
    };
  }));
  extraProperty.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'extraProperty',
    interfaces: []
  };
  function INDENTS() {
    INDENTS_instance = this;
    this.INDENTS_0 = arrayListOf(['']);
  }
  INDENTS.prototype.get_za3lpa$ = function (index) {
    if (index >= this.INDENTS_0.size) {
      var calculate = this.INDENTS_0.size * 10 | 0;
      var indent = this.INDENTS_0.get_za3lpa$(this.INDENTS_0.size - 1 | 0);
      while (calculate >= this.INDENTS_0.size) {
        indent += '\t';
        this.INDENTS_0.add_11rb$(indent);
      }
    }
    return index <= 0 ? '' : this.INDENTS_0.get_za3lpa$(index);
  };
  INDENTS.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'INDENTS',
    interfaces: []
  };
  var INDENTS_instance = null;
  function INDENTS_getInstance() {
    if (INDENTS_instance === null) {
      new INDENTS();
    }
    return INDENTS_instance;
  }
  function Indenter(actions) {
    Indenter$Companion_getInstance();
    if (actions === void 0) {
      actions = ArrayList_init();
    }
    this.actions_0 = actions;
    this.noIndentEmptyLines = true;
    this.out = '';
  }
  function Indenter$Action() {
  }
  function Indenter$Action$Text() {
  }
  Indenter$Action$Text.$metadata$ = {
    kind: Kotlin.Kind.INTERFACE,
    simpleName: 'Text',
    interfaces: [Indenter$Action]
  };
  function Indenter$Action$Marker(data) {
    this.data = data;
  }
  Indenter$Action$Marker.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'Marker',
    interfaces: [Indenter$Action]
  };
  Indenter$Action$Marker.prototype.component1 = function () {
    return this.data;
  };
  Indenter$Action$Marker.prototype.copy_za3rmp$ = function (data) {
    return new Indenter$Action$Marker(data === void 0 ? this.data : data);
  };
  Indenter$Action$Marker.prototype.toString = function () {
    return 'Marker(data=' + Kotlin.toString(this.data) + ')';
  };
  Indenter$Action$Marker.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.data) | 0;
    return result;
  };
  Indenter$Action$Marker.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.data, other.data))));
  };
  function Indenter$Action$Inline(str) {
    this.str_ozhef3$_0 = str;
  }
  Object.defineProperty(Indenter$Action$Inline.prototype, 'str', {
    get: function () {
      return this.str_ozhef3$_0;
    }
  });
  Indenter$Action$Inline.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'Inline',
    interfaces: [Indenter$Action$Text]
  };
  Indenter$Action$Inline.prototype.component1 = function () {
    return this.str;
  };
  Indenter$Action$Inline.prototype.copy_61zpoe$ = function (str) {
    return new Indenter$Action$Inline(str === void 0 ? this.str : str);
  };
  Indenter$Action$Inline.prototype.toString = function () {
    return 'Inline(str=' + Kotlin.toString(this.str) + ')';
  };
  Indenter$Action$Inline.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.str) | 0;
    return result;
  };
  Indenter$Action$Inline.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.str, other.str))));
  };
  function Indenter$Action$Line(str) {
    this.str_qqk64k$_0 = str;
  }
  Object.defineProperty(Indenter$Action$Line.prototype, 'str', {
    get: function () {
      return this.str_qqk64k$_0;
    }
  });
  Indenter$Action$Line.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'Line',
    interfaces: [Indenter$Action$Text]
  };
  Indenter$Action$Line.prototype.component1 = function () {
    return this.str;
  };
  Indenter$Action$Line.prototype.copy_61zpoe$ = function (str) {
    return new Indenter$Action$Line(str === void 0 ? this.str : str);
  };
  Indenter$Action$Line.prototype.toString = function () {
    return 'Line(str=' + Kotlin.toString(this.str) + ')';
  };
  Indenter$Action$Line.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.str) | 0;
    return result;
  };
  Indenter$Action$Line.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.str, other.str))));
  };
  function Indenter$Action$LineDeferred(callback) {
    this.callback = callback;
  }
  Indenter$Action$LineDeferred.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'LineDeferred',
    interfaces: [Indenter$Action]
  };
  Indenter$Action$LineDeferred.prototype.component1 = function () {
    return this.callback;
  };
  Indenter$Action$LineDeferred.prototype.copy_1ckakx$ = function (callback) {
    return new Indenter$Action$LineDeferred(callback === void 0 ? this.callback : callback);
  };
  Indenter$Action$LineDeferred.prototype.toString = function () {
    return 'LineDeferred(callback=' + Kotlin.toString(this.callback) + ')';
  };
  Indenter$Action$LineDeferred.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.callback) | 0;
    return result;
  };
  Indenter$Action$LineDeferred.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.callback, other.callback))));
  };
  function Indenter$Action$Indent() {
    Indenter$Action$Indent_instance = this;
  }
  Indenter$Action$Indent.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'Indent',
    interfaces: [Indenter$Action]
  };
  var Indenter$Action$Indent_instance = null;
  function Indenter$Action$Indent_getInstance() {
    if (Indenter$Action$Indent_instance === null) {
      new Indenter$Action$Indent();
    }
    return Indenter$Action$Indent_instance;
  }
  function Indenter$Action$Unindent() {
    Indenter$Action$Unindent_instance = this;
  }
  Indenter$Action$Unindent.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'Unindent',
    interfaces: [Indenter$Action]
  };
  var Indenter$Action$Unindent_instance = null;
  function Indenter$Action$Unindent_getInstance() {
    if (Indenter$Action$Unindent_instance === null) {
      new Indenter$Action$Unindent();
    }
    return Indenter$Action$Unindent_instance;
  }
  Indenter$Action.$metadata$ = {
    kind: Kotlin.Kind.INTERFACE,
    simpleName: 'Action',
    interfaces: []
  };
  function Indenter$Companion() {
    Indenter$Companion_instance = this;
    var indenter = new Indenter();
    this.EMPTY = indenter;
  }
  Indenter$Companion.prototype.genString_z3r7a6$ = function (init) {
    var indenter = new Indenter();
    init(indenter);
    return indenter.toString();
  };
  Indenter$Companion.prototype.gen_z3r7a6$ = defineInlineFunction('korio-js.com.soywiz.korio.util.Indenter.Companion.gen_z3r7a6$', wrapFunction(function () {
    var Indenter_init = _.com.soywiz.korio.util.Indenter;
    return function (init) {
      var indenter = new Indenter_init();
      init(indenter);
      return indenter;
    };
  }));
  Indenter$Companion.prototype.single_61zpoe$ = function (str) {
    return new Indenter(arrayListOf([new Indenter$Action$Line(str)]));
  };
  Indenter$Companion.prototype.invoke_61zpoe$ = function (str) {
    return this.single_61zpoe$(str);
  };
  Indenter$Companion.prototype.replaceString_mvjluj$ = function (templateString, replacements) {
    var pattern = Regex('\\$(\\w+)');
    var replace_20wsma$result;
    replace_20wsma$break: do {
      var match = pattern.find_905azu$(templateString);
      if (match == null) {
        replace_20wsma$result = templateString.toString();
        break replace_20wsma$break;
      }
      var lastStart = 0;
      var length = templateString.length;
      var sb = StringBuilder_init(length);
      do {
        var foundMatch = match != null ? match : Kotlin.throwNPE();
        sb.append_ezbsdh$(templateString, lastStart, foundMatch.range.start);
        var tmp$;
        sb.append_gw00v9$((tmp$ = replacements.get_11rb$(foundMatch.groupValues.get_za3lpa$(1))) != null ? tmp$ : '');
        lastStart = foundMatch.range.endInclusive + 1 | 0;
        match = foundMatch.next();
      }
       while (lastStart < length && match != null);
      if (lastStart < length) {
        sb.append_ezbsdh$(templateString, lastStart, length);
      }
      replace_20wsma$result = sb.toString();
    }
     while (false);
    return replace_20wsma$result;
  };
  Indenter$Companion.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Indenter$Companion_instance = null;
  function Indenter$Companion_getInstance() {
    if (Indenter$Companion_instance === null) {
      new Indenter$Companion();
    }
    return Indenter$Companion_instance;
  }
  Indenter.prototype.inline_61zpoe$ = function (str) {
    this.actions_0.add_11rb$(new Indenter$Action$Inline(str));
    return this;
  };
  Indenter.prototype.line_2swh6d$ = function (indenter) {
    this.actions_0.addAll_brywnq$(indenter.actions_0);
    return this;
  };
  Indenter.prototype.line_61zpoe$ = function (str) {
    this.actions_0.add_11rb$(new Indenter$Action$Line(str));
    return this;
  };
  Indenter.prototype.line_pdl1vj$ = function (str) {
    if (str != null)
      this.line_61zpoe$(str);
  };
  Indenter.prototype.mark_za3rmp$ = function (data) {
    this.actions_0.add_11rb$(new Indenter$Action$Marker(data));
    return this;
  };
  function Indenter$linedeferred$lambda(closure$init) {
    return function () {
      var indenter = new Indenter();
      closure$init(indenter);
      return indenter;
    };
  }
  Indenter.prototype.linedeferred_z3r7a6$ = function (init) {
    this.actions_0.add_11rb$(new Indenter$Action$LineDeferred(Indenter$linedeferred$lambda(init)));
    return this;
  };
  Indenter.prototype.line_a4mwiz$ = defineInlineFunction('korio-js.com.soywiz.korio.util.Indenter.line_a4mwiz$', function (str, callback) {
    this.line_61zpoe$.call(this, str.length === 0 ? '{' : str + ' {');
    this._indent();
    try {
      callback();
    }
    finally {
      this._unindent();
    }
    this;
    this.line_61zpoe$('}');
    return this;
  });
  Indenter.prototype.line_slzebz$ = defineInlineFunction('korio-js.com.soywiz.korio.util.Indenter.line_slzebz$', function (str, after, after2, callback) {
    if (after === void 0)
      after = '';
    if (after2 === void 0)
      after2 = '';
    this.line_61zpoe$.call(this, str.length === 0 ? '{ ' + after : str + ' { ' + after);
    this._indent();
    try {
      callback();
    }
    finally {
      this._unindent();
    }
    this;
    this.line_61zpoe$('}' + after2);
    return this;
  });
  Indenter.prototype.indent_o14v8n$ = defineInlineFunction('korio-js.com.soywiz.korio.util.Indenter.indent_o14v8n$', function (callback) {
    this._indent();
    try {
      callback();
    }
    finally {
      this._unindent();
    }
    return this;
  });
  Indenter.prototype._indent = function () {
    this.actions_0.add_11rb$(Indenter$Action$Indent_getInstance());
  };
  Indenter.prototype._unindent = function () {
    this.actions_0.add_11rb$(Indenter$Action$Unindent_getInstance());
  };
  function Indenter$toString$eval(closure$newLine, this$Indenter, closure$doIndent, closure$out, closure$line, closure$indentIndex, closure$markHandler) {
    var iterator = Kotlin.kotlin.text.iterator_gw00vp$;
    var toBoxedChar = Kotlin.toBoxedChar;
    var unboxChar_0 = Kotlin.unboxChar;
    return function closure$eval(actions) {
      var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
      tmp$ = actions.iterator();
      while (tmp$.hasNext()) {
        var action = tmp$.next();
        if (Kotlin.isType(action, Indenter$Action$Text)) {
          if (closure$newLine.v) {
            var tmp$_4 = this$Indenter.noIndentEmptyLines;
            if (tmp$_4) {
              tmp$_4 = action.str.length === 0;
            }
            if (tmp$_4) {
              if (closure$doIndent)
                closure$out.append_s8itvh$(10);
              tmp$_0 = closure$line.v;
              closure$line.v = tmp$_0 + 1 | 0;
            }
             else {
              if (closure$doIndent)
                closure$out.append_gw00v9$(INDENTS_getInstance().get_za3lpa$(closure$indentIndex.v));
              else
                closure$out.append_gw00v9$(' ');
            }
          }
          closure$out.append_gw00v9$(action.str);
          if (Kotlin.isType(action, Indenter$Action$Line)) {
            var tmp$_5 = closure$line;
            var tmp$_6 = closure$line.v;
            var tmp$_7;
            var count = 0;
            tmp$_7 = iterator(action.str);
            while (tmp$_7.hasNext()) {
              var element = unboxChar_0(tmp$_7.next());
              if (unboxChar(toBoxedChar(element)) === 10) {
                count = count + 1 | 0;
              }
            }
            tmp$_5.v = tmp$_6 + count | 0;
            if (closure$doIndent)
              closure$out.append_s8itvh$(10);
            tmp$_1 = closure$line.v;
            closure$line.v = tmp$_1 + 1 | 0;
            closure$newLine.v = true;
          }
           else {
            closure$newLine.v = false;
          }
        }
         else if (Kotlin.isType(action, Indenter$Action$LineDeferred))
          closure$eval(action.callback().actions_0);
        else if (Kotlin.equals(action, Indenter$Action$Indent_getInstance())) {
          tmp$_2 = closure$indentIndex.v;
          closure$indentIndex.v = tmp$_2 + 1 | 0;
        }
         else if (Kotlin.equals(action, Indenter$Action$Unindent_getInstance())) {
          tmp$_3 = closure$indentIndex.v;
          closure$indentIndex.v = tmp$_3 - 1 | 0;
        }
         else if (Kotlin.isType(action, Indenter$Action$Marker))
          closure$markHandler != null ? closure$markHandler(closure$out, closure$line.v, action.data) : null;
      }
    };
  }
  Indenter.prototype.toString_l6l5ny$ = function (markHandler, doIndent) {
    var out = new StringBuilder();
    var line = {v: 0};
    var newLine = {v: true};
    var indentIndex = {v: 0};
    var eval_0 = Indenter$toString$eval(newLine, this, doIndent, out, line, indentIndex, markHandler);
    eval_0(this.actions_0);
    return out.toString();
  };
  Indenter.prototype.toString_95lvll$ = function (markHandler) {
    return this.toString_l6l5ny$(markHandler, true);
  };
  Indenter.prototype.toString_8kj6y5$ = function (doIndent, indentChunk) {
    if (doIndent === void 0)
      doIndent = true;
    if (indentChunk === void 0)
      indentChunk = '\t';
    var out = this.toString_l6l5ny$(null, doIndent);
    return Kotlin.equals(indentChunk, '\t') ? out : replace(out, '\t', indentChunk);
  };
  Indenter.prototype.toString = function () {
    return this.toString_l6l5ny$(null, true);
  };
  Indenter.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'Indenter',
    interfaces: []
  };
  var nonNullMap = defineInlineFunction('korio-js.com.soywiz.korio.util.nonNullMap_96jf0l$', function ($receiver, map) {
    return $receiver == null ? null : map($receiver);
  });
  function ListReader(list) {
    this.list = list;
    this.position = 0;
  }
  Object.defineProperty(ListReader.prototype, 'size', {
    get: function () {
      return this.list.size;
    }
  });
  Object.defineProperty(ListReader.prototype, 'eof', {
    get: function () {
      return this.position >= this.list.size;
    }
  });
  Object.defineProperty(ListReader.prototype, 'hasMore', {
    get: function () {
      return this.position < this.list.size;
    }
  });
  ListReader.prototype.peek = function () {
    return this.list.get_za3lpa$(this.position);
  };
  ListReader.prototype.skip_za3lpa$ = function (count) {
    if (count === void 0)
      count = 1;
    this.position = this.position + count | 0;
    return this;
  };
  ListReader.prototype.read = function () {
    var $receiver = this.peek();
    this.skip_za3lpa$(1);
    return $receiver;
  };
  ListReader.prototype.dump = function () {
    var tmp$;
    tmp$ = this.list.iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      println(item);
    }
  };
  ListReader.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'ListReader',
    interfaces: []
  };
  function flip($receiver) {
    var destination = ArrayList_init($receiver.size);
    var tmp$;
    tmp$ = $receiver.entries.iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      destination.add_11rb$(new Pair(item.value, item.key));
    }
    return toMap(destination);
  }
  function toTreeMap($receiver, comparator) {
    throw new NotImplementedError_init();
  }
  function toCaseInsensitiveTreeMap($receiver) {
    var res = new CaseInsensitiveHashMap();
    res.putAll_a2k3zr$($receiver);
    return res;
  }
  function CaseInsensitiveHashMap(mapOrig, lcToOrig, mapLC) {
    if (mapOrig === void 0)
      mapOrig = lmapOf([]);
    if (lcToOrig === void 0)
      lcToOrig = lmapOf([]);
    if (mapLC === void 0)
      mapLC = lmapOf([]);
    this.mapOrig_0 = mapOrig;
    this.lcToOrig_0 = lcToOrig;
    this.mapLC_0 = mapLC;
  }
  CaseInsensitiveHashMap.prototype.containsKey_11rb$ = function (key) {
    return this.mapLC_0.containsKey_11rb$(key.toLowerCase());
  };
  CaseInsensitiveHashMap.prototype.clear = function () {
    this.mapOrig_0.clear();
    this.mapLC_0.clear();
    this.lcToOrig_0.clear();
  };
  CaseInsensitiveHashMap.prototype.get_11rb$ = function (key) {
    return this.mapLC_0.get_11rb$(key.toLowerCase());
  };
  CaseInsensitiveHashMap.prototype.put_xwzc9p$ = function (key, value) {
    this.remove_11rb$(key);
    this.mapOrig_0.put_xwzc9p$(key, value);
    this.lcToOrig_0.put_xwzc9p$(key.toLowerCase(), key);
    return this.mapLC_0.put_xwzc9p$(key.toLowerCase(), value);
  };
  CaseInsensitiveHashMap.prototype.putAll_a2k3zr$ = function (from) {
    var tmp$;
    tmp$ = from.entries.iterator();
    while (tmp$.hasNext()) {
      var v = tmp$.next();
      this.put_xwzc9p$(v.key, v.value);
    }
  };
  CaseInsensitiveHashMap.prototype.remove_11rb$ = function (key) {
    var lkey = key.toLowerCase();
    var okey = this.lcToOrig_0.get_11rb$(lkey);
    var $receiver = this.mapOrig_0;
    var tmp$;
    (Kotlin.isType(tmp$ = $receiver, MutableMap) ? tmp$ : Kotlin.throwCCE()).remove_11rb$(okey);
    var res = this.mapLC_0.remove_11rb$(lkey);
    this.lcToOrig_0.remove_11rb$(lkey);
    return res;
  };
  Object.defineProperty(CaseInsensitiveHashMap.prototype, 'entries', {
    get: function () {
      return this.mapOrig_0.entries;
    }
  });
  Object.defineProperty(CaseInsensitiveHashMap.prototype, 'keys', {
    get: function () {
      return this.mapOrig_0.keys;
    }
  });
  Object.defineProperty(CaseInsensitiveHashMap.prototype, 'size', {
    get: function () {
      return this.mapOrig_0.size;
    }
  });
  Object.defineProperty(CaseInsensitiveHashMap.prototype, 'values', {
    get: function () {
      return this.mapOrig_0.values;
    }
  });
  CaseInsensitiveHashMap.prototype.containsValue_11rc$ = function (value) {
    return this.mapOrig_0.containsValue_11rc$(value);
  };
  CaseInsensitiveHashMap.prototype.isEmpty = function () {
    return this.mapOrig_0.isEmpty();
  };
  CaseInsensitiveHashMap.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'CaseInsensitiveHashMap',
    interfaces: [MutableMap]
  };
  var mask = defineInlineFunction('korio-js.com.soywiz.korio.util.mask_s8ev3n$', function ($receiver) {
    return (1 << $receiver) - 1 | 0;
  });
  var mask_0 = defineInlineFunction('korio-js.com.soywiz.korio.util.mask_mts6qi$', function ($receiver) {
    return Kotlin.Long.ONE.shiftLeft($receiver.toInt()).subtract(Kotlin.Long.ONE);
  });
  function toUInt($receiver) {
    return Kotlin.Long.fromInt($receiver).and(new Kotlin.Long(-1, 0));
  }
  function getBits($receiver, offset, count) {
    return $receiver >>> offset & ((1 << count) - 1 | 0);
  }
  function extract($receiver, offset, count) {
    return $receiver >>> offset & ((1 << count) - 1 | 0);
  }
  function extract8($receiver, offset) {
    return $receiver >>> offset & 255;
  }
  function extract_0($receiver, offset) {
    return ($receiver >>> offset & 1) !== 0;
  }
  function extractScaled($receiver, offset, count, scale) {
    var mask = (1 << count) - 1 | 0;
    return Kotlin.imul(extract($receiver, offset, count), scale) / mask | 0;
  }
  function extractScaledf01($receiver, offset, count) {
    var mask = (1 << count) - 1 | 0;
    return extract($receiver, offset, count) / mask;
  }
  function extractScaledFF($receiver, offset, count) {
    return extractScaled($receiver, offset, count, 255);
  }
  function extractScaledFFDefault($receiver, offset, count, default_0) {
    return count === 0 ? default_0 : extractScaled($receiver, offset, count, 255);
  }
  function insert($receiver, value, offset, count) {
    var mask = (1 << count) - 1 | 0;
    var clearValue = $receiver & ~(mask << offset);
    return clearValue | (value & mask) << offset;
  }
  function insert8($receiver, value, offset) {
    return insert($receiver, value, offset, 8);
  }
  function insert_0($receiver, value, offset) {
    return insert($receiver, value ? 1 : 0, offset, 1);
  }
  function insertScaled($receiver, value, offset, count, scale) {
    var mask = (1 << count) - 1 | 0;
    return insert($receiver, Kotlin.imul(value, mask) / scale | 0, offset, count);
  }
  function insertScaledFF($receiver, value, offset, count) {
    return count === 0 ? $receiver : insertScaled($receiver, value, offset, count, 255);
  }
  function nextAlignedTo($receiver, align) {
    if ($receiver % align === 0) {
      return $receiver;
    }
     else {
      return Kotlin.imul(($receiver / align | 0) + 1 | 0, align);
    }
  }
  function nextAlignedTo_0($receiver, align) {
    if (Kotlin.equals($receiver.modulo(align), Kotlin.Long.ZERO)) {
      return $receiver;
    }
     else {
      return $receiver.div(align).add(Kotlin.Long.fromInt(1)).multiply(align);
    }
  }
  function clamp($receiver, min, max) {
    return $receiver < min ? min : $receiver > max ? max : $receiver;
  }
  function clamp_0($receiver, min, max) {
    return $receiver < min ? min : $receiver > max ? max : $receiver;
  }
  function clamp_1($receiver, min, max) {
    return $receiver.compareTo_11rb$(min) < 0 ? min : $receiver.compareTo_11rb$(max) > 0 ? max : $receiver;
  }
  function toIntSafe($receiver) {
    if (!Kotlin.equals(Kotlin.Long.fromInt($receiver.toInt()), $receiver))
      throw new IllegalArgumentException("Long doesn't fit Integer");
    return $receiver.toInt();
  }
  function toIntClamp($receiver, min, max) {
    if (min === void 0)
      min = IntCompanionObject.MIN_VALUE;
    if (max === void 0)
      max = IntCompanionObject.MAX_VALUE;
    if ($receiver.compareTo_11rb$(Kotlin.Long.fromInt(min)) < 0)
      return min;
    if ($receiver.compareTo_11rb$(Kotlin.Long.fromInt(max)) > 0)
      return max;
    return $receiver.toInt();
  }
  function toUintClamp($receiver, min, max) {
    if (min === void 0)
      min = 0;
    if (max === void 0)
      max = IntCompanionObject.MAX_VALUE;
    return toIntClamp($receiver, 0, IntCompanionObject.MAX_VALUE);
  }
  function toNumber($receiver) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4;
    return (tmp$_4 = (tmp$_3 = (tmp$_1 = (tmp$ = toIntOrNull_0($receiver)) == null || Kotlin.isNumber(tmp$) ? tmp$ : Kotlin.throwCCE()) != null ? tmp$_1 : (tmp$_0 = toLongOrNull($receiver)) == null || Kotlin.isNumber(tmp$_0) ? tmp$_0 : Kotlin.throwCCE()) != null ? tmp$_3 : (tmp$_2 = toDoubleOrNull($receiver)) == null || Kotlin.isNumber(tmp$_2) ? tmp$_2 : Kotlin.throwCCE()) != null ? tmp$_4 : 0;
  }
  function toUnsigned($receiver) {
    return $receiver & 255;
  }
  function toUnsigned_0($receiver) {
    return Kotlin.Long.fromInt($receiver).and(new Kotlin.Long(-1, 0));
  }
  function signExtend($receiver, bits) {
    return $receiver << 32 - bits >> 32 - bits;
  }
  function signExtend_0($receiver, bits) {
    return $receiver.shiftLeft(64 - bits | 0).shiftRight(64 - bits | 0);
  }
  function get_niceStr($receiver) {
    return Kotlin.Long.fromNumber($receiver).toNumber() === $receiver ? Kotlin.Long.fromNumber($receiver).toString() : $receiver.toString();
  }
  function get_niceStr_0($receiver) {
    return Kotlin.Long.fromNumber($receiver).toNumber() === $receiver ? Kotlin.Long.fromNumber($receiver).toString() : $receiver.toString();
  }
  function umod($receiver, other) {
    var tmp$;
    var remainder = $receiver % other;
    if (remainder < 0)
      tmp$ = remainder + other | 0;
    else
      tmp$ = remainder;
    return tmp$;
  }
  function convertRange($receiver, srcMin, srcMax, dstMin, dstMax) {
    var ratio = ($receiver - srcMin) / (srcMax - srcMin);
    return dstMin + (dstMax - dstMin) * ratio;
  }
  function convertRangeClamped($receiver, srcMin, srcMax, dstMin, dstMax) {
    return clamp_0(convertRange($receiver, srcMin, srcMax, dstMin, dstMax), dstMin, dstMax);
  }
  function convertRange_0($receiver, srcMin, srcMax, dstMin, dstMax) {
    var ratio = $receiver.subtract(srcMin).toNumber() / srcMax.subtract(srcMin).toNumber();
    return Kotlin.Long.fromNumber(dstMin.toNumber() + dstMax.subtract(dstMin).toNumber() * ratio);
  }
  function toIntCeil($receiver) {
    return Math_0.ceil($receiver) | 0;
  }
  function toIntFloor($receiver) {
    return Math_0.floor($receiver) | 0;
  }
  function toIntRound($receiver) {
    return Kotlin.Long.fromNumber(round($receiver)).toInt();
  }
  function get_isOdd($receiver) {
    return $receiver % 2 === 1;
  }
  function get_isEven($receiver) {
    return $receiver % 2 === 0;
  }
  var reversed_0 = Kotlin.kotlin.text.reversed_gw00vp$;
  function toString_0($receiver, radix) {
    var temp = $receiver;
    if (Kotlin.equals(temp, Kotlin.Long.ZERO)) {
      return '0';
    }
     else {
      var out = '';
      while (!Kotlin.equals(temp, Kotlin.Long.ZERO)) {
        var digit = temp.modulo(Kotlin.Long.fromInt(radix));
        temp = temp.div(Kotlin.Long.fromInt(radix));
        out += String.fromCharCode(Hex_getInstance().DIGITS_UPPER.charCodeAt(digit.toInt()));
      }
      var tmp$;
      return reversed_0(Kotlin.isCharSequence(tmp$ = out) ? tmp$ : Kotlin.throwCCE()).toString();
    }
  }
  function toString_1($receiver, radix) {
    var temp = $receiver;
    if (temp === 0) {
      return '0';
    }
     else {
      var out = '';
      while (temp !== 0) {
        var digit = temp % radix;
        temp = temp / radix | 0;
        out += String.fromCharCode(Hex_getInstance().DIGITS_UPPER.charCodeAt(digit));
      }
      var tmp$;
      return reversed_0(Kotlin.isCharSequence(tmp$ = out) ? tmp$ : Kotlin.throwCCE()).toString();
    }
  }
  function Once() {
    this.completed = false;
  }
  Once.prototype.invoke_o14v8n$ = defineInlineFunction('korio-js.com.soywiz.korio.util.Once.invoke_o14v8n$', function (callback) {
    if (!this.completed) {
      this.completed = true;
      callback();
    }
  });
  Once.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'Once',
    interfaces: []
  };
  function Pointer(ba, offset) {
    if (offset === void 0)
      offset = 0;
    this.ba = ba;
    this.offset = offset;
  }
  Pointer.prototype.inc = function () {
    var tmp$;
    return tmp$ = this.offset, this.offset = tmp$ + 1 | 0, tmp$;
  };
  Pointer.prototype.dec = function () {
    var tmp$;
    return tmp$ = this.offset, this.offset = tmp$ - 1 | 0, tmp$;
  };
  Pointer.prototype.getU8 = function () {
    return this.ba[this.offset] & 255;
  };
  Pointer.prototype.setU8_za3lpa$ = function (v) {
    this.ba[this.offset] = Kotlin.toByte(v);
  };
  Pointer.prototype.readU8 = function () {
    var tmp$;
    return this.ba[tmp$ = this.offset, this.offset = tmp$ + 1 | 0, tmp$] & 255;
  };
  Pointer.prototype.writeU8_za3lpa$ = function (v) {
    var tmp$;
    this.ba[tmp$ = this.offset, this.offset = tmp$ + 1 | 0, tmp$] = Kotlin.toByte(v);
  };
  Pointer.prototype.plus_za3lpa$ = function (offset) {
    return new Pointer(this.ba, this.offset + offset | 0);
  };
  Pointer.prototype.minus_dgvftr$ = function (that) {
    return this.offset - that.offset | 0;
  };
  Pointer.prototype.setAdd_j5u1wz$ = function (that, add) {
    this.offset = that.offset + add | 0;
  };
  Pointer.prototype.compareTo_11rb$ = function (other) {
    return Kotlin.primitiveCompareTo(this.offset, other.offset);
  };
  Pointer.prototype.take_za3lpa$ = function (count) {
    return new ByteArraySlice(this.ba, this.offset, count);
  };
  Pointer.prototype.toString = function () {
    return 'Pointer(' + this.ba + ', ' + this.offset + ')';
  };
  Pointer.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'Pointer',
    interfaces: [Comparable]
  };
  function Pool(reset, preallocate, gen) {
    if (reset === void 0)
      reset = Pool_init$lambda;
    if (preallocate === void 0)
      preallocate = 0;
    this.reset_0 = reset;
    this.gen_0 = gen;
    this.items_0 = new LinkedList();
    var tmp$;
    tmp$ = preallocate;
    for (var n = 0; n < tmp$; n++) {
      var $receiver = this.items_0;
      var element = this.gen_0();
      $receiver.add_11rb$(element);
    }
  }
  Object.defineProperty(Pool.prototype, 'itemsInPool', {
    get: function () {
      return this.items_0.size;
    }
  });
  Pool.prototype.alloc = function () {
    if (this.items_0.isNotEmpty()) {
      return this.items_0.removeLast();
    }
     else {
      return this.gen_0();
    }
  };
  Pool.prototype.free_11rb$ = function (v) {
    this.reset_0(v);
    this.items_0.addFirst_11rb$(v);
  };
  Pool.prototype.free_p1ys8y$ = function (v) {
    var tmp$;
    tmp$ = v.iterator();
    while (tmp$.hasNext()) {
      var it = tmp$.next();
      this.reset_0(it);
    }
    this.items_0.addAll_p1ys8y$(v);
  };
  Pool.prototype.alloc_2o04qz$ = defineInlineFunction('korio-js.com.soywiz.korio.util.Pool.alloc_2o04qz$', function (callback) {
    var temp = this.alloc();
    try {
      return callback(temp);
    }
    finally {
      this.free_11rb$(temp);
    }
  });
  function Pool_init$lambda(it) {
    return Unit;
  }
  Pool.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'Pool',
    interfaces: []
  };
  function Pool_init(preallocate, gen, $this) {
    if (preallocate === void 0)
      preallocate = 0;
    $this = $this || Object.create(Pool.prototype);
    Pool.call($this, Pool_init$lambda_0, preallocate, gen);
    return $this;
  }
  function Pool_init$lambda_0(it) {
    return Unit;
  }
  var LONG_ZERO_TO_MAX_RANGE;
  function toLongRange($receiver) {
    return Kotlin.Long.fromInt($receiver.start).rangeTo(Kotlin.Long.fromInt($receiver.endInclusive));
  }
  function _read8($receiver, o) {
    return $receiver[o];
  }
  function _read16_le($receiver, o) {
    return readU8_1($receiver, o + 0 | 0) << 0 | readU8_1($receiver, o + 1 | 0) << 8;
  }
  function _read24_le($receiver, o) {
    return readU8_1($receiver, o + 0 | 0) << 0 | readU8_1($receiver, o + 1 | 0) << 8 | readU8_1($receiver, o + 2 | 0) << 16;
  }
  function _read32_le($receiver, o) {
    return readU8_1($receiver, o + 0 | 0) << 0 | readU8_1($receiver, o + 1 | 0) << 8 | readU8_1($receiver, o + 2 | 0) << 16 | readU8_1($receiver, o + 3 | 0) << 24;
  }
  function _read64_le($receiver, o) {
    var o_0 = o + 0 | 0;
    var o_1 = o + 4 | 0;
    return toUnsigned_0(readU8_1($receiver, o_0 + 0 | 0) << 0 | readU8_1($receiver, o_0 + 1 | 0) << 8 | readU8_1($receiver, o_0 + 2 | 0) << 16 | readU8_1($receiver, o_0 + 3 | 0) << 24).shiftLeft(0).or(toUnsigned_0(readU8_1($receiver, o_1 + 0 | 0) << 0 | readU8_1($receiver, o_1 + 1 | 0) << 8 | readU8_1($receiver, o_1 + 2 | 0) << 16 | readU8_1($receiver, o_1 + 3 | 0) << 24).shiftLeft(32));
  }
  function _read16_be($receiver, o) {
    return readU8_1($receiver, o + 1 | 0) << 0 | readU8_1($receiver, o + 0 | 0) << 8;
  }
  function _read24_be($receiver, o) {
    return readU8_1($receiver, o + 2 | 0) << 0 | readU8_1($receiver, o + 1 | 0) << 8 | readU8_1($receiver, o + 0 | 0) << 16;
  }
  function _read32_be($receiver, o) {
    return readU8_1($receiver, o + 3 | 0) << 0 | readU8_1($receiver, o + 2 | 0) << 8 | readU8_1($receiver, o + 1 | 0) << 16 | readU8_1($receiver, o + 0 | 0) << 24;
  }
  function _read64_be($receiver, o) {
    var o_0 = o + 4 | 0;
    var o_1 = o + 0 | 0;
    return toUnsigned_0(readU8_1($receiver, o_0 + 3 | 0) << 0 | readU8_1($receiver, o_0 + 2 | 0) << 8 | readU8_1($receiver, o_0 + 1 | 0) << 16 | readU8_1($receiver, o_0 + 0 | 0) << 24).shiftLeft(0).or(toUnsigned_0(readU8_1($receiver, o_1 + 3 | 0) << 0 | readU8_1($receiver, o_1 + 2 | 0) << 8 | readU8_1($receiver, o_1 + 1 | 0) << 16 | readU8_1($receiver, o_1 + 0 | 0) << 24).shiftLeft(32));
  }
  function readU8_1($receiver, o) {
    return $receiver[o] & 255;
  }
  function readU16_le_1($receiver, o) {
    return readU8_1($receiver, o + 0 | 0) << 0 | readU8_1($receiver, o + 1 | 0) << 8;
  }
  function readU24_le_1($receiver, o) {
    return readU8_1($receiver, o + 0 | 0) << 0 | readU8_1($receiver, o + 1 | 0) << 8 | readU8_1($receiver, o + 2 | 0) << 16;
  }
  function readU32_le_1($receiver, o) {
    return toUnsigned_0(readU8_1($receiver, o + 0 | 0) << 0 | readU8_1($receiver, o + 1 | 0) << 8 | readU8_1($receiver, o + 2 | 0) << 16 | readU8_1($receiver, o + 3 | 0) << 24);
  }
  function readU16_be_1($receiver, o) {
    return readU8_1($receiver, o + 1 | 0) << 0 | readU8_1($receiver, o + 0 | 0) << 8;
  }
  function readU24_be_1($receiver, o) {
    return readU8_1($receiver, o + 2 | 0) << 0 | readU8_1($receiver, o + 1 | 0) << 8 | readU8_1($receiver, o + 0 | 0) << 16;
  }
  function readU32_be_1($receiver, o) {
    return toUnsigned_0(readU8_1($receiver, o + 3 | 0) << 0 | readU8_1($receiver, o + 2 | 0) << 8 | readU8_1($receiver, o + 1 | 0) << 16 | readU8_1($receiver, o + 0 | 0) << 24);
  }
  function readS8_1($receiver, o) {
    return $receiver[o];
  }
  function readS16_le_1($receiver, o) {
    return signExtend(readU8_1($receiver, o + 0 | 0) << 0 | readU8_1($receiver, o + 1 | 0) << 8, 16);
  }
  function readS24_le_1($receiver, o) {
    return signExtend(readU8_1($receiver, o + 0 | 0) << 0 | readU8_1($receiver, o + 1 | 0) << 8 | readU8_1($receiver, o + 2 | 0) << 16, 24);
  }
  function readS32_le_1($receiver, o) {
    return readU8_1($receiver, o + 0 | 0) << 0 | readU8_1($receiver, o + 1 | 0) << 8 | readU8_1($receiver, o + 2 | 0) << 16 | readU8_1($receiver, o + 3 | 0) << 24;
  }
  function readS64_le_1($receiver, o) {
    var o_0 = o + 0 | 0;
    var o_1 = o + 4 | 0;
    return toUnsigned_0(readU8_1($receiver, o_0 + 0 | 0) << 0 | readU8_1($receiver, o_0 + 1 | 0) << 8 | readU8_1($receiver, o_0 + 2 | 0) << 16 | readU8_1($receiver, o_0 + 3 | 0) << 24).shiftLeft(0).or(toUnsigned_0(readU8_1($receiver, o_1 + 0 | 0) << 0 | readU8_1($receiver, o_1 + 1 | 0) << 8 | readU8_1($receiver, o_1 + 2 | 0) << 16 | readU8_1($receiver, o_1 + 3 | 0) << 24).shiftLeft(32));
  }
  function readF32_le_1($receiver, o) {
    return reinterpretAsFloat(readU8_1($receiver, o + 0 | 0) << 0 | readU8_1($receiver, o + 1 | 0) << 8 | readU8_1($receiver, o + 2 | 0) << 16 | readU8_1($receiver, o + 3 | 0) << 24);
  }
  function readF64_le_1($receiver, o) {
    var o_0 = o + 0 | 0;
    var o_1 = o + 4 | 0;
    return reinterpretAsDouble(toUnsigned_0(readU8_1($receiver, o_0 + 0 | 0) << 0 | readU8_1($receiver, o_0 + 1 | 0) << 8 | readU8_1($receiver, o_0 + 2 | 0) << 16 | readU8_1($receiver, o_0 + 3 | 0) << 24).shiftLeft(0).or(toUnsigned_0(readU8_1($receiver, o_1 + 0 | 0) << 0 | readU8_1($receiver, o_1 + 1 | 0) << 8 | readU8_1($receiver, o_1 + 2 | 0) << 16 | readU8_1($receiver, o_1 + 3 | 0) << 24).shiftLeft(32)));
  }
  function readS16_be_1($receiver, o) {
    return signExtend(readU8_1($receiver, o + 1 | 0) << 0 | readU8_1($receiver, o + 0 | 0) << 8, 16);
  }
  function readS24_be_1($receiver, o) {
    return signExtend(readU8_1($receiver, o + 2 | 0) << 0 | readU8_1($receiver, o + 1 | 0) << 8 | readU8_1($receiver, o + 0 | 0) << 16, 24);
  }
  function readS32_be_1($receiver, o) {
    return readU8_1($receiver, o + 3 | 0) << 0 | readU8_1($receiver, o + 2 | 0) << 8 | readU8_1($receiver, o + 1 | 0) << 16 | readU8_1($receiver, o + 0 | 0) << 24;
  }
  function readS64_be_1($receiver, o) {
    var o_0 = o + 4 | 0;
    var o_1 = o + 0 | 0;
    return toUnsigned_0(readU8_1($receiver, o_0 + 3 | 0) << 0 | readU8_1($receiver, o_0 + 2 | 0) << 8 | readU8_1($receiver, o_0 + 1 | 0) << 16 | readU8_1($receiver, o_0 + 0 | 0) << 24).shiftLeft(0).or(toUnsigned_0(readU8_1($receiver, o_1 + 3 | 0) << 0 | readU8_1($receiver, o_1 + 2 | 0) << 8 | readU8_1($receiver, o_1 + 1 | 0) << 16 | readU8_1($receiver, o_1 + 0 | 0) << 24).shiftLeft(32));
  }
  function readF32_be_1($receiver, o) {
    return reinterpretAsFloat(readU8_1($receiver, o + 3 | 0) << 0 | readU8_1($receiver, o + 2 | 0) << 8 | readU8_1($receiver, o + 1 | 0) << 16 | readU8_1($receiver, o + 0 | 0) << 24);
  }
  function readF64_be_1($receiver, o) {
    var o_0 = o + 4 | 0;
    var o_1 = o + 0 | 0;
    return reinterpretAsDouble(toUnsigned_0(readU8_1($receiver, o_0 + 3 | 0) << 0 | readU8_1($receiver, o_0 + 2 | 0) << 8 | readU8_1($receiver, o_0 + 1 | 0) << 16 | readU8_1($receiver, o_0 + 0 | 0) << 24).shiftLeft(0).or(toUnsigned_0(readU8_1($receiver, o_1 + 3 | 0) << 0 | readU8_1($receiver, o_1 + 2 | 0) << 8 | readU8_1($receiver, o_1 + 1 | 0) << 16 | readU8_1($receiver, o_1 + 0 | 0) << 24).shiftLeft(32)));
  }
  function readS16_LEBE($receiver, o, little) {
    return little ? readS16_le_1($receiver, o) : readS16_be_1($receiver, o);
  }
  function readS32_LEBE($receiver, o, little) {
    return little ? readS32_le_1($receiver, o) : readS32_be_1($receiver, o);
  }
  function readS64_LEBE($receiver, o, little) {
    return little ? readS64_le_1($receiver, o) : readS64_be_1($receiver, o);
  }
  function readF32_LEBE($receiver, o, little) {
    return little ? readF32_le_1($receiver, o) : readF32_be_1($receiver, o);
  }
  function readF64_LEBE($receiver, o, little) {
    return little ? readF64_le_1($receiver, o) : readF64_be_1($receiver, o);
  }
  function readTypedArray($receiver, o, count, elementSize, gen, read) {
    var array = gen();
    var pos = o;
    for (var n = 0; n < count; n++) {
      read($receiver, array, n, pos);
      pos = pos + elementSize | 0;
    }
    return array;
  }
  function readByteArray($receiver, o, count) {
    var toIndex = o + count | 0;
    return $receiver.slice(o, toIndex);
  }
  function readShortArray_le$lambda(closure$count) {
    return function () {
      return new Int16Array(closure$count);
    };
  }
  function readShortArray_le$lambda_0($receiver, array, n, pos) {
    array[n] = Kotlin.toShort(readS16_le_1($receiver, pos));
    return Unit;
  }
  function readShortArray_le_1($receiver, o, count) {
    var array = readShortArray_le$lambda(count)();
    var pos = o;
    for (var n = 0; n < count; n++) {
      readShortArray_le$lambda_0($receiver, array, n, pos);
      pos = pos + 2 | 0;
    }
    return array;
  }
  function readCharArray_le$lambda(closure$count) {
    return function () {
      return Kotlin.charArray(closure$count);
    };
  }
  function readCharArray_le$lambda_0($receiver, array, n, pos) {
    array[n] = Kotlin.toChar(readS16_le_1($receiver, pos));
    return Unit;
  }
  function readCharArray_le_1($receiver, o, count) {
    var array = readCharArray_le$lambda(count)();
    var pos = o;
    for (var n = 0; n < count; n++) {
      readCharArray_le$lambda_0($receiver, array, n, pos);
      pos = pos + 2 | 0;
    }
    return array;
  }
  function readIntArray_le$lambda(closure$count) {
    return function () {
      return new Int32Array(closure$count);
    };
  }
  function readIntArray_le$lambda_0($receiver, array, n, pos) {
    array[n] = readS32_le_1($receiver, pos);
    return Unit;
  }
  function readIntArray_le_1($receiver, o, count) {
    var array = readIntArray_le$lambda(count)();
    var pos = o;
    for (var n = 0; n < count; n++) {
      readIntArray_le$lambda_0($receiver, array, n, pos);
      pos = pos + 4 | 0;
    }
    return array;
  }
  function readLongArray_le$lambda(closure$count) {
    return function () {
      return Kotlin.longArray(closure$count);
    };
  }
  function readLongArray_le$lambda_0($receiver, array, n, pos) {
    array[n] = readS64_le_1($receiver, pos);
    return Unit;
  }
  function readLongArray_le_1($receiver, o, count) {
    var array = readLongArray_le$lambda(count)();
    var pos = o;
    for (var n = 0; n < count; n++) {
      readLongArray_le$lambda_0($receiver, array, n, pos);
      pos = pos + 8 | 0;
    }
    return array;
  }
  function readFloatArray_le$lambda(closure$count) {
    return function () {
      return new Float32Array(closure$count);
    };
  }
  function readFloatArray_le$lambda_0($receiver, array, n, pos) {
    array[n] = readF32_le_1($receiver, pos);
    return Unit;
  }
  function readFloatArray_le_1($receiver, o, count) {
    var array = readFloatArray_le$lambda(count)();
    var pos = o;
    for (var n = 0; n < count; n++) {
      readFloatArray_le$lambda_0($receiver, array, n, pos);
      pos = pos + 4 | 0;
    }
    return array;
  }
  function readDoubleArray_le$lambda(closure$count) {
    return function () {
      return new Float64Array(closure$count);
    };
  }
  function readDoubleArray_le$lambda_0($receiver, array, n, pos) {
    array[n] = readF64_le_1($receiver, pos);
    return Unit;
  }
  function readDoubleArray_le_1($receiver, o, count) {
    var array = readDoubleArray_le$lambda(count)();
    var pos = o;
    for (var n = 0; n < count; n++) {
      readDoubleArray_le$lambda_0($receiver, array, n, pos);
      pos = pos + 8 | 0;
    }
    return array;
  }
  function readShortArray_be$lambda(closure$count) {
    return function () {
      return new Int16Array(closure$count);
    };
  }
  function readShortArray_be$lambda_0($receiver, array, n, pos) {
    array[n] = Kotlin.toShort(readS16_be_1($receiver, pos));
    return Unit;
  }
  function readShortArray_be_1($receiver, o, count) {
    var array = readShortArray_be$lambda(count)();
    var pos = o;
    for (var n = 0; n < count; n++) {
      readShortArray_be$lambda_0($receiver, array, n, pos);
      pos = pos + 2 | 0;
    }
    return array;
  }
  function readCharArray_be$lambda(closure$count) {
    return function () {
      return Kotlin.charArray(closure$count);
    };
  }
  function readCharArray_be$lambda_0($receiver, array, n, pos) {
    array[n] = Kotlin.toChar(readS16_be_1($receiver, pos));
    return Unit;
  }
  function readCharArray_be_1($receiver, o, count) {
    var array = readCharArray_be$lambda(count)();
    var pos = o;
    for (var n = 0; n < count; n++) {
      readCharArray_be$lambda_0($receiver, array, n, pos);
      pos = pos + 2 | 0;
    }
    return array;
  }
  function readIntArray_be$lambda(closure$count) {
    return function () {
      return new Int32Array(closure$count);
    };
  }
  function readIntArray_be$lambda_0($receiver, array, n, pos) {
    array[n] = readS32_be_1($receiver, pos);
    return Unit;
  }
  function readIntArray_be_1($receiver, o, count) {
    var array = readIntArray_be$lambda(count)();
    var pos = o;
    for (var n = 0; n < count; n++) {
      readIntArray_be$lambda_0($receiver, array, n, pos);
      pos = pos + 4 | 0;
    }
    return array;
  }
  function readLongArray_be$lambda(closure$count) {
    return function () {
      return Kotlin.longArray(closure$count);
    };
  }
  function readLongArray_be$lambda_0($receiver, array, n, pos) {
    array[n] = readS64_be_1($receiver, pos);
    return Unit;
  }
  function readLongArray_be_1($receiver, o, count) {
    var array = readLongArray_be$lambda(count)();
    var pos = o;
    for (var n = 0; n < count; n++) {
      readLongArray_be$lambda_0($receiver, array, n, pos);
      pos = pos + 8 | 0;
    }
    return array;
  }
  function readFloatArray_be$lambda(closure$count) {
    return function () {
      return new Float32Array(closure$count);
    };
  }
  function readFloatArray_be$lambda_0($receiver, array, n, pos) {
    array[n] = readF32_be_1($receiver, pos);
    return Unit;
  }
  function readFloatArray_be_1($receiver, o, count) {
    var array = readFloatArray_be$lambda(count)();
    var pos = o;
    for (var n = 0; n < count; n++) {
      readFloatArray_be$lambda_0($receiver, array, n, pos);
      pos = pos + 4 | 0;
    }
    return array;
  }
  function readDoubleArray_be$lambda(closure$count) {
    return function () {
      return new Float64Array(closure$count);
    };
  }
  function readDoubleArray_be$lambda_0($receiver, array, n, pos) {
    array[n] = readF64_be_1($receiver, pos);
    return Unit;
  }
  function readDoubleArray_be_1($receiver, o, count) {
    var array = readDoubleArray_be$lambda(count)();
    var pos = o;
    for (var n = 0; n < count; n++) {
      readDoubleArray_be$lambda_0($receiver, array, n, pos);
      pos = pos + 8 | 0;
    }
    return array;
  }
  function readStringz_3($receiver, o, size, charset) {
    if (charset === void 0)
      charset = Charsets_getInstance().UTF_8;
    var idx = o;
    var b = o + size | 0;
    var stop = Math_0.min($receiver.length, b);
    while (idx < stop && $receiver[idx] !== Kotlin.toByte(0)) {
      idx = idx + 1 | 0;
    }
    var toIndex = idx;
    return toString($receiver.slice(o, toIndex), charset);
  }
  function readStringz_4($receiver, o, charset) {
    if (charset === void 0)
      charset = Charsets_getInstance().UTF_8;
    return readStringz_3($receiver, o, $receiver.length - o | 0, charset);
  }
  function readString_1($receiver, o, size, charset) {
    if (charset === void 0)
      charset = Charsets_getInstance().UTF_8;
    var toIndex = o + size | 0;
    return toString($receiver.slice(o, toIndex), charset);
  }
  function RedirectField(redirect) {
    this.redirect = redirect;
  }
  RedirectField.prototype.getValue_t0xcdd$ = defineInlineFunction('korio-js.com.soywiz.korio.util.RedirectField.getValue_t0xcdd$', function (thisRef, property) {
    return this.redirect.get();
  });
  RedirectField.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'RedirectField',
    interfaces: []
  };
  function RedirectMutableField(redirect) {
    this.redirect = redirect;
  }
  RedirectMutableField.prototype.getValue_t0xcdd$ = defineInlineFunction('korio-js.com.soywiz.korio.util.RedirectMutableField.getValue_t0xcdd$', function (thisRef, property) {
    return this.redirect.get();
  });
  RedirectMutableField.prototype.setValue_cvomos$ = defineInlineFunction('korio-js.com.soywiz.korio.util.RedirectMutableField.setValue_cvomos$', function (thisRef, property, value) {
    this.redirect.set(value);
  });
  RedirectMutableField.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'RedirectMutableField',
    interfaces: []
  };
  function RedirectMutableFieldGen(redirect) {
    this.redirect = redirect;
  }
  RedirectMutableFieldGen.prototype.getValue_t0xcdd$ = defineInlineFunction('korio-js.com.soywiz.korio.util.RedirectMutableFieldGen.getValue_t0xcdd$', function (thisRef, property) {
    return this.redirect().get();
  });
  RedirectMutableFieldGen.prototype.setValue_cvomos$ = defineInlineFunction('korio-js.com.soywiz.korio.util.RedirectMutableFieldGen.setValue_cvomos$', function (thisRef, property, value) {
    this.redirect().set(value);
  });
  RedirectMutableFieldGen.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'RedirectMutableFieldGen',
    interfaces: []
  };
  var redirectField = defineInlineFunction('korio-js.com.soywiz.korio.util.redirectField_ky7ay8$', wrapFunction(function () {
    var RedirectMutableFieldGen_init = _.com.soywiz.korio.util.RedirectMutableFieldGen;
    return function (redirect) {
      return new RedirectMutableFieldGen_init(redirect);
    };
  }));
  var redirectField_0 = defineInlineFunction('korio-js.com.soywiz.korio.util.redirectField_w7kr7o$', wrapFunction(function () {
    var RedirectMutableField_init = _.com.soywiz.korio.util.RedirectMutableField;
    return function (redirect) {
      return new RedirectMutableField_init(redirect);
    };
  }));
  var redirectField_1 = defineInlineFunction('korio-js.com.soywiz.korio.util.redirectField_7kt5xd$', wrapFunction(function () {
    var RedirectField_init = _.com.soywiz.korio.util.RedirectField;
    return function (redirect) {
      return new RedirectField_init(redirect);
    };
  }));
  var redirect = defineInlineFunction('korio-js.com.soywiz.korio.util.redirect_58ahrt$', wrapFunction(function () {
    var RedirectMutableField_init = _.com.soywiz.korio.util.RedirectMutableField;
    return function ($receiver) {
      return new RedirectMutableField_init($receiver);
    };
  }));
  var redirect_0 = defineInlineFunction('korio-js.com.soywiz.korio.util.redirect_myrrmk$', wrapFunction(function () {
    var RedirectField_init = _.com.soywiz.korio.util.RedirectField;
    return function ($receiver) {
      return new RedirectField_init($receiver);
    };
  }));
  function OS() {
    OS_instance = this;
    this.name = SOS_getInstance().name;
    this.isWindows_s5ip4f$_0 = lazy(OS$isWindows$lambda(this));
    this.isUnix_3kyjmu$_0 = lazy(OS$isUnix$lambda(this));
    this.isLinux_qoet0e$_0 = lazy(OS$isLinux$lambda(this));
    this.isMac_rm5qql$_0 = lazy(OS$isMac$lambda(this));
    this.isJs_wyw9dz$_0 = lazy(OS$isJs$lambda(this));
    this.isNodejs_6oo7qv$_0 = lazy(OS$isNodejs$lambda(this));
  }
  Object.defineProperty(OS.prototype, 'isWindows', {
    get: function () {
      var $receiver = this.isWindows_s5ip4f$_0;
      new Kotlin.PropertyMetadata('isWindows');
      return $receiver.value;
    }
  });
  Object.defineProperty(OS.prototype, 'isUnix', {
    get: function () {
      var $receiver = this.isUnix_3kyjmu$_0;
      new Kotlin.PropertyMetadata('isUnix');
      return $receiver.value;
    }
  });
  Object.defineProperty(OS.prototype, 'isLinux', {
    get: function () {
      var $receiver = this.isLinux_qoet0e$_0;
      new Kotlin.PropertyMetadata('isLinux');
      return $receiver.value;
    }
  });
  Object.defineProperty(OS.prototype, 'isMac', {
    get: function () {
      var $receiver = this.isMac_rm5qql$_0;
      new Kotlin.PropertyMetadata('isMac');
      return $receiver.value;
    }
  });
  Object.defineProperty(OS.prototype, 'isJs', {
    get: function () {
      var $receiver = this.isJs_wyw9dz$_0;
      new Kotlin.PropertyMetadata('isJs');
      return $receiver.value;
    }
  });
  Object.defineProperty(OS.prototype, 'isNodejs', {
    get: function () {
      var $receiver = this.isNodejs_6oo7qv$_0;
      new Kotlin.PropertyMetadata('isNodejs');
      return $receiver.value;
    }
  });
  Object.defineProperty(OS.prototype, 'isBrowserJs', {
    get: function () {
      return this.isJs && !this.isNodejs;
    }
  });
  function OS$isWindows$lambda(this$OS) {
    return function () {
      return contains(this$OS.name, 'win');
    };
  }
  function OS$isUnix$lambda(this$OS) {
    return function () {
      return !this$OS.isWindows;
    };
  }
  function OS$isLinux$lambda(this$OS) {
    return function () {
      return contains(this$OS.name, 'nix') || contains(this$OS.name, 'nux') || contains(this$OS.name, 'aix');
    };
  }
  function OS$isMac$lambda(this$OS) {
    return function () {
      return contains(this$OS.name, 'mac');
    };
  }
  function OS$isJs$lambda(this$OS) {
    return function () {
      return contains(this$OS.name, 'js');
    };
  }
  function OS$isNodejs$lambda(this$OS) {
    return function () {
      return contains(this$OS.name, 'node.js');
    };
  }
  OS.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'OS',
    interfaces: []
  };
  var OS_instance = null;
  function OS_getInstance() {
    if (OS_instance === null) {
      new OS();
    }
    return OS_instance;
  }
  function StrReader(str, file, pos) {
    StrReader$Companion_getInstance();
    if (file === void 0)
      file = 'file';
    if (pos === void 0)
      pos = 0;
    this.str = str;
    this.file = file;
    this.pos = pos;
    this.length = this.str.length;
  }
  function StrReader$Companion() {
    StrReader$Companion_instance = this;
  }
  StrReader$Companion.prototype.literals_vqirvp$ = function (lits) {
    return StrReader$Literals$Companion_getInstance().fromList_kand9s$(copyToArray(toList_0(lits)));
  };
  StrReader$Companion.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var StrReader$Companion_instance = null;
  function StrReader$Companion_getInstance() {
    if (StrReader$Companion_instance === null) {
      new StrReader$Companion();
    }
    return StrReader$Companion_instance;
  }
  Object.defineProperty(StrReader.prototype, 'eof', {
    get: function () {
      return this.pos >= this.str.length;
    }
  });
  Object.defineProperty(StrReader.prototype, 'hasMore', {
    get: function () {
      return this.pos < this.str.length;
    }
  });
  StrReader.prototype.reset = function () {
    this.pos = 0;
  };
  StrReader.prototype.createRange_n8acyv$ = function (range) {
    return this.createRange_vux9f0$(range.start, range.endInclusive + 1 | 0);
  };
  StrReader.prototype.createRange_vux9f0$ = function (start, end) {
    if (start === void 0)
      start = this.pos;
    if (end === void 0)
      end = this.pos;
    return new StrReader$TRange(start, end, this);
  };
  StrReader.prototype.readRange_za3lpa$ = function (length) {
    var range = new StrReader$TRange(this.pos, this.pos + length | 0, this);
    this.pos = this.pos + length | 0;
    return range;
  };
  StrReader.prototype.slice_o14v8n$ = defineInlineFunction('korio-js.com.soywiz.korio.util.StrReader.slice_o14v8n$', function (action) {
    var start = this.pos;
    action();
    var end = this.pos;
    return end > start ? this.slice_vux9f0$(start, end) : null;
  });
  StrReader.prototype.slice_vux9f0$ = function (start, end) {
    return this.str.substring(start, end);
  };
  StrReader.prototype.peek_za3lpa$ = function (count) {
    return this.substr_0(this.pos, count);
  };
  StrReader.prototype.peek = function () {
    return unboxChar(this.hasMore ? this.str.charCodeAt(this.pos) : 0);
  };
  StrReader.prototype.peekChar = function () {
    return unboxChar(this.hasMore ? this.str.charCodeAt(this.pos) : 0);
  };
  StrReader.prototype.read_za3lpa$ = function (count) {
    var $receiver = this.peek_za3lpa$(count);
    this.skip_za3lpa$(count);
    return $receiver;
  };
  StrReader.prototype.skipUntil_s8itvh$ = function (char) {
    while (this.hasMore && this.peekChar() !== char)
      this.readChar();
  };
  StrReader.prototype.skipUntilIncluded_s8itvh$ = function (char) {
    while (this.hasMore && this.readChar() !== char) {
    }
  };
  StrReader.prototype.skipWhile_akknk2$ = defineInlineFunction('korio-js.com.soywiz.korio.util.StrReader.skipWhile_akknk2$', wrapFunction(function () {
    var toBoxedChar = Kotlin.toBoxedChar;
    return function (filter) {
      while (this.hasMore && filter(toBoxedChar(this.peekChar())))
        this.readChar();
    };
  }));
  StrReader.prototype.skipUntil_akknk2$ = defineInlineFunction('korio-js.com.soywiz.korio.util.StrReader.skipUntil_akknk2$', wrapFunction(function () {
    var toBoxedChar = Kotlin.toBoxedChar;
    return function (filter) {
      while (this.hasMore && !filter(toBoxedChar(this.peekChar())))
        this.readChar();
    };
  }));
  StrReader.prototype.matchWhile_akknk2$ = defineInlineFunction('korio-js.com.soywiz.korio.util.StrReader.matchWhile_akknk2$', wrapFunction(function () {
    var Unit = Kotlin.kotlin.Unit;
    var wrapFunction = Kotlin.wrapFunction;
    var StrReader$matchWhile$lambda = wrapFunction(function () {
      var toBoxedChar = Kotlin.toBoxedChar;
      return function (closure$check, this$StrReader) {
        return function () {
          var $this = this$StrReader;
          var filter = closure$check;
          while ($this.hasMore && filter(toBoxedChar($this.peekChar())))
            $this.readChar();
          return Unit;
        };
      };
    });
    var toBoxedChar = Kotlin.toBoxedChar;
    return function (check) {
      var start = this.pos;
      while (this.hasMore && check(toBoxedChar(this.peekChar())))
        this.readChar();
      var end = this.pos;
      return end > start ? this.slice_vux9f0$(start, end) : null;
    };
  }));
  StrReader.prototype.readUntil_s8itvh$ = function (char) {
    var start = this.pos;
    this.skipUntil_s8itvh$(char);
    var end = this.pos;
    return end > start ? this.slice_vux9f0$(start, end) : null;
  };
  StrReader.prototype.readUntilIncluded_s8itvh$ = function (char) {
    var start = this.pos;
    this.skipUntilIncluded_s8itvh$(char);
    var end = this.pos;
    return end > start ? this.slice_vux9f0$(start, end) : null;
  };
  StrReader.prototype.readWhile_akknk2$ = defineInlineFunction('korio-js.com.soywiz.korio.util.StrReader.readWhile_akknk2$', wrapFunction(function () {
    var Unit = Kotlin.kotlin.Unit;
    var wrapFunction = Kotlin.wrapFunction;
    var StrReader$readWhile$lambda = wrapFunction(function () {
      var toBoxedChar = Kotlin.toBoxedChar;
      return function (closure$filter, this$StrReader) {
        return function () {
          var $this = this$StrReader;
          var filter = closure$filter;
          while ($this.hasMore && filter(toBoxedChar($this.peekChar())))
            $this.readChar();
          return Unit;
        };
      };
    });
    var toBoxedChar = Kotlin.toBoxedChar;
    return function (filter) {
      var tmp$;
      var start = this.pos;
      while (this.hasMore && filter(toBoxedChar(this.peekChar())))
        this.readChar();
      var end = this.pos;
      return (tmp$ = end > start ? this.slice_vux9f0$(start, end) : null) != null ? tmp$ : '';
    };
  }));
  StrReader.prototype.readUntil_akknk2$ = defineInlineFunction('korio-js.com.soywiz.korio.util.StrReader.readUntil_akknk2$', wrapFunction(function () {
    var Unit = Kotlin.kotlin.Unit;
    var wrapFunction = Kotlin.wrapFunction;
    var StrReader$readUntil$lambda = wrapFunction(function () {
      var toBoxedChar = Kotlin.toBoxedChar;
      return function (closure$filter, this$StrReader) {
        return function () {
          var $this = this$StrReader;
          var filter = closure$filter;
          while ($this.hasMore && !filter(toBoxedChar($this.peekChar())))
            $this.readChar();
          return Unit;
        };
      };
    });
    var toBoxedChar = Kotlin.toBoxedChar;
    return function (filter) {
      var tmp$;
      var start = this.pos;
      while (this.hasMore && !filter(toBoxedChar(this.peekChar())))
        this.readChar();
      var end = this.pos;
      return (tmp$ = end > start ? this.slice_vux9f0$(start, end) : null) != null ? tmp$ : '';
    };
  }));
  StrReader.prototype.unread_za3lpa$ = function (count) {
    if (count === void 0)
      count = 1;
    this.pos = this.pos - count | 0;
    return this;
  };
  StrReader.prototype.readChar = function () {
    var tmp$;
    if (this.hasMore) {
      return this.str.charCodeAt((tmp$ = this.pos, this.pos = tmp$ + 1 | 0, tmp$));
    }
     else
      return 0;
  };
  StrReader.prototype.read = function () {
    var tmp$;
    if (this.hasMore) {
      return this.str.charCodeAt((tmp$ = this.pos, this.pos = tmp$ + 1 | 0, tmp$));
    }
     else
      return 0;
  };
  StrReader.prototype.readExpect_61zpoe$ = function (expected) {
    var readed = this.read_za3lpa$(expected.length);
    if (!Kotlin.equals(readed, expected))
      throw new IllegalArgumentException("Expected '" + expected + "' but found '" + readed + "' at " + this.pos);
    return readed;
  };
  StrReader.prototype.expect_s8itvh$ = function (expected) {
    return this.readExpect_61zpoe$(String.fromCharCode(expected));
  };
  StrReader.prototype.skip_za3lpa$ = function (count) {
    if (count === void 0)
      count = 1;
    this.pos = this.pos + count | 0;
    return this;
  };
  StrReader.prototype.substr_0 = function (pos, length) {
    var tmp$ = this.str;
    var b = this.length;
    var tmp$_0 = Math_0.min(pos, b);
    var a = pos + length | 0;
    var b_0 = this.length;
    var endIndex = Math_0.min(a, b_0);
    return tmp$.substring(tmp$_0, endIndex);
  };
  StrReader.prototype.matchLit_61zpoe$ = function (lit) {
    if (!Kotlin.equals(this.substr_0(this.pos, lit.length), lit))
      return null;
    this.pos = this.pos + lit.length | 0;
    return lit;
  };
  StrReader.prototype.matchLitRange_61zpoe$ = function (lit) {
    return Kotlin.equals(this.substr_0(this.pos, lit.length), lit) ? this.readRange_za3lpa$(lit.length) : null;
  };
  StrReader.prototype.matchLitListRange_ir5yrq$ = function (lits) {
    var tmp$, tmp$_0;
    tmp$ = lits.lengths;
    for (tmp$_0 = 0; tmp$_0 !== tmp$.length; ++tmp$_0) {
      var len = tmp$[tmp$_0];
      if (lits.contains_61zpoe$(this.substr_0(this.pos, len)))
        return this.readRange_za3lpa$(len);
    }
    return null;
  };
  StrReader.prototype.skipSpaces = function () {
    while (true) {
      var tmp$ = this.hasMore;
      if (tmp$) {
        tmp$ = isWhitespace(unboxChar(toBoxedChar(this.peekChar())));
      }
      if (!tmp$)
        break;
      this.readChar();
    }
    return this;
  };
  var StrReader$matchWhile$lambda = wrapFunction(function () {
    var toBoxedChar = Kotlin.toBoxedChar;
    return function (closure$check, this$StrReader) {
      return function () {
        var $this = this$StrReader;
        var filter = closure$check;
        while ($this.hasMore && filter(toBoxedChar($this.peekChar())))
          $this.readChar();
        return Unit;
      };
    };
  });
  StrReader.prototype.matchIdentifier = function () {
    var start = this.pos;
    while (true) {
      var tmp$ = this.hasMore;
      if (tmp$) {
        var it = toBoxedChar(this.peekChar());
        tmp$ = isLetterDigitOrUnderscore(unboxChar(it)) || unboxChar(it) === 45 || unboxChar(it) === 126 || unboxChar(it) === 58;
      }
      if (!tmp$)
        break;
      this.readChar();
    }
    var end = this.pos;
    return end > start ? this.slice_vux9f0$(start, end) : null;
  };
  StrReader.prototype.matchSingleOrDoubleQuoteString = function () {
    var tmp$;
    tmp$ = this.peekChar();
    if (tmp$ === 39 || tmp$ === 34) {
      var start = this.pos;
      var quoteType = this.readChar();
      this.readUntil_s8itvh$(quoteType);
      this.readChar();
      var end = this.pos;
      return end > start ? this.slice_vux9f0$(start, end) : null;
    }
     else
      return null;
  };
  StrReader.prototype.matchStartEnd_puj7f4$ = function (start, end) {
    if (!Kotlin.equals(this.substr_0(this.pos, start.length), start))
      return null;
    var startIndex = this.pos;
    var index = indexOf_0(this.str, end, this.pos);
    if (index < 0)
      return null;
    this.pos = index + end.length | 0;
    return this.slice_vux9f0$(startIndex, this.pos);
  };
  StrReader.prototype.clone = function () {
    return new StrReader(this.str, this.file, this.pos);
  };
  StrReader.prototype.tryRead_61zpoe$ = function (str) {
    if (Kotlin.equals(this.peek_za3lpa$(str.length), str)) {
      this.skip_za3lpa$(str.length);
      return true;
    }
    return false;
  };
  function StrReader$Literals(lits, map, lengths) {
    StrReader$Literals$Companion_getInstance();
    this.lits_0 = lits;
    this.map_0 = map;
    this.lengths = lengths;
  }
  function StrReader$Literals$Companion() {
    StrReader$Literals$Companion_instance = this;
  }
  StrReader$Literals$Companion.prototype.invoke_vqirvp$ = function (lits) {
    return this.fromList_kand9s$.call(this, copyToArray(toCollection(lits, ArrayList_init())));
  };
  StrReader$Literals$Companion.prototype.fromList_kand9s$ = function (lits) {
    var tmp$;
    var destination = ArrayList_init(lits.length);
    var tmp$_0;
    for (tmp$_0 = 0; tmp$_0 !== lits.length; ++tmp$_0) {
      var item = lits[tmp$_0];
      destination.add_11rb$(item.length);
    }
    var lengths = copyToArray(distinct(reversed(sorted(destination))));
    var map = lmapOf([]);
    for (tmp$ = 0; tmp$ !== lits.length; ++tmp$) {
      var lit = lits[tmp$];
      map.put_xwzc9p$(lit, true);
    }
    return new StrReader$Literals(lits, map, lengths);
  };
  StrReader$Literals$Companion.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var StrReader$Literals$Companion_instance = null;
  function StrReader$Literals$Companion_getInstance() {
    if (StrReader$Literals$Companion_instance === null) {
      new StrReader$Literals$Companion();
    }
    return StrReader$Literals$Companion_instance;
  }
  StrReader$Literals.prototype.contains_61zpoe$ = function (lit) {
    return this.map_0.containsKey_11rb$(lit);
  };
  StrReader$Literals.prototype.matchAt_bm4lxs$ = function (str, offset) {
    var tmp$, tmp$_0;
    tmp$ = this.lengths;
    for (tmp$_0 = 0; tmp$_0 !== tmp$.length; ++tmp$_0) {
      var len = tmp$[tmp$_0];
      var id = substr_0(str, offset, len);
      if (this.contains_61zpoe$(id))
        return id;
    }
    return null;
  };
  StrReader$Literals.prototype.toString = function () {
    return 'Literals(' + joinToString_0(this.lits_0, ' ') + ')';
  };
  StrReader$Literals.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'Literals',
    interfaces: []
  };
  function StrReader$TRange(min, max, reader) {
    StrReader$TRange$Companion_getInstance();
    this.min = min;
    this.max = max;
    this.reader = reader;
  }
  function StrReader$TRange$Companion() {
    StrReader$TRange$Companion_instance = this;
  }
  StrReader$TRange$Companion.prototype.combine_vw4zp0$ = function (a, b) {
    var a_0 = a.min;
    var b_0 = b.min;
    var tmp$ = Math_0.min(a_0, b_0);
    var a_1 = a.max;
    var b_1 = b.max;
    return new StrReader$TRange(tmp$, Math_0.max(a_1, b_1), a.reader);
  };
  StrReader$TRange$Companion.prototype.combineList_hbyypg$ = function (list) {
    var tmp$;
    if (list.isEmpty())
      return null;
    var first = list.get_za3lpa$(0);
    var min = first.min;
    var max = first.max;
    tmp$ = list.iterator();
    while (tmp$.hasNext()) {
      var i = tmp$.next();
      var a = min;
      var b = i.min;
      min = Math_0.min(a, b);
      var a_0 = max;
      var b_0 = i.max;
      max = Math_0.max(a_0, b_0);
    }
    return new StrReader$TRange(min, max, first.reader);
  };
  StrReader$TRange$Companion.prototype.createDummy = function () {
    return new StrReader$TRange(0, 0, new StrReader(''));
  };
  StrReader$TRange$Companion.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var StrReader$TRange$Companion_instance = null;
  function StrReader$TRange$Companion_getInstance() {
    if (StrReader$TRange$Companion_instance === null) {
      new StrReader$TRange$Companion();
    }
    return StrReader$TRange$Companion_instance;
  }
  StrReader$TRange.prototype.contains_za3lpa$ = function (index) {
    return index >= this.min && index <= this.max;
  };
  StrReader$TRange.prototype.toString = function () {
    return this.min.toString() + ':' + this.max;
  };
  Object.defineProperty(StrReader$TRange.prototype, 'file', {
    get: function () {
      return this.reader.file;
    }
  });
  Object.defineProperty(StrReader$TRange.prototype, 'text', {
    get: function () {
      return this.reader.slice_vux9f0$(this.min, this.max);
    }
  });
  StrReader$TRange.prototype.startEmptyRange = function () {
    return new StrReader$TRange(this.min, this.min, this.reader);
  };
  StrReader$TRange.prototype.endEmptyRange = function () {
    return new StrReader$TRange(this.max, this.max, this.reader);
  };
  StrReader$TRange.prototype.displace_za3lpa$ = function (offset) {
    return new StrReader$TRange(this.min + offset | 0, this.max + offset | 0, this.reader);
  };
  StrReader$TRange.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'TRange',
    interfaces: []
  };
  StrReader.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'StrReader',
    interfaces: []
  };
  function readStringLit($receiver, reportErrors) {
    if (reportErrors === void 0)
      reportErrors = true;
    var tmp$;
    var out = new StringBuilder();
    var quotec = $receiver.read();
    if (quotec !== 34 && quotec !== 39)
      invalidOp('Invalid string literal');
    var closed = false;
    while ($receiver.hasMore) {
      var c = $receiver.read();
      if (c === 92) {
        var cc = $receiver.read();
        if (cc === 92)
          tmp$ = 92;
        else if (cc === 47)
          tmp$ = 47;
        else if (cc === 39)
          tmp$ = 39;
        else if (cc === 34)
          tmp$ = 34;
        else if (cc === 98)
          tmp$ = 8;
        else if (cc === 102)
          tmp$ = 12;
        else if (cc === 110)
          tmp$ = 10;
        else if (cc === 114)
          tmp$ = 13;
        else if (cc === 116)
          tmp$ = 9;
        else if (cc === 117)
          tmp$ = Kotlin.toChar(toInt_0($receiver.read_za3lpa$(4), 16));
        else
          tmp$ = unboxChar(Json_getInstance().invalidJson_61zpoe$("Invalid char '" + String.fromCharCode(cc) + "'"));
        out.append_s8itvh$(tmp$);
      }
       else if (c === quotec) {
        closed = true;
        break;
      }
       else {
        out.append_s8itvh$(c);
      }
    }
    if (!closed && reportErrors) {
      throw new RuntimeException("String literal not closed! '" + $receiver.str + "'");
    }
    return out.toString();
  }
  function toBytez($receiver, len, charset) {
    if (charset === void 0)
      charset = Charsets_getInstance().UTF_8;
    var out = ByteArrayBuilder_init();
    out.append_fqrh44$(toByteArray($receiver, charset));
    while (out.size < len)
      out.append_s8j3t7$(Kotlin.toByte(0));
    return out.toByteArray();
  }
  function toBytez_0($receiver, charset) {
    if (charset === void 0)
      charset = Charsets_getInstance().UTF_8;
    var out = ByteArrayBuilder_init();
    out.append_fqrh44$(toByteArray($receiver, charset));
    out.append_s8j3t7$(Kotlin.toByte(0));
    return out.toByteArray();
  }
  function indexOfOrNull($receiver, char, startIndex) {
    if (startIndex === void 0)
      startIndex = 0;
    var i = indexOf_1($receiver, char, startIndex);
    return i >= 0 ? i : null;
  }
  function lastIndexOfOrNull($receiver, char, startIndex) {
    if (startIndex === void 0)
      startIndex = get_lastIndex($receiver);
    var i = lastIndexOf($receiver, char, startIndex);
    return i >= 0 ? i : null;
  }
  function splitInChunks($receiver, size) {
    var out = ArrayList_init();
    var pos = 0;
    while (pos < $receiver.length) {
      var tmp$ = pos;
      var a = $receiver.length;
      var b = pos + size | 0;
      var endIndex = Math_0.min(a, b);
      var element = $receiver.substring(tmp$, endIndex);
      out.add_11rb$(element);
      pos = pos + size | 0;
    }
    return out;
  }
  function substr($receiver, start) {
    return substr_0($receiver, start, $receiver.length);
  }
  function substr_0($receiver, start, length) {
    var low = clamp(start >= 0 ? start : $receiver.length + start | 0, 0, $receiver.length);
    var high = clamp(length >= 0 ? low + length | 0 : $receiver.length + length | 0, 0, $receiver.length);
    if (high < low) {
      return '';
    }
     else {
      return $receiver.substring(low, high);
    }
  }
  function transform($receiver, transform) {
    var tmp$;
    var out = '';
    tmp$ = iterator($receiver);
    while (tmp$.hasNext()) {
      var ch = unboxChar(tmp$.next());
      out += transform(toBoxedChar(ch));
    }
    return out;
  }
  function toBetterString($receiver) {
    return Kotlin.toString($receiver);
  }
  function TimeProvider_0() {
    TimeProvider$Companion_getInstance();
  }
  TimeProvider_0.prototype.currentTimeMillis = function () {
    return STimeProvider_getInstance().currentTimeMillis();
  };
  function TimeProvider$Companion() {
    TimeProvider$Companion_instance = this;
  }
  function TimeProvider$Companion$invoke$ObjectLiteral(closure$callback) {
    this.closure$callback = closure$callback;
    TimeProvider_0.call(this);
  }
  TimeProvider$Companion$invoke$ObjectLiteral.prototype.currentTimeMillis = function () {
    return this.closure$callback();
  };
  TimeProvider$Companion$invoke$ObjectLiteral.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    interfaces: [TimeProvider_0]
  };
  TimeProvider$Companion.prototype.invoke_nw7ga7$ = function (callback) {
    return new TimeProvider$Companion$invoke$ObjectLiteral(callback);
  };
  TimeProvider$Companion.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var TimeProvider$Companion_instance = null;
  function TimeProvider$Companion_getInstance() {
    if (TimeProvider$Companion_instance === null) {
      new TimeProvider$Companion();
    }
    return TimeProvider$Companion_instance;
  }
  TimeProvider_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'TimeProvider',
    interfaces: []
  };
  function UByteArray(data) {
    this.data = data;
    this.size = this.data.length;
  }
  UByteArray.prototype.get_za3lpa$ = defineInlineFunction('korio-js.com.soywiz.korio.util.UByteArray.get_za3lpa$', function (n) {
    return this.data[n] & 255;
  });
  UByteArray.prototype.set_vux9f0$ = defineInlineFunction('korio-js.com.soywiz.korio.util.UByteArray.set_vux9f0$', wrapFunction(function () {
    return function (n, v) {
      this.data[n] = Kotlin.toByte(v);
    };
  }));
  UByteArray.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'UByteArray',
    interfaces: []
  };
  function UByteArray_init(size, $this) {
    $this = $this || Object.create(UByteArray.prototype);
    UByteArray.call($this, new Int8Array(size));
    return $this;
  }
  function UByteArraySlice(data, position, length) {
    UByteArraySlice$Companion_getInstance();
    this.data = data;
    this.position = position;
    this.length = length;
  }
  UByteArraySlice.prototype.getPointer = function () {
    return new Pointer(this.data, this.position);
  };
  UByteArraySlice.prototype.toString = function () {
    return 'UByteArraySlice(data=' + this.data + ', position=' + this.position + ', length=' + this.length + ')';
  };
  UByteArraySlice.prototype.get_za3lpa$ = function (n) {
    return this.data[this.position + n | 0] & 255;
  };
  UByteArraySlice.prototype.set_vux9f0$ = function (n, value) {
    this.data[this.position + n | 0] = Kotlin.toByte(value);
  };
  function UByteArraySlice$Companion() {
    UByteArraySlice$Companion_instance = this;
  }
  UByteArraySlice$Companion.prototype.create_vex5g6$ = function (start, end) {
    if (!Kotlin.equals(start.ba, end.ba))
      throw new RuntimeException('Pointer must reference the samea array');
    return new ByteArraySlice(start.ba, start.offset, end.offset - start.offset | 0);
  };
  UByteArraySlice$Companion.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var UByteArraySlice$Companion_instance = null;
  function UByteArraySlice$Companion_getInstance() {
    if (UByteArraySlice$Companion_instance === null) {
      new UByteArraySlice$Companion();
    }
    return UByteArraySlice$Companion_instance;
  }
  UByteArraySlice.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'UByteArraySlice',
    interfaces: []
  };
  function toUByteArraySlice($receiver) {
    return new UByteArraySlice($receiver, 0, $receiver.length);
  }
  function toUnsigned_1($receiver) {
    return new UByteArraySlice($receiver.data, $receiver.position, $receiver.length);
  }
  function write8_1($receiver, o, v) {
    set($receiver, o, v);
  }
  function write8_2($receiver, o, v) {
    set_0($receiver, o, v);
  }
  function write16_LEBE($receiver, o, v, little) {
    little ? write16_le_1($receiver, o, v) : write16_be_1($receiver, o, v);
  }
  function write32_LEBE($receiver, o, v, little) {
    little ? write32_le_3($receiver, o, v) : write32_be_3($receiver, o, v);
  }
  function write64_LEBE($receiver, o, v, little) {
    little ? write64_le_1($receiver, o, v) : write64_be_1($receiver, o, v);
  }
  function writeF32_LEBE($receiver, o, v, little) {
    little ? writeF32_le_1($receiver, o, v) : writeF32_be_1($receiver, o, v);
  }
  function writeF64_LEBE($receiver, o, v, little) {
    little ? writeF64_le_1($receiver, o, v) : writeF64_be_1($receiver, o, v);
  }
  function write16_le_1($receiver, o, v) {
    set($receiver, o + 0 | 0, extract8(v, 0));
    set($receiver, o + 1 | 0, extract8(v, 8));
  }
  function write24_le_1($receiver, o, v) {
    set($receiver, o + 0 | 0, extract8(v, 0));
    set($receiver, o + 1 | 0, extract8(v, 8));
    set($receiver, o + 2 | 0, extract8(v, 16));
  }
  function write32_le_3($receiver, o, v) {
    set($receiver, o + 0 | 0, extract8(v, 0));
    set($receiver, o + 1 | 0, extract8(v, 8));
    set($receiver, o + 2 | 0, extract8(v, 16));
    set($receiver, o + 3 | 0, extract8(v, 24));
  }
  function write32_le_4($receiver, o, v) {
    write32_le_3($receiver, o, v.toInt());
  }
  function write64_le_1($receiver, o, v) {
    write32_le_3($receiver, o + 0 | 0, v.shiftRightUnsigned(0).toInt());
    write32_le_3($receiver, o + 4 | 0, v.shiftRightUnsigned(32).toInt());
  }
  function writeF32_le_1($receiver, o, v) {
    write32_le_3($receiver, o + 0 | 0, reinterpretAsInt(v));
  }
  function writeF64_le_1($receiver, o, v) {
    write64_le_1($receiver, o + 0 | 0, reinterpretAsLong(v));
  }
  function write16_be_1($receiver, o, v) {
    set($receiver, o + 1 | 0, extract8(v, 0));
    set($receiver, o + 0 | 0, extract8(v, 8));
  }
  function write24_be_1($receiver, o, v) {
    set($receiver, o + 2 | 0, extract8(v, 0));
    set($receiver, o + 1 | 0, extract8(v, 8));
    set($receiver, o + 0 | 0, extract8(v, 16));
  }
  function write32_be_3($receiver, o, v) {
    set($receiver, o + 3 | 0, extract8(v, 0));
    set($receiver, o + 2 | 0, extract8(v, 8));
    set($receiver, o + 1 | 0, extract8(v, 16));
    set($receiver, o + 0 | 0, extract8(v, 24));
  }
  function write32_be_4($receiver, o, v) {
    write32_be_3($receiver, o, v.toInt());
  }
  function write64_be_1($receiver, o, v) {
    write32_le_3($receiver, o + 0 | 0, v.shiftRightUnsigned(32).toInt());
    write32_le_3($receiver, o + 4 | 0, v.shiftRightUnsigned(0).toInt());
  }
  function writeF32_be_1($receiver, o, v) {
    write32_be_3($receiver, o + 0 | 0, reinterpretAsInt(v));
  }
  function writeF64_be_1($receiver, o, v) {
    write64_be_1($receiver, o + 0 | 0, reinterpretAsLong(v));
  }
  function writeBytes_3($receiver, o, bytes) {
    copyRangeTo_1(bytes, 0, $receiver, o, bytes.length);
  }
  function writeBytes_4($receiver, o, bytes) {
    copyRangeTo_1(bytes.data, 0, $receiver, o, bytes.size);
  }
  function writeTypedArray(o, elementSize, indices, write) {
    var tmp$, tmp$_0, tmp$_1;
    var p = o;
    tmp$ = indices.first;
    tmp$_0 = indices.last;
    tmp$_1 = indices.step;
    for (var n = tmp$; n <= tmp$_0; n += tmp$_1) {
      write(p, n);
      p = p + elementSize | 0;
    }
  }
  function writeArray_le($receiver, o, array) {
    var indices = get_indices_0(array);
    var tmp$, tmp$_0, tmp$_1;
    var p = o;
    tmp$ = indices.first;
    tmp$_0 = indices.last;
    tmp$_1 = indices.step;
    for (var n = tmp$; n <= tmp$_0; n += tmp$_1) {
      write16_le_1($receiver, p, array[n] | 0);
      p = p + 2 | 0;
    }
  }
  function writeArray_le_0($receiver, o, array) {
    var indices = get_indices_1(array);
    var tmp$, tmp$_0, tmp$_1;
    var p = o;
    tmp$ = indices.first;
    tmp$_0 = indices.last;
    tmp$_1 = indices.step;
    for (var n = tmp$; n <= tmp$_0; n += tmp$_1) {
      write16_le_1($receiver, p, array[n]);
      p = p + 2 | 0;
    }
  }
  function writeArray_le_1($receiver, o, array) {
    var indices = get_indices_2(array);
    var tmp$, tmp$_0, tmp$_1;
    var p = o;
    tmp$ = indices.first;
    tmp$_0 = indices.last;
    tmp$_1 = indices.step;
    for (var n = tmp$; n <= tmp$_0; n += tmp$_1) {
      write32_le_3($receiver, p, array[n]);
      p = p + 4 | 0;
    }
  }
  function writeArray_le_2($receiver, o, array) {
    var indices = get_indices_3(array);
    var tmp$, tmp$_0, tmp$_1;
    var p = o;
    tmp$ = indices.first;
    tmp$_0 = indices.last;
    tmp$_1 = indices.step;
    for (var n = tmp$; n <= tmp$_0; n += tmp$_1) {
      write64_le_1($receiver, p, array[n]);
      p = p + 8 | 0;
    }
  }
  function writeArray_le_3($receiver, o, array) {
    var indices = get_indices_4(array);
    var tmp$, tmp$_0, tmp$_1;
    var p = o;
    tmp$ = indices.first;
    tmp$_0 = indices.last;
    tmp$_1 = indices.step;
    for (var n = tmp$; n <= tmp$_0; n += tmp$_1) {
      writeF32_le_1($receiver, p, array[n]);
      p = p + 4 | 0;
    }
  }
  function writeArray_le_4($receiver, o, array) {
    var indices = get_indices_5(array);
    var tmp$, tmp$_0, tmp$_1;
    var p = o;
    tmp$ = indices.first;
    tmp$_0 = indices.last;
    tmp$_1 = indices.step;
    for (var n = tmp$; n <= tmp$_0; n += tmp$_1) {
      writeF64_le_1($receiver, p, array[n]);
      p = p + 8 | 0;
    }
  }
  function writeArray_be($receiver, o, array) {
    var indices = get_indices_0(array);
    var tmp$, tmp$_0, tmp$_1;
    var p = o;
    tmp$ = indices.first;
    tmp$_0 = indices.last;
    tmp$_1 = indices.step;
    for (var n = tmp$; n <= tmp$_0; n += tmp$_1) {
      write16_be_1($receiver, p, array[n] | 0);
      p = p + 2 | 0;
    }
  }
  function writeArray_be_0($receiver, o, array) {
    var indices = get_indices_1(array);
    var tmp$, tmp$_0, tmp$_1;
    var p = o;
    tmp$ = indices.first;
    tmp$_0 = indices.last;
    tmp$_1 = indices.step;
    for (var n = tmp$; n <= tmp$_0; n += tmp$_1) {
      write16_be_1($receiver, p, array[n]);
      p = p + 2 | 0;
    }
  }
  function writeArray_be_1($receiver, o, array) {
    var indices = get_indices_2(array);
    var tmp$, tmp$_0, tmp$_1;
    var p = o;
    tmp$ = indices.first;
    tmp$_0 = indices.last;
    tmp$_1 = indices.step;
    for (var n = tmp$; n <= tmp$_0; n += tmp$_1) {
      write32_be_3($receiver, p, array[n]);
      p = p + 4 | 0;
    }
  }
  function writeArray_be_2($receiver, o, array) {
    var indices = get_indices_3(array);
    var tmp$, tmp$_0, tmp$_1;
    var p = o;
    tmp$ = indices.first;
    tmp$_0 = indices.last;
    tmp$_1 = indices.step;
    for (var n = tmp$; n <= tmp$_0; n += tmp$_1) {
      write64_be_1($receiver, p, array[n]);
      p = p + 8 | 0;
    }
  }
  function writeArray_be_3($receiver, o, array) {
    var indices = get_indices_4(array);
    var tmp$, tmp$_0, tmp$_1;
    var p = o;
    tmp$ = indices.first;
    tmp$_0 = indices.last;
    tmp$_1 = indices.step;
    for (var n = tmp$; n <= tmp$_0; n += tmp$_1) {
      writeF32_be_1($receiver, p, array[n]);
      p = p + 4 | 0;
    }
  }
  function writeArray_be_4($receiver, o, array) {
    var indices = get_indices_5(array);
    var tmp$, tmp$_0, tmp$_1;
    var p = o;
    tmp$ = indices.first;
    tmp$_0 = indices.last;
    tmp$_1 = indices.step;
    for (var n = tmp$; n <= tmp$_0; n += tmp$_1) {
      writeF64_be_1($receiver, p, array[n]);
      p = p + 8 | 0;
    }
  }
  function escape($receiver) {
    var tmp$;
    var out = new StringBuilder();
    tmp$ = $receiver.length;
    for (var n = 0; n < tmp$; n++) {
      var c = $receiver.charCodeAt(n);
      if (c === 92)
        out.append_gw00v9$('\\\\');
      else if (c === 34)
        out.append_gw00v9$('\\"');
      else if (c === 10)
        out.append_gw00v9$('\\n');
      else if (c === 13)
        out.append_gw00v9$('\\r');
      else if (c === 9)
        out.append_gw00v9$('\\t');
      else if ((new CharRange(0, 31)).contains_mef7kx$(c))
        out.append_gw00v9$('\\x' + format('%02x', [c | 0]));
      else
        out.append_s8itvh$(c);
    }
    return out.toString();
  }
  function uescape($receiver) {
    var tmp$;
    var out = new StringBuilder();
    tmp$ = $receiver.length;
    for (var n = 0; n < tmp$; n++) {
      var c = $receiver.charCodeAt(n);
      if (c === 92)
        out.append_gw00v9$('\\\\');
      else if (c === 34)
        out.append_gw00v9$('\\"');
      else if (c === 10)
        out.append_gw00v9$('\\n');
      else if (c === 13)
        out.append_gw00v9$('\\r');
      else if (c === 9)
        out.append_gw00v9$('\\t');
      else if (isPrintable(c)) {
        out.append_s8itvh$(c);
      }
       else {
        out.append_gw00v9$('\\u' + format('%04x', [c | 0]));
      }
    }
    return out.toString();
  }
  function unescape($receiver) {
    var tmp$, tmp$_0;
    var out = new StringBuilder();
    var n = 0;
    while (n < $receiver.length) {
      var c = $receiver.charCodeAt((tmp$ = n, n = tmp$ + 1 | 0, tmp$));
      if (c === 92) {
        var c2 = $receiver.charCodeAt((tmp$_0 = n, n = tmp$_0 + 1 | 0, tmp$_0));
        if (c2 === 92)
          out.append_s8itvh$(92);
        else if (c2 === 34)
          out.append_s8itvh$(34);
        else if (c2 === 110)
          out.append_s8itvh$(10);
        else if (c2 === 114)
          out.append_s8itvh$(13);
        else if (c2 === 116)
          out.append_s8itvh$(9);
        else if (c2 === 117) {
          var startIndex = n;
          var endIndex = n + 4 | 0;
          var chars = $receiver.substring(startIndex, endIndex);
          n = n + 4 | 0;
          out.append_s8itvh$(Kotlin.toChar(toInt_0(chars, 16)));
        }
         else {
          out.append_gw00v9$('\\' + String.fromCharCode(c2));
        }
      }
       else
        out.append_s8itvh$(c);
    }
    return out.toString();
  }
  function uquote($receiver) {
    return $receiver != null ? '"' + uescape($receiver) + '"' : 'null';
  }
  function quote($receiver) {
    return $receiver != null ? '"' + escape($receiver) + '"' : 'null';
  }
  function isQuoted($receiver) {
    return startsWith($receiver, 34) && endsWith($receiver, 34);
  }
  function unquote($receiver) {
    if (isQuoted($receiver)) {
      var endIndex = $receiver.length - 1 | 0;
      return unescape($receiver.substring(1, endIndex));
    }
     else {
      return $receiver;
    }
  }
  var expectException = defineInlineFunction('korio-js.com.soywiz.korio.util.expectException_73903m$', wrapFunction(function () {
    var ExpectedException_init = _.com.soywiz.korio.util.ExpectedException;
    var Throwable = Error;
    return function (T_0, isT, callback) {
      try {
        callback();
        throw new ExpectedException_init('Expected');
      }
       catch (e) {
        if (Kotlin.isType(e, Throwable)) {
          if (!isT(e))
            throw e;
        }
         else
          throw e;
      }
    };
  }));
  function ExpectedException(msg) {
    Exception.call(this, msg);
    this.name = 'ExpectedException';
  }
  ExpectedException.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'ExpectedException',
    interfaces: [Exception]
  };
  function Generator() {
  }
  Generator.$metadata$ = {
    kind: Kotlin.Kind.INTERFACE,
    simpleName: 'Generator',
    interfaces: []
  };
  function generateSync$lambda$ObjectLiteral(this$, closure$block) {
    this.this$ = this$;
    this.closure$block = closure$block;
  }
  generateSync$lambda$ObjectLiteral.prototype.iterator = function () {
    var iterator = new GeneratorIterator(this.this$);
    iterator.nextStep = createCoroutine_0(this.closure$block, iterator, iterator);
    return iterator;
  };
  generateSync$lambda$ObjectLiteral.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    interfaces: [Iterable]
  };
  function generateSync$lambda(closure$block_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$generateSync$lambda(closure$block_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$generateSync$lambda(closure$block_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$closure$block = closure$block_0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$generateSync$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$generateSync$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$generateSync$lambda.prototype.constructor = Coroutine$generateSync$lambda;
  Coroutine$generateSync$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            return new generateSync$lambda$ObjectLiteral(this.local$$receiver, this.local$closure$block);
          case 1:
            throw this.exception_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function generateSync(block, continuation) {
    return withCoroutineContext(generateSync$lambda(block), continuation);
  }
  function generate$ObjectLiteral(closure$block) {
    this.closure$block = closure$block;
  }
  generate$ObjectLiteral.prototype.iterator = function () {
    var iterator = new GeneratorIterator(experimental.EmptyCoroutineContext);
    iterator.nextStep = createCoroutine_0(this.closure$block, iterator, iterator);
    return iterator;
  };
  generate$ObjectLiteral.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    interfaces: [Iterable]
  };
  function generate(block) {
    return new generate$ObjectLiteral(block);
  }
  function GeneratorIterator(context) {
    AbstractIterator.call(this);
    this.context_q6lczw$_0 = context;
    this.nextStep_3nugtq$_0 = this.nextStep_3nugtq$_0;
  }
  Object.defineProperty(GeneratorIterator.prototype, 'context', {
    get: function () {
      return this.context_q6lczw$_0;
    }
  });
  Object.defineProperty(GeneratorIterator.prototype, 'nextStep', {
    get: function () {
      if (this.nextStep_3nugtq$_0 == null)
        return Kotlin.throwUPAE('nextStep');
      return this.nextStep_3nugtq$_0;
    },
    set: function (nextStep) {
      this.nextStep_3nugtq$_0 = nextStep;
    }
  });
  GeneratorIterator.prototype.computeNext = function () {
    this.nextStep.resume_11rb$(Unit);
  };
  GeneratorIterator.prototype.resume_11rb$ = function (value) {
    this.done();
  };
  GeneratorIterator.prototype.resumeWithException_tcv7n7$ = function (exception) {
    throw exception;
  };
  function GeneratorIterator$yield$lambda(this$GeneratorIterator) {
    return function (c) {
      this$GeneratorIterator.nextStep = c;
      return Unit;
    };
  }
  function suspendCoroutine$lambda_8(closure$block) {
    return function (c) {
      var safe = SafeContinuation_init(c);
      closure$block(safe);
      return safe.getResult();
    };
  }
  GeneratorIterator.prototype.yield_11rb$ = function (value, continuation) {
    this.setNext_11rb$(value);
    return suspendCoroutine$lambda_8(GeneratorIterator$yield$lambda(this))(continuation.facade);
  };
  GeneratorIterator.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'GeneratorIterator',
    interfaces: [Continuation, Generator, AbstractIterator]
  };
  function htmlspecialchars($receiver) {
    return XmlEntities_getInstance().encode_61zpoe$($receiver);
  }
  function mapWhile(cond, gen) {
    var out = ArrayList_init();
    while (cond()) {
      var element = gen(out.size);
      out.add_11rb$(element);
    }
    return out;
  }
  function writeToFile($receiver, path, continuation) {
    return LocalVfs_0(path).write_gssovf$($receiver, [], continuation);
  }
  function writeToFile_0($receiver, file, continuation) {
    return file.write_gssovf$($receiver, [], continuation);
  }
  function IsoVfs(file_0, continuation_0, suspended) {
    var instance = new Coroutine$IsoVfs(file_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$IsoVfs(file_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$tmp$ = void 0;
    this.local$file = file_0;
  }
  Coroutine$IsoVfs.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$IsoVfs.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$IsoVfs.prototype.constructor = Coroutine$IsoVfs;
  Coroutine$IsoVfs.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$tmp$ = ISO_getInstance();
            this.state_0 = 2;
            this.result_0 = this.local$file.open_7c7tmz$(VfsOpenMode$READ_getInstance(), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.local$tmp$.openVfs_axnxby$(this.result_0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function IsoVfs_0(s, continuation) {
    return ISO_getInstance().openVfs_axnxby$(s, continuation);
  }
  function openAsIso($receiver, continuation) {
    return IsoVfs_0($receiver, continuation);
  }
  function openAsIso_0($receiver, continuation) {
    return IsoVfs($receiver, continuation);
  }
  function ISO() {
    ISO_instance = this;
    this.SECTOR_SIZE = Kotlin.Long.fromInt(2048);
  }
  ISO.prototype.read_axnxby$ = function (s, continuation) {
    return (new ISO$IsoReader(s)).read(continuation);
  };
  function ISO$openVfs$lambda$ObjectLiteral(this$, closure$iso) {
    this.this$ = this$;
    Vfs.call(this);
    this.vfs = this;
    this.isoFile = closure$iso;
  }
  ISO$openVfs$lambda$ObjectLiteral.prototype.getVfsStat_32pwj$ = function (file) {
    return this.createExistsStat_sjl0ub$(file.fullname, file.isDirectory, file.size);
  };
  ISO$openVfs$lambda$ObjectLiteral.prototype.stat_61zpoe$ = function (path, continuation) {
    try {
      return this.getVfsStat_32pwj$(this.isoFile.get_61zpoe$(path));
    }
     catch (e) {
      if (Kotlin.isType(e, Throwable)) {
        return this.createNonExistsStat_4w9ihe$(path);
      }
       else
        throw e;
    }
  };
  ISO$openVfs$lambda$ObjectLiteral.prototype.open_j4ip3x$ = function (path, mode, continuation) {
    return this.isoFile.get_61zpoe$(path).open2_7c7tmz$(mode, continuation);
  };
  function ISO$openVfs$lambda$ObjectLiteral$list$lambda(this$_0, closure$path_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$ISO$openVfs$lambda$ObjectLiteral$list$lambda(this$_0, closure$path_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$ISO$openVfs$lambda$ObjectLiteral$list$lambda(this$_0, closure$path_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$this$ = this$_0;
    this.local$closure$path = closure$path_0;
    this.local$tmp$ = void 0;
    this.local$file = void 0;
    this.local$c = void 0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$ISO$openVfs$lambda$ObjectLiteral$list$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$ISO$openVfs$lambda$ObjectLiteral$list$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$ISO$openVfs$lambda$ObjectLiteral$list$lambda.prototype.constructor = Coroutine$ISO$openVfs$lambda$ObjectLiteral$list$lambda;
  Coroutine$ISO$openVfs$lambda$ObjectLiteral$list$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$file = this.local$this$.isoFile.get_61zpoe$(this.local$closure$path);
            this.local$tmp$ = this.local$file.children.iterator();
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            if (!this.local$tmp$.hasNext()) {
              this.state_0 = 4;
              continue;
            }

            this.local$c = this.local$tmp$.next();
            this.state_0 = 3;
            this.result_0 = this.local$$receiver.yield_11rb$(this.local$this$.vfs.get_61zpoe$(this.local$c.fullname), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            this.state_0 = 2;
            continue;
          case 4:
            return Unit;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  ISO$openVfs$lambda$ObjectLiteral.prototype.list_61zpoe$ = function (path_0, continuation_0, suspended) {
    var instance = new Coroutine$list_61zpoe$(this, path_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$list_61zpoe$($this, path_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$path = path_0;
  }
  Coroutine$list_61zpoe$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$list_61zpoe$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$list_61zpoe$.prototype.constructor = Coroutine$list_61zpoe$;
  Coroutine$list_61zpoe$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            return asyncGenerate(this.$this.this$, ISO$openVfs$lambda$ObjectLiteral$list$lambda(this.$this, this.local$path));
          case 1:
            throw this.exception_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  ISO$openVfs$lambda$ObjectLiteral.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    interfaces: [Vfs]
  };
  function ISO$openVfs$lambda(closure$s_0, this$ISO_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$ISO$openVfs$lambda(closure$s_0, this$ISO_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$ISO$openVfs$lambda(closure$s_0, this$ISO_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$closure$s = closure$s_0;
    this.local$this$ISO = this$ISO_0;
    this.local$iso = void 0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$ISO$openVfs$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$ISO$openVfs$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$ISO$openVfs$lambda.prototype.constructor = Coroutine$ISO$openVfs$lambda;
  Coroutine$ISO$openVfs$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$this$ISO.read_axnxby$(this.local$closure$s, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$iso = this.result_0;
            return (new ISO$openVfs$lambda$ObjectLiteral(this.local$$receiver, this.local$iso)).root;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  ISO.prototype.openVfs_axnxby$ = function (s_0, continuation_0, suspended) {
    var instance = new Coroutine$openVfs_axnxby$(this, s_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$openVfs_axnxby$($this, s_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$s = s_0;
  }
  Coroutine$openVfs_axnxby$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$openVfs_axnxby$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$openVfs_axnxby$.prototype.constructor = Coroutine$openVfs_axnxby$;
  Coroutine$openVfs_axnxby$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = withCoroutineContext(ISO$openVfs$lambda(this.local$s, this.$this), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function ISO$IsoReader(s) {
    this.s = s;
  }
  ISO$IsoReader.prototype.getSector_vux9f0$ = function (sector, size, continuation) {
    return sliceWithSize(this.s, Kotlin.Long.fromInt(sector).multiply(Kotlin.Long.fromInt(2048)), Kotlin.Long.fromInt(size), continuation);
  };
  ISO$IsoReader.prototype.getSectorMemory_vux9f0$ = function (sector_0, size_0, continuation_0, suspended) {
    var instance = new Coroutine$getSectorMemory_vux9f0$(this, sector_0, size_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$getSectorMemory_vux9f0$($this, sector_0, size_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$sector = sector_0;
    this.local$size = size_0;
  }
  Coroutine$getSectorMemory_vux9f0$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$getSectorMemory_vux9f0$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$getSectorMemory_vux9f0$.prototype.constructor = Coroutine$getSectorMemory_vux9f0$;
  Coroutine$getSectorMemory_vux9f0$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.getSector_vux9f0$(this.local$sector, this.local$size, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = readAvailable(this.result_0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            return openSync(this.result_0);
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  ISO$IsoReader.prototype.read = function (continuation_0, suspended) {
    var instance = new Coroutine$read(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$read($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$primary = void 0;
    this.local$root = void 0;
  }
  Coroutine$read.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$read.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$read.prototype.constructor = Coroutine$read;
  Coroutine$read.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.getSectorMemory_vux9f0$(16, Kotlin.Long.fromInt(2048).toInt(), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$primary = ISO$ISO$PrimaryVolumeDescriptor_init(this.result_0);
            this.local$root = new ISO$IsoFile(this.$this, this.local$primary.rootDirectoryRecord, null);
            this.state_0 = 3;
            this.result_0 = this.$this.getSectorMemory_vux9f0$(this.local$primary.rootDirectoryRecord.extent, this.local$primary.rootDirectoryRecord.size, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            this.state_0 = 4;
            this.result_0 = this.$this.readDirectoryRecords_nf1uk8$(this.local$root, this.result_0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 4:
            return this.local$root;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  ISO$IsoReader.prototype.readDirectoryRecords_nf1uk8$ = function (parent_0, sector_0, continuation_0, suspended) {
    var instance = new Coroutine$readDirectoryRecords_nf1uk8$(this, parent_0, sector_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$readDirectoryRecords_nf1uk8$($this, parent_0, sector_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$dr = void 0;
    this.local$file = void 0;
    this.local$parent = parent_0;
    this.local$sector = sector_0;
  }
  Coroutine$readDirectoryRecords_nf1uk8$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readDirectoryRecords_nf1uk8$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readDirectoryRecords_nf1uk8$.prototype.constructor = Coroutine$readDirectoryRecords_nf1uk8$;
  Coroutine$readDirectoryRecords_nf1uk8$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            if (get_eof(this.local$sector)) {
              this.state_0 = 8;
              continue;
            }

            this.local$dr = ISO$DirectoryRecord$Companion_getInstance().invoke_39qel5$(this.local$sector);
            if (this.local$dr == null) {
              skipToAlign_0(this.local$sector, Kotlin.Long.fromInt(2048).toInt());
              this.state_0 = 2;
              continue;
            }
             else {
              this.state_0 = 3;
              continue;
            }

          case 3:
            if (Kotlin.equals(this.local$dr.name, '') || Kotlin.equals(this.local$dr.name, '\x01')) {
              this.state_0 = 2;
              continue;
            }
             else {
              this.state_0 = 4;
              continue;
            }

          case 4:
            this.local$file = new ISO$IsoFile(this.$this, this.local$dr, this.local$parent);
            if (this.local$dr.isDirectory) {
              this.state_0 = 5;
              this.result_0 = this.$this.getSectorMemory_vux9f0$(this.local$dr.extent, this.local$dr.size, this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              break;
            }
             else {
              this.state_0 = 7;
              continue;
            }

          case 5:
            this.state_0 = 6;
            this.result_0 = this.$this.readDirectoryRecords_nf1uk8$(this.local$file, this.result_0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 6:
            this.state_0 = 7;
            continue;
          case 7:
            this.state_0 = 2;
            continue;
          case 8:
            return;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  ISO$IsoReader.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'IsoReader',
    interfaces: []
  };
  function ISO$IsoFile(reader, record, parent) {
    this.reader = reader;
    this.record = record;
    this.parent = parent;
    this.fullname = this.parent == null ? this.record.name : trimStart(this.parent.fullname + '/' + this.record.name, Kotlin.charArrayOf(47));
    this.children = ArrayList_init();
    this.size = Kotlin.Long.fromInt(this.record.size);
    var tmp$, tmp$_0;
    (tmp$_0 = (tmp$ = this.parent) != null ? tmp$.children : null) != null ? tmp$_0.add_11rb$(this) : null;
  }
  Object.defineProperty(ISO$IsoFile.prototype, 'name', {
    get: function () {
      return this.record.name;
    }
  });
  Object.defineProperty(ISO$IsoFile.prototype, 'isDirectory', {
    get: function () {
      return this.record.isDirectory;
    }
  });
  ISO$IsoFile.prototype.dump = function () {
    var tmp$;
    println(this.fullname + ': ' + this.record);
    tmp$ = this.children.iterator();
    while (tmp$.hasNext()) {
      var c = tmp$.next();
      c.dump();
    }
  };
  ISO$IsoFile.prototype.open2_7c7tmz$ = function (mode, continuation) {
    return this.reader.getSector_vux9f0$(this.record.extent, this.record.size, continuation);
  };
  ISO$IsoFile.prototype.get_61zpoe$ = function (name) {
    var tmp$, tmp$_0, tmp$_1;
    var current = this;
    tmp$ = split_0(name, ['/']).iterator();
    while (tmp$.hasNext()) {
      var part = tmp$.next();
      if (!Kotlin.equals(part, ''))
        if (!Kotlin.equals(part, '.'))
          if (Kotlin.equals(part, '..'))
            current = (tmp$_0 = current.parent) != null ? tmp$_0 : Kotlin.throwNPE();
          else {
            var $receiver = current.children;
            var firstOrNull$result;
            firstOrNull$break: do {
              var tmp$_2;
              tmp$_2 = $receiver.iterator();
              while (tmp$_2.hasNext()) {
                var element = tmp$_2.next();
                if (Kotlin.equals(element.name.toUpperCase(), part.toUpperCase())) {
                  firstOrNull$result = element;
                  break firstOrNull$break;
                }
              }
              firstOrNull$result = null;
            }
             while (false);
            tmp$_1 = firstOrNull$result;
            if (tmp$_1 == null) {
              throw new IllegalStateException("Can't find part " + part + ' for accessing path ' + name + ' children: ' + current.children);
            }
            current = tmp$_1;
          }
    }
    return current;
  };
  ISO$IsoFile.prototype.toString = function () {
    return "IsoFile(fullname='" + this.fullname + "', size=" + this.size + ')';
  };
  ISO$IsoFile.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'IsoFile',
    interfaces: []
  };
  ISO.prototype.readLongArray_le_hsu5ns$ = function ($receiver, count) {
    var $receiver_0 = until(0, count);
    var destination = ArrayList_init(collectionSizeOrDefault($receiver_0, 10));
    var tmp$;
    tmp$ = $receiver_0.iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      destination.add_11rb$(readS64_le_0($receiver));
    }
    return toLongArray(destination);
  };
  ISO.prototype.readU32_le_be_ucmi9i$ = function ($receiver) {
    var le = readS32_le_0($receiver);
    readS32_be_0($receiver);
    return le;
  };
  ISO.prototype.readTextWithLength_ucmi9i$ = function ($receiver) {
    var len = readU8_0($receiver);
    return readStringz_2($receiver, len);
  };
  ISO.prototype.readU16_le_be_ucmi9i$ = function ($receiver) {
    var le = readS16_le_0($receiver);
    readS16_be_0($receiver);
    return le;
  };
  function ISO$PrimaryVolumeDescriptor(volumeDescriptorHeader, pad1, systemId, volumeId, pad2, volumeSpaceSize, pad3, volumeSetSize, volumeSequenceNumber, logicalBlockSize, pathTableSize, typeLPathTable, optType1PathTable, typeMPathTable, optTypeMPathTable, rootDirectoryRecord, volumeSetId, publisherId, preparerId, applicationId, copyrightFileId, abstractFileId, bibliographicFileId, creationDate, modificationDate, expirationDate, effectiveDate, fileStructureVersion, pad5, applicationData, pad6) {
    this.volumeDescriptorHeader = volumeDescriptorHeader;
    this.pad1 = pad1;
    this.systemId = systemId;
    this.volumeId = volumeId;
    this.pad2 = pad2;
    this.volumeSpaceSize = volumeSpaceSize;
    this.pad3 = pad3;
    this.volumeSetSize = volumeSetSize;
    this.volumeSequenceNumber = volumeSequenceNumber;
    this.logicalBlockSize = logicalBlockSize;
    this.pathTableSize = pathTableSize;
    this.typeLPathTable = typeLPathTable;
    this.optType1PathTable = optType1PathTable;
    this.typeMPathTable = typeMPathTable;
    this.optTypeMPathTable = optTypeMPathTable;
    this.rootDirectoryRecord = rootDirectoryRecord;
    this.volumeSetId = volumeSetId;
    this.publisherId = publisherId;
    this.preparerId = preparerId;
    this.applicationId = applicationId;
    this.copyrightFileId = copyrightFileId;
    this.abstractFileId = abstractFileId;
    this.bibliographicFileId = bibliographicFileId;
    this.creationDate = creationDate;
    this.modificationDate = modificationDate;
    this.expirationDate = expirationDate;
    this.effectiveDate = effectiveDate;
    this.fileStructureVersion = fileStructureVersion;
    this.pad5 = pad5;
    this.applicationData = applicationData;
    this.pad6 = pad6;
  }
  ISO$PrimaryVolumeDescriptor.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'PrimaryVolumeDescriptor',
    interfaces: []
  };
  function ISO$ISO$PrimaryVolumeDescriptor_init(s, $this) {
    $this = $this || Object.create(ISO$PrimaryVolumeDescriptor.prototype);
    var tmp$;
    ISO$PrimaryVolumeDescriptor.call($this, ISO$ISO$VolumeDescriptorHeader_init(s), readU8_0(s), readStringz_2(s, 32), readStringz_2(s, 32), readS64_le_0(s), ISO_getInstance().readU32_le_be_ucmi9i$(s), ISO_getInstance().readLongArray_le_hsu5ns$(s, 4), ISO_getInstance().readU16_le_be_ucmi9i$(s), ISO_getInstance().readU16_le_be_ucmi9i$(s), ISO_getInstance().readU16_le_be_ucmi9i$(s), ISO_getInstance().readU32_le_be_ucmi9i$(s), readS32_le_0(s), readS32_le_0(s), readS32_le_0(s), readS32_le_0(s), (tmp$ = ISO$DirectoryRecord$Companion_getInstance().invoke_39qel5$(s)) != null ? tmp$ : Kotlin.throwNPE(), readStringz_2(s, 128), readStringz_2(s, 128), readStringz_2(s, 128), readStringz_2(s, 128), readStringz_2(s, 37), readStringz_2(s, 37), readStringz_2(s, 37), ISO$ISO$IsoDate_init(s), ISO$ISO$IsoDate_init(s), ISO$ISO$IsoDate_init(s), ISO$ISO$IsoDate_init(s), readU8_0(s), readU8_0(s), readBytes_0(s, 512), readBytes_0(s, 653));
    return $this;
  }
  ISO$PrimaryVolumeDescriptor.prototype.component1 = function () {
    return this.volumeDescriptorHeader;
  };
  ISO$PrimaryVolumeDescriptor.prototype.component2 = function () {
    return this.pad1;
  };
  ISO$PrimaryVolumeDescriptor.prototype.component3 = function () {
    return this.systemId;
  };
  ISO$PrimaryVolumeDescriptor.prototype.component4 = function () {
    return this.volumeId;
  };
  ISO$PrimaryVolumeDescriptor.prototype.component5 = function () {
    return this.pad2;
  };
  ISO$PrimaryVolumeDescriptor.prototype.component6 = function () {
    return this.volumeSpaceSize;
  };
  ISO$PrimaryVolumeDescriptor.prototype.component7 = function () {
    return this.pad3;
  };
  ISO$PrimaryVolumeDescriptor.prototype.component8 = function () {
    return this.volumeSetSize;
  };
  ISO$PrimaryVolumeDescriptor.prototype.component9 = function () {
    return this.volumeSequenceNumber;
  };
  ISO$PrimaryVolumeDescriptor.prototype.component10 = function () {
    return this.logicalBlockSize;
  };
  ISO$PrimaryVolumeDescriptor.prototype.component11 = function () {
    return this.pathTableSize;
  };
  ISO$PrimaryVolumeDescriptor.prototype.component12 = function () {
    return this.typeLPathTable;
  };
  ISO$PrimaryVolumeDescriptor.prototype.component13 = function () {
    return this.optType1PathTable;
  };
  ISO$PrimaryVolumeDescriptor.prototype.component14 = function () {
    return this.typeMPathTable;
  };
  ISO$PrimaryVolumeDescriptor.prototype.component15 = function () {
    return this.optTypeMPathTable;
  };
  ISO$PrimaryVolumeDescriptor.prototype.component16 = function () {
    return this.rootDirectoryRecord;
  };
  ISO$PrimaryVolumeDescriptor.prototype.component17 = function () {
    return this.volumeSetId;
  };
  ISO$PrimaryVolumeDescriptor.prototype.component18 = function () {
    return this.publisherId;
  };
  ISO$PrimaryVolumeDescriptor.prototype.component19 = function () {
    return this.preparerId;
  };
  ISO$PrimaryVolumeDescriptor.prototype.component20 = function () {
    return this.applicationId;
  };
  ISO$PrimaryVolumeDescriptor.prototype.component21 = function () {
    return this.copyrightFileId;
  };
  ISO$PrimaryVolumeDescriptor.prototype.component22 = function () {
    return this.abstractFileId;
  };
  ISO$PrimaryVolumeDescriptor.prototype.component23 = function () {
    return this.bibliographicFileId;
  };
  ISO$PrimaryVolumeDescriptor.prototype.component24 = function () {
    return this.creationDate;
  };
  ISO$PrimaryVolumeDescriptor.prototype.component25 = function () {
    return this.modificationDate;
  };
  ISO$PrimaryVolumeDescriptor.prototype.component26 = function () {
    return this.expirationDate;
  };
  ISO$PrimaryVolumeDescriptor.prototype.component27 = function () {
    return this.effectiveDate;
  };
  ISO$PrimaryVolumeDescriptor.prototype.component28 = function () {
    return this.fileStructureVersion;
  };
  ISO$PrimaryVolumeDescriptor.prototype.component29 = function () {
    return this.pad5;
  };
  ISO$PrimaryVolumeDescriptor.prototype.component30 = function () {
    return this.applicationData;
  };
  ISO$PrimaryVolumeDescriptor.prototype.component31 = function () {
    return this.pad6;
  };
  ISO$PrimaryVolumeDescriptor.prototype.copy_u6vabl$ = function (volumeDescriptorHeader, pad1, systemId, volumeId, pad2, volumeSpaceSize, pad3, volumeSetSize, volumeSequenceNumber, logicalBlockSize, pathTableSize, typeLPathTable, optType1PathTable, typeMPathTable, optTypeMPathTable, rootDirectoryRecord, volumeSetId, publisherId, preparerId, applicationId, copyrightFileId, abstractFileId, bibliographicFileId, creationDate, modificationDate, expirationDate, effectiveDate, fileStructureVersion, pad5, applicationData, pad6) {
    return new ISO$PrimaryVolumeDescriptor(volumeDescriptorHeader === void 0 ? this.volumeDescriptorHeader : volumeDescriptorHeader, pad1 === void 0 ? this.pad1 : pad1, systemId === void 0 ? this.systemId : systemId, volumeId === void 0 ? this.volumeId : volumeId, pad2 === void 0 ? this.pad2 : pad2, volumeSpaceSize === void 0 ? this.volumeSpaceSize : volumeSpaceSize, pad3 === void 0 ? this.pad3 : pad3, volumeSetSize === void 0 ? this.volumeSetSize : volumeSetSize, volumeSequenceNumber === void 0 ? this.volumeSequenceNumber : volumeSequenceNumber, logicalBlockSize === void 0 ? this.logicalBlockSize : logicalBlockSize, pathTableSize === void 0 ? this.pathTableSize : pathTableSize, typeLPathTable === void 0 ? this.typeLPathTable : typeLPathTable, optType1PathTable === void 0 ? this.optType1PathTable : optType1PathTable, typeMPathTable === void 0 ? this.typeMPathTable : typeMPathTable, optTypeMPathTable === void 0 ? this.optTypeMPathTable : optTypeMPathTable, rootDirectoryRecord === void 0 ? this.rootDirectoryRecord : rootDirectoryRecord, volumeSetId === void 0 ? this.volumeSetId : volumeSetId, publisherId === void 0 ? this.publisherId : publisherId, preparerId === void 0 ? this.preparerId : preparerId, applicationId === void 0 ? this.applicationId : applicationId, copyrightFileId === void 0 ? this.copyrightFileId : copyrightFileId, abstractFileId === void 0 ? this.abstractFileId : abstractFileId, bibliographicFileId === void 0 ? this.bibliographicFileId : bibliographicFileId, creationDate === void 0 ? this.creationDate : creationDate, modificationDate === void 0 ? this.modificationDate : modificationDate, expirationDate === void 0 ? this.expirationDate : expirationDate, effectiveDate === void 0 ? this.effectiveDate : effectiveDate, fileStructureVersion === void 0 ? this.fileStructureVersion : fileStructureVersion, pad5 === void 0 ? this.pad5 : pad5, applicationData === void 0 ? this.applicationData : applicationData, pad6 === void 0 ? this.pad6 : pad6);
  };
  ISO$PrimaryVolumeDescriptor.prototype.toString = function () {
    return 'PrimaryVolumeDescriptor(volumeDescriptorHeader=' + Kotlin.toString(this.volumeDescriptorHeader) + (', pad1=' + Kotlin.toString(this.pad1)) + (', systemId=' + Kotlin.toString(this.systemId)) + (', volumeId=' + Kotlin.toString(this.volumeId)) + (', pad2=' + Kotlin.toString(this.pad2)) + (', volumeSpaceSize=' + Kotlin.toString(this.volumeSpaceSize)) + (', pad3=' + Kotlin.toString(this.pad3)) + (', volumeSetSize=' + Kotlin.toString(this.volumeSetSize)) + (', volumeSequenceNumber=' + Kotlin.toString(this.volumeSequenceNumber)) + (', logicalBlockSize=' + Kotlin.toString(this.logicalBlockSize)) + (', pathTableSize=' + Kotlin.toString(this.pathTableSize)) + (', typeLPathTable=' + Kotlin.toString(this.typeLPathTable)) + (', optType1PathTable=' + Kotlin.toString(this.optType1PathTable)) + (', typeMPathTable=' + Kotlin.toString(this.typeMPathTable)) + (', optTypeMPathTable=' + Kotlin.toString(this.optTypeMPathTable)) + (', rootDirectoryRecord=' + Kotlin.toString(this.rootDirectoryRecord)) + (', volumeSetId=' + Kotlin.toString(this.volumeSetId)) + (', publisherId=' + Kotlin.toString(this.publisherId)) + (', preparerId=' + Kotlin.toString(this.preparerId)) + (', applicationId=' + Kotlin.toString(this.applicationId)) + (', copyrightFileId=' + Kotlin.toString(this.copyrightFileId)) + (', abstractFileId=' + Kotlin.toString(this.abstractFileId)) + (', bibliographicFileId=' + Kotlin.toString(this.bibliographicFileId)) + (', creationDate=' + Kotlin.toString(this.creationDate)) + (', modificationDate=' + Kotlin.toString(this.modificationDate)) + (', expirationDate=' + Kotlin.toString(this.expirationDate)) + (', effectiveDate=' + Kotlin.toString(this.effectiveDate)) + (', fileStructureVersion=' + Kotlin.toString(this.fileStructureVersion)) + (', pad5=' + Kotlin.toString(this.pad5)) + (', applicationData=' + Kotlin.toString(this.applicationData)) + (', pad6=' + Kotlin.toString(this.pad6)) + ')';
  };
  ISO$PrimaryVolumeDescriptor.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.volumeDescriptorHeader) | 0;
    result = result * 31 + Kotlin.hashCode(this.pad1) | 0;
    result = result * 31 + Kotlin.hashCode(this.systemId) | 0;
    result = result * 31 + Kotlin.hashCode(this.volumeId) | 0;
    result = result * 31 + Kotlin.hashCode(this.pad2) | 0;
    result = result * 31 + Kotlin.hashCode(this.volumeSpaceSize) | 0;
    result = result * 31 + Kotlin.hashCode(this.pad3) | 0;
    result = result * 31 + Kotlin.hashCode(this.volumeSetSize) | 0;
    result = result * 31 + Kotlin.hashCode(this.volumeSequenceNumber) | 0;
    result = result * 31 + Kotlin.hashCode(this.logicalBlockSize) | 0;
    result = result * 31 + Kotlin.hashCode(this.pathTableSize) | 0;
    result = result * 31 + Kotlin.hashCode(this.typeLPathTable) | 0;
    result = result * 31 + Kotlin.hashCode(this.optType1PathTable) | 0;
    result = result * 31 + Kotlin.hashCode(this.typeMPathTable) | 0;
    result = result * 31 + Kotlin.hashCode(this.optTypeMPathTable) | 0;
    result = result * 31 + Kotlin.hashCode(this.rootDirectoryRecord) | 0;
    result = result * 31 + Kotlin.hashCode(this.volumeSetId) | 0;
    result = result * 31 + Kotlin.hashCode(this.publisherId) | 0;
    result = result * 31 + Kotlin.hashCode(this.preparerId) | 0;
    result = result * 31 + Kotlin.hashCode(this.applicationId) | 0;
    result = result * 31 + Kotlin.hashCode(this.copyrightFileId) | 0;
    result = result * 31 + Kotlin.hashCode(this.abstractFileId) | 0;
    result = result * 31 + Kotlin.hashCode(this.bibliographicFileId) | 0;
    result = result * 31 + Kotlin.hashCode(this.creationDate) | 0;
    result = result * 31 + Kotlin.hashCode(this.modificationDate) | 0;
    result = result * 31 + Kotlin.hashCode(this.expirationDate) | 0;
    result = result * 31 + Kotlin.hashCode(this.effectiveDate) | 0;
    result = result * 31 + Kotlin.hashCode(this.fileStructureVersion) | 0;
    result = result * 31 + Kotlin.hashCode(this.pad5) | 0;
    result = result * 31 + Kotlin.hashCode(this.applicationData) | 0;
    result = result * 31 + Kotlin.hashCode(this.pad6) | 0;
    return result;
  };
  ISO$PrimaryVolumeDescriptor.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.volumeDescriptorHeader, other.volumeDescriptorHeader) && Kotlin.equals(this.pad1, other.pad1) && Kotlin.equals(this.systemId, other.systemId) && Kotlin.equals(this.volumeId, other.volumeId) && Kotlin.equals(this.pad2, other.pad2) && Kotlin.equals(this.volumeSpaceSize, other.volumeSpaceSize) && Kotlin.equals(this.pad3, other.pad3) && Kotlin.equals(this.volumeSetSize, other.volumeSetSize) && Kotlin.equals(this.volumeSequenceNumber, other.volumeSequenceNumber) && Kotlin.equals(this.logicalBlockSize, other.logicalBlockSize) && Kotlin.equals(this.pathTableSize, other.pathTableSize) && Kotlin.equals(this.typeLPathTable, other.typeLPathTable) && Kotlin.equals(this.optType1PathTable, other.optType1PathTable) && Kotlin.equals(this.typeMPathTable, other.typeMPathTable) && Kotlin.equals(this.optTypeMPathTable, other.optTypeMPathTable) && Kotlin.equals(this.rootDirectoryRecord, other.rootDirectoryRecord) && Kotlin.equals(this.volumeSetId, other.volumeSetId) && Kotlin.equals(this.publisherId, other.publisherId) && Kotlin.equals(this.preparerId, other.preparerId) && Kotlin.equals(this.applicationId, other.applicationId) && Kotlin.equals(this.copyrightFileId, other.copyrightFileId) && Kotlin.equals(this.abstractFileId, other.abstractFileId) && Kotlin.equals(this.bibliographicFileId, other.bibliographicFileId) && Kotlin.equals(this.creationDate, other.creationDate) && Kotlin.equals(this.modificationDate, other.modificationDate) && Kotlin.equals(this.expirationDate, other.expirationDate) && Kotlin.equals(this.effectiveDate, other.effectiveDate) && Kotlin.equals(this.fileStructureVersion, other.fileStructureVersion) && Kotlin.equals(this.pad5, other.pad5) && Kotlin.equals(this.applicationData, other.applicationData) && Kotlin.equals(this.pad6, other.pad6)))));
  };
  function ISO$VolumeDescriptorHeader(type, id, version) {
    this.type = type;
    this.id = id;
    this.version = version;
  }
  function ISO$VolumeDescriptorHeader$TypeEnum(name, ordinal, id) {
    Enum.call(this);
    this.id = id;
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function ISO$VolumeDescriptorHeader$TypeEnum_initFields() {
    ISO$VolumeDescriptorHeader$TypeEnum_initFields = function () {
    };
    ISO$VolumeDescriptorHeader$TypeEnum$BootRecord_instance = new ISO$VolumeDescriptorHeader$TypeEnum('BootRecord', 0, 0);
    ISO$VolumeDescriptorHeader$TypeEnum$VolumePartitionSetTerminator_instance = new ISO$VolumeDescriptorHeader$TypeEnum('VolumePartitionSetTerminator', 1, 255);
    ISO$VolumeDescriptorHeader$TypeEnum$PrimaryVolumeDescriptor_instance = new ISO$VolumeDescriptorHeader$TypeEnum('PrimaryVolumeDescriptor', 2, 1);
    ISO$VolumeDescriptorHeader$TypeEnum$SupplementaryVolumeDescriptor_instance = new ISO$VolumeDescriptorHeader$TypeEnum('SupplementaryVolumeDescriptor', 3, 2);
    ISO$VolumeDescriptorHeader$TypeEnum$VolumePartitionDescriptor_instance = new ISO$VolumeDescriptorHeader$TypeEnum('VolumePartitionDescriptor', 4, 3);
    ISO$VolumeDescriptorHeader$TypeEnum$Companion_getInstance();
  }
  var ISO$VolumeDescriptorHeader$TypeEnum$BootRecord_instance;
  function ISO$VolumeDescriptorHeader$TypeEnum$BootRecord_getInstance() {
    ISO$VolumeDescriptorHeader$TypeEnum_initFields();
    return ISO$VolumeDescriptorHeader$TypeEnum$BootRecord_instance;
  }
  var ISO$VolumeDescriptorHeader$TypeEnum$VolumePartitionSetTerminator_instance;
  function ISO$VolumeDescriptorHeader$TypeEnum$VolumePartitionSetTerminator_getInstance() {
    ISO$VolumeDescriptorHeader$TypeEnum_initFields();
    return ISO$VolumeDescriptorHeader$TypeEnum$VolumePartitionSetTerminator_instance;
  }
  var ISO$VolumeDescriptorHeader$TypeEnum$PrimaryVolumeDescriptor_instance;
  function ISO$VolumeDescriptorHeader$TypeEnum$PrimaryVolumeDescriptor_getInstance() {
    ISO$VolumeDescriptorHeader$TypeEnum_initFields();
    return ISO$VolumeDescriptorHeader$TypeEnum$PrimaryVolumeDescriptor_instance;
  }
  var ISO$VolumeDescriptorHeader$TypeEnum$SupplementaryVolumeDescriptor_instance;
  function ISO$VolumeDescriptorHeader$TypeEnum$SupplementaryVolumeDescriptor_getInstance() {
    ISO$VolumeDescriptorHeader$TypeEnum_initFields();
    return ISO$VolumeDescriptorHeader$TypeEnum$SupplementaryVolumeDescriptor_instance;
  }
  var ISO$VolumeDescriptorHeader$TypeEnum$VolumePartitionDescriptor_instance;
  function ISO$VolumeDescriptorHeader$TypeEnum$VolumePartitionDescriptor_getInstance() {
    ISO$VolumeDescriptorHeader$TypeEnum_initFields();
    return ISO$VolumeDescriptorHeader$TypeEnum$VolumePartitionDescriptor_instance;
  }
  var mapCapacity = Kotlin.kotlin.collections.mapCapacity_za3lpa$;
  var coerceAtLeast = Kotlin.kotlin.ranges.coerceAtLeast_dqglrj$;
  var LinkedHashMap_init_0 = Kotlin.kotlin.collections.LinkedHashMap_init_xf5xz2$;
  function ISO$VolumeDescriptorHeader$TypeEnum$Companion() {
    ISO$VolumeDescriptorHeader$TypeEnum$Companion_instance = this;
    var $receiver = ISO$VolumeDescriptorHeader$TypeEnum$values();
    var capacity = coerceAtLeast(mapCapacity($receiver.length), 16);
    var destination = LinkedHashMap_init_0(capacity);
    var tmp$;
    for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
      var element = $receiver[tmp$];
      destination.put_xwzc9p$(element.id, element);
    }
    this.BY_ID = destination;
  }
  ISO$VolumeDescriptorHeader$TypeEnum$Companion.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var ISO$VolumeDescriptorHeader$TypeEnum$Companion_instance = null;
  function ISO$VolumeDescriptorHeader$TypeEnum$Companion_getInstance() {
    ISO$VolumeDescriptorHeader$TypeEnum_initFields();
    if (ISO$VolumeDescriptorHeader$TypeEnum$Companion_instance === null) {
      new ISO$VolumeDescriptorHeader$TypeEnum$Companion();
    }
    return ISO$VolumeDescriptorHeader$TypeEnum$Companion_instance;
  }
  ISO$VolumeDescriptorHeader$TypeEnum.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'TypeEnum',
    interfaces: [Enum]
  };
  function ISO$VolumeDescriptorHeader$TypeEnum$values() {
    return [ISO$VolumeDescriptorHeader$TypeEnum$BootRecord_getInstance(), ISO$VolumeDescriptorHeader$TypeEnum$VolumePartitionSetTerminator_getInstance(), ISO$VolumeDescriptorHeader$TypeEnum$PrimaryVolumeDescriptor_getInstance(), ISO$VolumeDescriptorHeader$TypeEnum$SupplementaryVolumeDescriptor_getInstance(), ISO$VolumeDescriptorHeader$TypeEnum$VolumePartitionDescriptor_getInstance()];
  }
  ISO$VolumeDescriptorHeader$TypeEnum.values = ISO$VolumeDescriptorHeader$TypeEnum$values;
  function ISO$VolumeDescriptorHeader$TypeEnum$valueOf(name) {
    switch (name) {
      case 'BootRecord':
        return ISO$VolumeDescriptorHeader$TypeEnum$BootRecord_getInstance();
      case 'VolumePartitionSetTerminator':
        return ISO$VolumeDescriptorHeader$TypeEnum$VolumePartitionSetTerminator_getInstance();
      case 'PrimaryVolumeDescriptor':
        return ISO$VolumeDescriptorHeader$TypeEnum$PrimaryVolumeDescriptor_getInstance();
      case 'SupplementaryVolumeDescriptor':
        return ISO$VolumeDescriptorHeader$TypeEnum$SupplementaryVolumeDescriptor_getInstance();
      case 'VolumePartitionDescriptor':
        return ISO$VolumeDescriptorHeader$TypeEnum$VolumePartitionDescriptor_getInstance();
      default:Kotlin.throwISE('No enum constant com.soywiz.korio.vfs.ISO.VolumeDescriptorHeader.TypeEnum.' + name);
    }
  }
  ISO$VolumeDescriptorHeader$TypeEnum.valueOf_61zpoe$ = ISO$VolumeDescriptorHeader$TypeEnum$valueOf;
  ISO$VolumeDescriptorHeader.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'VolumeDescriptorHeader',
    interfaces: []
  };
  function ISO$ISO$VolumeDescriptorHeader_init(s, $this) {
    $this = $this || Object.create(ISO$VolumeDescriptorHeader.prototype);
    var tmp$;
    ISO$VolumeDescriptorHeader.call($this, (tmp$ = ISO$VolumeDescriptorHeader$TypeEnum$Companion_getInstance().BY_ID.get_11rb$(readU8_0(s))) != null ? tmp$ : Kotlin.throwNPE(), readStringz_2(s, 5), readU8_0(s));
    return $this;
  }
  ISO$VolumeDescriptorHeader.prototype.component1 = function () {
    return this.type;
  };
  ISO$VolumeDescriptorHeader.prototype.component2 = function () {
    return this.id;
  };
  ISO$VolumeDescriptorHeader.prototype.component3 = function () {
    return this.version;
  };
  ISO$VolumeDescriptorHeader.prototype.copy_91x1wz$ = function (type, id, version) {
    return new ISO$VolumeDescriptorHeader(type === void 0 ? this.type : type, id === void 0 ? this.id : id, version === void 0 ? this.version : version);
  };
  ISO$VolumeDescriptorHeader.prototype.toString = function () {
    return 'VolumeDescriptorHeader(type=' + Kotlin.toString(this.type) + (', id=' + Kotlin.toString(this.id)) + (', version=' + Kotlin.toString(this.version)) + ')';
  };
  ISO$VolumeDescriptorHeader.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.type) | 0;
    result = result * 31 + Kotlin.hashCode(this.id) | 0;
    result = result * 31 + Kotlin.hashCode(this.version) | 0;
    return result;
  };
  ISO$VolumeDescriptorHeader.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.type, other.type) && Kotlin.equals(this.id, other.id) && Kotlin.equals(this.version, other.version)))));
  };
  function ISO$IsoDate(data) {
    this.data = data;
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5;
    this.year = (tmp$ = toIntOrNull_0(this.data.substring(0, 4))) != null ? tmp$ : 0;
    this.month = (tmp$_0 = toIntOrNull_0(this.data.substring(4, 6))) != null ? tmp$_0 : 0;
    this.day = (tmp$_1 = toIntOrNull_0(this.data.substring(6, 8))) != null ? tmp$_1 : 0;
    this.hour = (tmp$_2 = toIntOrNull_0(this.data.substring(8, 10))) != null ? tmp$_2 : 0;
    this.minute = (tmp$_3 = toIntOrNull_0(this.data.substring(10, 12))) != null ? tmp$_3 : 0;
    this.second = (tmp$_4 = toIntOrNull_0(this.data.substring(12, 14))) != null ? tmp$_4 : 0;
    this.hsecond = (tmp$_5 = toIntOrNull_0(this.data.substring(14, 16))) != null ? tmp$_5 : 0;
  }
  ISO$IsoDate.prototype.toString = function () {
    return format('IsoDate(%04d-%02d-%02d %02d:%02d:%02d.%d)', [this.year, this.month, this.day, this.hour, this.minute, this.second, this.hsecond]);
  };
  ISO$IsoDate.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'IsoDate',
    interfaces: []
  };
  function ISO$ISO$IsoDate_init(s, $this) {
    $this = $this || Object.create(ISO$IsoDate.prototype);
    ISO$IsoDate.call($this, readString_0(s, 17));
    return $this;
  }
  ISO$IsoDate.prototype.component1 = function () {
    return this.data;
  };
  ISO$IsoDate.prototype.copy_61zpoe$ = function (data) {
    return new ISO$IsoDate(data === void 0 ? this.data : data);
  };
  ISO$IsoDate.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.data) | 0;
    return result;
  };
  ISO$IsoDate.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.data, other.data))));
  };
  function ISO$DateStruct(year, month, day, hour, minute, second, offset) {
    this.year = year;
    this.month = month;
    this.day = day;
    this.hour = hour;
    this.minute = minute;
    this.second = second;
    this.offset = offset;
    this.fullYear = 1900 + this.year | 0;
  }
  ISO$DateStruct.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'DateStruct',
    interfaces: []
  };
  function ISO$ISO$DateStruct_init(s, $this) {
    $this = $this || Object.create(ISO$DateStruct.prototype);
    ISO$DateStruct.call($this, readU8_0(s), readU8_0(s), readU8_0(s), readU8_0(s), readU8_0(s), readU8_0(s), readU8_0(s));
    return $this;
  }
  ISO$DateStruct.prototype.component1 = function () {
    return this.year;
  };
  ISO$DateStruct.prototype.component2 = function () {
    return this.month;
  };
  ISO$DateStruct.prototype.component3 = function () {
    return this.day;
  };
  ISO$DateStruct.prototype.component4 = function () {
    return this.hour;
  };
  ISO$DateStruct.prototype.component5 = function () {
    return this.minute;
  };
  ISO$DateStruct.prototype.component6 = function () {
    return this.second;
  };
  ISO$DateStruct.prototype.component7 = function () {
    return this.offset;
  };
  ISO$DateStruct.prototype.copy_ui44o2$ = function (year, month, day, hour, minute, second, offset) {
    return new ISO$DateStruct(year === void 0 ? this.year : year, month === void 0 ? this.month : month, day === void 0 ? this.day : day, hour === void 0 ? this.hour : hour, minute === void 0 ? this.minute : minute, second === void 0 ? this.second : second, offset === void 0 ? this.offset : offset);
  };
  ISO$DateStruct.prototype.toString = function () {
    return 'DateStruct(year=' + Kotlin.toString(this.year) + (', month=' + Kotlin.toString(this.month)) + (', day=' + Kotlin.toString(this.day)) + (', hour=' + Kotlin.toString(this.hour)) + (', minute=' + Kotlin.toString(this.minute)) + (', second=' + Kotlin.toString(this.second)) + (', offset=' + Kotlin.toString(this.offset)) + ')';
  };
  ISO$DateStruct.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.year) | 0;
    result = result * 31 + Kotlin.hashCode(this.month) | 0;
    result = result * 31 + Kotlin.hashCode(this.day) | 0;
    result = result * 31 + Kotlin.hashCode(this.hour) | 0;
    result = result * 31 + Kotlin.hashCode(this.minute) | 0;
    result = result * 31 + Kotlin.hashCode(this.second) | 0;
    result = result * 31 + Kotlin.hashCode(this.offset) | 0;
    return result;
  };
  ISO$DateStruct.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.year, other.year) && Kotlin.equals(this.month, other.month) && Kotlin.equals(this.day, other.day) && Kotlin.equals(this.hour, other.hour) && Kotlin.equals(this.minute, other.minute) && Kotlin.equals(this.second, other.second) && Kotlin.equals(this.offset, other.offset)))));
  };
  function ISO$DirectoryRecord(length, extendedAttributeLength, extent, size, date, flags, fileUnitSize, interleave, volumeSequenceNumber, rawName) {
    ISO$DirectoryRecord$Companion_getInstance();
    this.length = length;
    this.extendedAttributeLength = extendedAttributeLength;
    this.extent = extent;
    this.size = size;
    this.date = date;
    this.flags = flags;
    this.fileUnitSize = fileUnitSize;
    this.interleave = interleave;
    this.volumeSequenceNumber = volumeSequenceNumber;
    this.rawName = rawName;
    this.name = substringBefore(this.rawName, 59);
    this.offset = Kotlin.Long.fromInt(this.extent).multiply(Kotlin.Long.fromInt(2048));
    this.isDirectory = (this.flags & 2) !== 0;
  }
  function ISO$DirectoryRecord$Companion() {
    ISO$DirectoryRecord$Companion_instance = this;
  }
  ISO$DirectoryRecord$Companion.prototype.invoke_39qel5$ = function (_s) {
    var length = readU8_0(_s);
    if (length <= 0) {
      return null;
    }
     else {
      var s = readStream_2(_s, Kotlin.Long.fromInt(length - 1 | 0));
      return new ISO$DirectoryRecord(length, readU8_0(s), ISO_getInstance().readU32_le_be_ucmi9i$(s), ISO_getInstance().readU32_le_be_ucmi9i$(s), ISO$ISO$DateStruct_init(s), readU8_0(s), readU8_0(s), readU8_0(s), ISO_getInstance().readU16_le_be_ucmi9i$(s), ISO_getInstance().readTextWithLength_ucmi9i$(s));
    }
  };
  ISO$DirectoryRecord$Companion.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var ISO$DirectoryRecord$Companion_instance = null;
  function ISO$DirectoryRecord$Companion_getInstance() {
    if (ISO$DirectoryRecord$Companion_instance === null) {
      new ISO$DirectoryRecord$Companion();
    }
    return ISO$DirectoryRecord$Companion_instance;
  }
  ISO$DirectoryRecord.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'DirectoryRecord',
    interfaces: []
  };
  ISO$DirectoryRecord.prototype.component1 = function () {
    return this.length;
  };
  ISO$DirectoryRecord.prototype.component2 = function () {
    return this.extendedAttributeLength;
  };
  ISO$DirectoryRecord.prototype.component3 = function () {
    return this.extent;
  };
  ISO$DirectoryRecord.prototype.component4 = function () {
    return this.size;
  };
  ISO$DirectoryRecord.prototype.component5 = function () {
    return this.date;
  };
  ISO$DirectoryRecord.prototype.component6 = function () {
    return this.flags;
  };
  ISO$DirectoryRecord.prototype.component7 = function () {
    return this.fileUnitSize;
  };
  ISO$DirectoryRecord.prototype.component8 = function () {
    return this.interleave;
  };
  ISO$DirectoryRecord.prototype.component9 = function () {
    return this.volumeSequenceNumber;
  };
  ISO$DirectoryRecord.prototype.component10 = function () {
    return this.rawName;
  };
  ISO$DirectoryRecord.prototype.copy_14wb7r$ = function (length, extendedAttributeLength, extent, size, date, flags, fileUnitSize, interleave, volumeSequenceNumber, rawName) {
    return new ISO$DirectoryRecord(length === void 0 ? this.length : length, extendedAttributeLength === void 0 ? this.extendedAttributeLength : extendedAttributeLength, extent === void 0 ? this.extent : extent, size === void 0 ? this.size : size, date === void 0 ? this.date : date, flags === void 0 ? this.flags : flags, fileUnitSize === void 0 ? this.fileUnitSize : fileUnitSize, interleave === void 0 ? this.interleave : interleave, volumeSequenceNumber === void 0 ? this.volumeSequenceNumber : volumeSequenceNumber, rawName === void 0 ? this.rawName : rawName);
  };
  ISO$DirectoryRecord.prototype.toString = function () {
    return 'DirectoryRecord(length=' + Kotlin.toString(this.length) + (', extendedAttributeLength=' + Kotlin.toString(this.extendedAttributeLength)) + (', extent=' + Kotlin.toString(this.extent)) + (', size=' + Kotlin.toString(this.size)) + (', date=' + Kotlin.toString(this.date)) + (', flags=' + Kotlin.toString(this.flags)) + (', fileUnitSize=' + Kotlin.toString(this.fileUnitSize)) + (', interleave=' + Kotlin.toString(this.interleave)) + (', volumeSequenceNumber=' + Kotlin.toString(this.volumeSequenceNumber)) + (', rawName=' + Kotlin.toString(this.rawName)) + ')';
  };
  ISO$DirectoryRecord.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.length) | 0;
    result = result * 31 + Kotlin.hashCode(this.extendedAttributeLength) | 0;
    result = result * 31 + Kotlin.hashCode(this.extent) | 0;
    result = result * 31 + Kotlin.hashCode(this.size) | 0;
    result = result * 31 + Kotlin.hashCode(this.date) | 0;
    result = result * 31 + Kotlin.hashCode(this.flags) | 0;
    result = result * 31 + Kotlin.hashCode(this.fileUnitSize) | 0;
    result = result * 31 + Kotlin.hashCode(this.interleave) | 0;
    result = result * 31 + Kotlin.hashCode(this.volumeSequenceNumber) | 0;
    result = result * 31 + Kotlin.hashCode(this.rawName) | 0;
    return result;
  };
  ISO$DirectoryRecord.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.length, other.length) && Kotlin.equals(this.extendedAttributeLength, other.extendedAttributeLength) && Kotlin.equals(this.extent, other.extent) && Kotlin.equals(this.size, other.size) && Kotlin.equals(this.date, other.date) && Kotlin.equals(this.flags, other.flags) && Kotlin.equals(this.fileUnitSize, other.fileUnitSize) && Kotlin.equals(this.interleave, other.interleave) && Kotlin.equals(this.volumeSequenceNumber, other.volumeSequenceNumber) && Kotlin.equals(this.rawName, other.rawName)))));
  };
  ISO.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'ISO',
    interfaces: []
  };
  var ISO_instance = null;
  function ISO_getInstance() {
    if (ISO_instance === null) {
      new ISO();
    }
    return ISO_instance;
  }
  function JailVfs$ObjectLiteral(closure$jailRoot) {
    this.closure$jailRoot = closure$jailRoot;
    Vfs$Proxy.call(this);
    this.baseJail = VfsUtil_getInstance().normalize_61zpoe$(closure$jailRoot.path);
  }
  JailVfs$ObjectLiteral.prototype.access_61zpoe$ = function (path, continuation) {
    return this.closure$jailRoot.get_61zpoe$(trim(VfsUtil_getInstance().normalize_61zpoe$(path), Kotlin.charArrayOf(47)));
  };
  JailVfs$ObjectLiteral.prototype.transform_phxig4$ = function (out, continuation) {
    var outPath = VfsUtil_getInstance().normalize_61zpoe$(out.path);
    if (!startsWith_0(outPath, this.baseJail))
      throw new UnsupportedOperationException('Jail not base root : ' + out.path + ' | ' + this.baseJail);
    var tmp$ = this.file_61zpoe$;
    var startIndex = this.baseJail.length;
    return tmp$.call(this, outPath.substring(startIndex));
  };
  Object.defineProperty(JailVfs$ObjectLiteral.prototype, 'absolutePath', {
    get: function () {
      return this.closure$jailRoot.absolutePath;
    }
  });
  JailVfs$ObjectLiteral.prototype.toString = function () {
    return 'JailVfs(' + this.closure$jailRoot + ')';
  };
  JailVfs$ObjectLiteral.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    interfaces: [Vfs$Proxy]
  };
  function JailVfs(jailRoot) {
    return (new JailVfs$ObjectLiteral(jailRoot)).root;
  }
  function LocalVfs() {
    LocalVfs$Companion_getInstance();
    Vfs.call(this);
  }
  function LocalVfs$Companion() {
    LocalVfs$Companion_instance = this;
  }
  LocalVfs$Companion.prototype.get_61zpoe$ = function (base) {
    return LocalVfs_0(base);
  };
  LocalVfs$Companion.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var LocalVfs$Companion_instance = null;
  function LocalVfs$Companion_getInstance() {
    if (LocalVfs$Companion_instance === null) {
      new LocalVfs$Companion();
    }
    return LocalVfs$Companion_instance;
  }
  LocalVfs.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'LocalVfs',
    interfaces: [Vfs]
  };
  function LocalVfs_0(base) {
    return new VfsFile(get_localVfsProvider().invoke(), base);
  }
  function TempVfs() {
    return LocalVfs_0(tmpdir);
  }
  function JailedLocalVfs(base) {
    return LocalVfs_0(base).jail();
  }
  function CacheVfs() {
    return LocalVfs_0(get_localVfsProvider().getCacheFolder()).jail();
  }
  function ExternalStorageVfs() {
    return LocalVfs_0(get_localVfsProvider().getExternalStorageFolder()).jail();
  }
  function UserHomeVfs() {
    return LocalVfs_0(get_localVfsProvider().getExternalStorageFolder()).jail();
  }
  function LocalVfsProvider() {
  }
  LocalVfsProvider.prototype.getCacheFolder = function () {
    return tmpdir;
  };
  LocalVfsProvider.prototype.getExternalStorageFolder = function () {
    return tmpdir;
  };
  LocalVfsProvider.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'LocalVfsProvider',
    interfaces: []
  };
  function LogVfs(parent) {
    Vfs$Proxy.call(this);
    this.parent = parent;
    this.log = ArrayList_init();
    this.modifiedFiles = LinkedHashSet_init();
  }
  Object.defineProperty(LogVfs.prototype, 'logstr', {
    get: function () {
      return this.log.toString();
    }
  });
  LogVfs.prototype.access_61zpoe$ = function (path, continuation) {
    return this.parent.get_61zpoe$(path);
  };
  LogVfs.prototype.exec_trzgun$$default = function (path, cmdAndArgs, env, handler, continuation) {
    var $receiver = this.log;
    var element = 'exec(' + path + ', ' + cmdAndArgs + ', ' + env + ', ' + handler + ')';
    $receiver.add_11rb$(element);
    return this.exec_trzgun$(path, cmdAndArgs, env, handler, continuation, Vfs$Proxy.prototype.exec_trzgun$$default.bind(this));
  };
  function LogVfs$open$ObjectLiteral(closure$base, this$LogVfs, closure$path) {
    this.closure$base = closure$base;
    this.this$LogVfs = this$LogVfs;
    this.closure$path = closure$path;
    AsyncStreamBase.call(this);
  }
  LogVfs$open$ObjectLiteral.prototype.read_4m9kcn$ = function (position, buffer, offset, len, continuation) {
    this.closure$base.position = position;
    return this.closure$base.read_mj6st8$(buffer, offset, len, continuation);
  };
  LogVfs$open$ObjectLiteral.prototype.write_4m9kcn$ = function (position_0, buffer_0, offset_0, len_0, continuation_0, suspended) {
    var instance = new Coroutine$write_4m9kcn$_1(this, position_0, buffer_0, offset_0, len_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$write_4m9kcn$_1($this, position_0, buffer_0, offset_0, len_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$$receiver = void 0;
    this.local$element = void 0;
    this.local$position = position_0;
    this.local$buffer = buffer_0;
    this.local$offset = offset_0;
    this.local$len = len_0;
  }
  Coroutine$write_4m9kcn$_1.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$write_4m9kcn$_1.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$write_4m9kcn$_1.prototype.constructor = Coroutine$write_4m9kcn$_1;
  Coroutine$write_4m9kcn$_1.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.$this.closure$base.position = this.local$position;
            this.state_0 = 2;
            this.result_0 = this.$this.closure$base.write_mj6st8$(this.local$buffer, this.local$offset, this.local$len, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$$receiver = this.$this.this$LogVfs.modifiedFiles;
            this.local$element = this.$this.closure$path;
            this.local$$receiver.add_11rb$(this.local$element);
            return;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  LogVfs$open$ObjectLiteral.prototype.setLength_s8cxhz$ = function (value_0, continuation_0, suspended) {
    var instance = new Coroutine$setLength_s8cxhz$_0(this, value_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$setLength_s8cxhz$_0($this, value_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$$receiver = void 0;
    this.local$element = void 0;
    this.local$value = value_0;
  }
  Coroutine$setLength_s8cxhz$_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$setLength_s8cxhz$_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$setLength_s8cxhz$_0.prototype.constructor = Coroutine$setLength_s8cxhz$_0;
  Coroutine$setLength_s8cxhz$_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.closure$base.setLength_s8cxhz$(this.local$value, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$$receiver = this.$this.this$LogVfs.modifiedFiles;
            this.local$element = this.$this.closure$path;
            this.local$$receiver.add_11rb$(this.local$element);
            return;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  LogVfs$open$ObjectLiteral.prototype.getLength = function (continuation) {
    return this.closure$base.getLength(continuation);
  };
  LogVfs$open$ObjectLiteral.prototype.close = function (continuation) {
    return this.closure$base.close(continuation);
  };
  LogVfs$open$ObjectLiteral.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    interfaces: [AsyncStreamBase]
  };
  LogVfs.prototype.open_j4ip3x$ = function (path_0, mode_0, continuation_0, suspended) {
    var instance = new Coroutine$open_j4ip3x$(this, path_0, mode_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$open_j4ip3x$($this, path_0, mode_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$$receiver = void 0;
    this.local$element = void 0;
    this.local$base = void 0;
    this.local$path = path_0;
    this.local$mode = mode_0;
  }
  Coroutine$open_j4ip3x$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$open_j4ip3x$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$open_j4ip3x$.prototype.constructor = Coroutine$open_j4ip3x$;
  Coroutine$open_j4ip3x$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$$receiver = this.$this.log;
            this.local$element = 'open(' + this.local$path + ', ' + this.local$mode + ')';
            this.local$$receiver.add_11rb$(this.local$element);
            this.state_0 = 2;
            this.result_0 = Vfs$Proxy.prototype.open_j4ip3x$.call(this.$this, this.local$path, this.local$mode, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$base = this.result_0;
            return toAsyncStream_0(new LogVfs$open$ObjectLiteral(this.local$base, this.$this, this.local$path));
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  LogVfs.prototype.readRange_fmne7s$ = function (path, range, continuation) {
    var $receiver = this.log;
    var element = 'readRange(' + path + ', ' + range + ')';
    $receiver.add_11rb$(element);
    return Vfs$Proxy.prototype.readRange_fmne7s$.call(this, path, range, continuation);
  };
  LogVfs.prototype.put_3dniav$$default = function (path, content, attributes, continuation) {
    this.modifiedFiles.add_11rb$(path);
    var $receiver = this.log;
    var element = 'put(' + path + ', ' + content + ', ' + attributes + ')';
    $receiver.add_11rb$(element);
    return this.put_3dniav$(path, content, attributes, continuation, Vfs$Proxy.prototype.put_3dniav$$default.bind(this));
  };
  LogVfs.prototype.setSize_4wgjuj$ = function (path_0, size_0, continuation_0, suspended) {
    var instance = new Coroutine$setSize_4wgjuj$(this, path_0, size_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$setSize_4wgjuj$($this, path_0, size_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$$receiver = void 0;
    this.local$element = void 0;
    this.local$path = path_0;
    this.local$size = size_0;
  }
  Coroutine$setSize_4wgjuj$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$setSize_4wgjuj$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$setSize_4wgjuj$.prototype.constructor = Coroutine$setSize_4wgjuj$;
  Coroutine$setSize_4wgjuj$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.$this.modifiedFiles.add_11rb$(this.local$path);
            this.local$$receiver = this.$this.log;
            this.local$element = 'setSize(' + this.local$path + ', ' + this.local$size + ')';
            this.local$$receiver.add_11rb$(this.local$element);
            this.state_0 = 2;
            this.result_0 = Vfs$Proxy.prototype.setSize_4wgjuj$.call(this.$this, this.local$path, this.local$size, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  LogVfs.prototype.stat_61zpoe$ = function (path, continuation) {
    var $receiver = this.log;
    var element = 'stat(' + path + ')';
    $receiver.add_11rb$(element);
    return Vfs$Proxy.prototype.stat_61zpoe$.call(this, path, continuation);
  };
  LogVfs.prototype.list_61zpoe$ = function (path, continuation) {
    var $receiver = this.log;
    var element = 'list(' + path + ')';
    $receiver.add_11rb$(element);
    return Vfs$Proxy.prototype.list_61zpoe$.call(this, path, continuation);
  };
  LogVfs.prototype.delete_61zpoe$ = function (path, continuation) {
    this.modifiedFiles.add_11rb$(path);
    var $receiver = this.log;
    var element = 'delete(' + path + ')';
    $receiver.add_11rb$(element);
    return Vfs$Proxy.prototype.delete_61zpoe$.call(this, path, continuation);
  };
  LogVfs.prototype.setAttributes_2aqdj1$ = function (path_0, attributes_0, continuation_0, suspended) {
    var instance = new Coroutine$setAttributes_2aqdj1$(this, path_0, attributes_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$setAttributes_2aqdj1$($this, path_0, attributes_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$$receiver = void 0;
    this.local$element = void 0;
    this.local$path = path_0;
    this.local$attributes = attributes_0;
  }
  Coroutine$setAttributes_2aqdj1$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$setAttributes_2aqdj1$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$setAttributes_2aqdj1$.prototype.constructor = Coroutine$setAttributes_2aqdj1$;
  Coroutine$setAttributes_2aqdj1$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.$this.modifiedFiles.add_11rb$(this.local$path);
            this.local$$receiver = this.$this.log;
            this.local$element = 'setAttributes(' + this.local$path + ', ' + this.local$attributes + ')';
            this.local$$receiver.add_11rb$(this.local$element);
            this.state_0 = 2;
            this.result_0 = Vfs$Proxy.prototype.setAttributes_2aqdj1$.call(this.$this, this.local$path, this.local$attributes, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  LogVfs.prototype.mkdir_2aqdj1$ = function (path, attributes, continuation) {
    this.modifiedFiles.add_11rb$(path);
    var $receiver = this.log;
    var element = 'mkdir(' + path + ', ' + attributes + ')';
    $receiver.add_11rb$(element);
    return Vfs$Proxy.prototype.mkdir_2aqdj1$.call(this, path, attributes, continuation);
  };
  LogVfs.prototype.touch_cd0evc$ = function (path_0, time_0, atime_0, continuation_0, suspended) {
    var instance = new Coroutine$touch_cd0evc$(this, path_0, time_0, atime_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$touch_cd0evc$($this, path_0, time_0, atime_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$$receiver = void 0;
    this.local$element = void 0;
    this.local$path = path_0;
    this.local$time = time_0;
    this.local$atime = atime_0;
  }
  Coroutine$touch_cd0evc$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$touch_cd0evc$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$touch_cd0evc$.prototype.constructor = Coroutine$touch_cd0evc$;
  Coroutine$touch_cd0evc$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.$this.modifiedFiles.add_11rb$(this.local$path);
            this.local$$receiver = this.$this.log;
            this.local$element = 'touch(' + this.local$path + ', ' + this.local$time + ', ' + this.local$atime + ')';
            this.local$$receiver.add_11rb$(this.local$element);
            this.state_0 = 2;
            this.result_0 = Vfs$Proxy.prototype.touch_cd0evc$.call(this.$this, this.local$path, this.local$time, this.local$atime, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  LogVfs.prototype.rename_puj7f4$ = function (src, dst, continuation) {
    this.modifiedFiles.add_11rb$(src);
    this.modifiedFiles.add_11rb$(dst);
    var $receiver = this.log;
    var element = 'rename(' + src + ', ' + dst + ')';
    $receiver.add_11rb$(element);
    return Vfs$Proxy.prototype.rename_puj7f4$.call(this, src, dst, continuation);
  };
  LogVfs.prototype.watch_gu5k8n$ = function (path, handler, continuation) {
    var $receiver = this.log;
    var element = 'watch(' + path + ')';
    $receiver.add_11rb$(element);
    return Vfs$Proxy.prototype.watch_gu5k8n$.call(this, path, handler, continuation);
  };
  LogVfs.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'LogVfs',
    interfaces: [Vfs$Proxy]
  };
  function log($receiver) {
    return (new LogVfs($receiver)).root;
  }
  function MemoryVfs(items, caseSensitive) {
    if (items === void 0)
      items = lmapOf([]);
    if (caseSensitive === void 0)
      caseSensitive = true;
    var tmp$;
    var vfs = new NodeVfs(caseSensitive);
    tmp$ = items.entries.iterator();
    while (tmp$.hasNext()) {
      var tmp$_0 = tmp$.next();
      var path = tmp$_0.key;
      var stream = tmp$_0.value;
      var info = new PathInfo(path);
      var folderNode = vfs.rootNode.access_ivxn3r$(info.folder, true);
      var fileNode = folderNode.createChild_ivxn3r$(info.basename, false);
      fileNode.stream = stream;
    }
    return vfs.root;
  }
  function MemoryVfsMix(items, caseSensitive, charset) {
    if (items === void 0)
      items = lmapOf([]);
    if (caseSensitive === void 0)
      caseSensitive = true;
    if (charset === void 0)
      charset = Charsets_getInstance().UTF_8;
    var destination = LinkedHashMap_init_0(mapCapacity(items.size));
    var tmp$;
    tmp$ = items.entries.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      var tmp$_0 = destination.put_xwzc9p$;
      var tmp$_1 = element.key;
      var transform$result;
      var v = element.value;
      if (Kotlin.isType(v, SyncStream)) {
        transform$result = toAsync(v);
      }
       else if (Kotlin.isByteArray(v)) {
        transform$result = openAsync(v);
      }
       else if (typeof v === 'string') {
        transform$result = openAsync_0(v, charset);
      }
       else {
        transform$result = openAsync(toByteArray(v.toString(), charset));
      }
      tmp$_0.call(destination, tmp$_1, transform$result);
    }
    return MemoryVfs(destination, caseSensitive);
  }
  function MemoryVfsMix_0(items, caseSensitive, charset) {
    if (caseSensitive === void 0)
      caseSensitive = true;
    if (charset === void 0)
      charset = Charsets_getInstance().UTF_8;
    var destination = ArrayList_init(items.length);
    var tmp$;
    for (tmp$ = 0; tmp$ !== items.length; ++tmp$) {
      var item = items[tmp$];
      var tmp$_0 = destination.add_11rb$;
      var key = item.component1()
      , value = item.component2();
      var tmp$_1;
      if (Kotlin.isType(value, SyncStream))
        tmp$_1 = toAsync(value);
      else if (Kotlin.isByteArray(value))
        tmp$_1 = openAsync(value);
      else if (typeof value === 'string')
        tmp$_1 = openAsync_0(value, charset);
      else
        tmp$_1 = openAsync(toByteArray(value.toString(), charset));
      tmp$_0.call(destination, to(key, tmp$_1));
    }
    return MemoryVfs(toMap(destination), caseSensitive);
  }
  function MergedVfs(vfsList) {
    if (vfsList === void 0) {
      vfsList = emptyList();
    }
    Vfs$Proxy.call(this);
    this.vfsList = ArrayList_init_0(vfsList);
  }
  MergedVfs.prototype.access_61zpoe$ = function (path_0, continuation_0, suspended) {
    var instance = new Coroutine$access_61zpoe$(this, path_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$access_61zpoe$($this, path_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$tmp$ = void 0;
    this.local$$receiver = void 0;
    this.local$destination = void 0;
    this.local$tmp$_0 = void 0;
    this.local$item = void 0;
    this.local$tmp$result = void 0;
    this.local$tmp$_1 = void 0;
    this.local$element = void 0;
    this.local$closure$continuation = void 0;
    this.local$path = path_0;
  }
  Coroutine$access_61zpoe$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$access_61zpoe$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$access_61zpoe$.prototype.constructor = Coroutine$access_61zpoe$;
  Coroutine$access_61zpoe$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.$this.vfsList.size === 1) {
              return first_0(this.$this.vfsList).get_61zpoe$(this.local$path);
            }
             else {
              this.local$$receiver = this.$this.vfsList;
              this.local$destination = ArrayList_init(collectionSizeOrDefault(this.local$$receiver, 10));
              this.local$tmp$_0 = this.local$$receiver.iterator();
              while (this.local$tmp$_0.hasNext()) {
                this.local$item = this.local$tmp$_0.next();
                this.local$destination.add_11rb$(this.local$item.get_61zpoe$(this.local$path));
              }
              this.state_0 = 2;
              continue;
            }

          case 1:
            throw this.exception_0;
          case 2:
            this.local$tmp$_1 = this.local$destination.iterator();
            this.state_0 = 3;
            continue;
          case 3:
            if (!this.local$tmp$_1.hasNext()) {
              this.state_0 = 6;
              continue;
            }

            this.local$element = this.local$tmp$_1.next();
            this.local$closure$continuation = this;
            this.state_0 = 4;
            this.result_0 = this.local$element.exists(this.local$closure$continuation);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 4:
            if (this.local$closure$continuation.result_0) {
              this.local$tmp$result = this.local$element;
              this.state_0 = 7;
              continue;
            }
             else {
              this.state_0 = 5;
              continue;
            }

          case 5:
            this.state_0 = 3;
            continue;
          case 6:
            this.local$tmp$result = null;
            if (!false) {
              this.state_0 = 7;
              continue;
            }

            this.state_0 = 2;
            continue;
          case 7:
            return (this.local$tmp$ = this.local$tmp$result) != null ? this.local$tmp$ : first_0(this.$this.vfsList).get_61zpoe$(this.local$path);
          case 8:
            return;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  MergedVfs.prototype.stat_61zpoe$ = function (path_0, continuation_0, suspended) {
    var instance = new Coroutine$stat_61zpoe$(this, path_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$stat_61zpoe$($this, path_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 10;
    this.$this = $this;
    this.local$tmp$ = void 0;
    this.local$tmp$_0 = void 0;
    this.local$vfs = void 0;
    this.local$show = void 0;
    this.local$ignoreErrors$result = void 0;
    this.local$closure$continuation = void 0;
    this.local$result = void 0;
    this.local$path = path_0;
    this.local$e = void 0;
  }
  Coroutine$stat_61zpoe$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$stat_61zpoe$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$stat_61zpoe$.prototype.constructor = Coroutine$stat_61zpoe$;
  Coroutine$stat_61zpoe$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$tmp$ = this.$this.vfsList.iterator();
            this.state_0 = 1;
            continue;
          case 1:
            if (!this.local$tmp$.hasNext()) {
              this.state_0 = 11;
              continue;
            }

            this.local$vfs = this.local$tmp$.next();
            this.local$show = void 0;
            this.state_0 = 2;
            continue;
          case 2:
            this.local$show = false;
            this.exceptionState_0 = 4;
            this.local$closure$continuation = this;
            this.state_0 = 3;
            this.result_0 = this.local$vfs.get_61zpoe$(this.local$path).stat(this.local$closure$continuation);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            this.local$ignoreErrors$result = this.local$closure$continuation.result_0;
            this.exceptionState_0 = 10;
            this.state_0 = 6;
            continue;
          case 4:
            this.exceptionState_0 = 10;
            this.local$e = this.exception_0;
            if (Kotlin.isType(this.local$e, Throwable)) {
              if (this.local$show)
                printStackTrace(this.local$e);
              this.local$ignoreErrors$result = null;
              this.exceptionState_0 = 4;
              this.state_0 = 7;
              continue;
            }
             else {
              throw this.local$e;
            }

          case 5:
            this.state_0 = 6;
            continue;
          case 6:
            if (!false) {
              this.state_0 = 7;
              continue;
            }

            this.state_0 = 2;
            continue;
          case 7:
            this.local$tmp$_0 = this.local$ignoreErrors$result;
            if (this.local$tmp$_0 == null) {
              this.state_0 = 1;
              continue;
            }
             else {
              this.state_0 = 8;
              continue;
            }

          case 8:
            this.local$result = this.local$tmp$_0;
            if (this.local$result.exists) {
              return this.local$result.copy_jho7dq$(this.$this.file_61zpoe$(this.local$path));
            }
             else {
              this.state_0 = 9;
              continue;
            }

          case 9:
            this.state_0 = 1;
            continue;
          case 10:
            throw this.exception_0;
          case 11:
            return this.$this.createNonExistsStat_4w9ihe$(this.local$path);
        }
      }
       catch (e) {
        if (this.state_0 === 10)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function MergedVfs$list$lambda$lambda(this$MergedVfs_0, closure$path_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$MergedVfs$list$lambda$lambda(this$MergedVfs_0, closure$path_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$MergedVfs$list$lambda$lambda(this$MergedVfs_0, closure$path_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 18;
    this.local$this$MergedVfs = this$MergedVfs_0;
    this.local$closure$path = closure$path_0;
    this.local$tmp$ = void 0;
    this.local$tmp$_0 = void 0;
    this.local$tmp$_1 = void 0;
    this.local$emitted = void 0;
    this.local$vfs = void 0;
    this.local$show = void 0;
    this.local$ignoreErrors$result = void 0;
    this.local$closure$path_0 = void 0;
    this.local$closure$continuation = void 0;
    this.local$items = void 0;
    this.local$v = void 0;
    this.local$element = void 0;
    this.local$$receiver = $receiver_0;
    this.local$e = void 0;
    this.local$e_0 = void 0;
  }
  Coroutine$MergedVfs$list$lambda$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$MergedVfs$list$lambda$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$MergedVfs$list$lambda$lambda.prototype.constructor = Coroutine$MergedVfs$list$lambda$lambda;
  Coroutine$MergedVfs$list$lambda$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$emitted = LinkedHashSet_init();
            this.local$tmp$ = this.local$this$MergedVfs.vfsList.iterator();
            this.state_0 = 1;
            continue;
          case 1:
            if (!this.local$tmp$.hasNext()) {
              this.state_0 = 19;
              continue;
            }

            this.local$vfs = this.local$tmp$.next();
            this.local$show = void 0;
            this.state_0 = 2;
            continue;
          case 2:
            this.local$show = false;
            this.exceptionState_0 = 4;
            this.local$closure$path_0 = this.local$closure$path;
            this.local$closure$continuation = this;
            this.state_0 = 3;
            this.result_0 = this.local$vfs.get_61zpoe$(this.local$closure$path_0).list(this.local$closure$continuation);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            this.local$ignoreErrors$result = this.local$closure$continuation.result_0;
            this.exceptionState_0 = 18;
            this.state_0 = 6;
            continue;
          case 4:
            this.exceptionState_0 = 18;
            this.local$e = this.exception_0;
            if (Kotlin.isType(this.local$e, Throwable)) {
              if (this.local$show)
                printStackTrace(this.local$e);
              this.local$ignoreErrors$result = null;
              this.exceptionState_0 = 4;
              this.state_0 = 7;
              continue;
            }
             else {
              throw this.local$e;
            }

          case 5:
            this.state_0 = 6;
            continue;
          case 6:
            if (!false) {
              this.state_0 = 7;
              continue;
            }

            this.state_0 = 2;
            continue;
          case 7:
            this.local$tmp$_0 = this.local$ignoreErrors$result;
            if (this.local$tmp$_0 == null) {
              this.state_0 = 1;
              continue;
            }
             else {
              this.state_0 = 8;
              continue;
            }

          case 8:
            this.local$items = this.local$tmp$_0;
            this.exceptionState_0 = 16;
            this.local$tmp$_1 = this.local$items.iterator();
            this.state_0 = 9;
            continue;
          case 9:
            this.state_0 = 10;
            this.result_0 = this.local$tmp$_1.hasNext(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 10:
            if (!this.result_0) {
              this.state_0 = 15;
              continue;
            }
             else {
              this.state_0 = 11;
              continue;
            }

          case 11:
            this.state_0 = 12;
            this.result_0 = this.local$tmp$_1.next(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 12:
            this.local$v = this.result_0;
            if (!this.local$emitted.contains_11rb$(this.local$v.basename)) {
              this.local$element = this.local$v.basename;
              this.local$emitted.add_11rb$(this.local$element);
              this.state_0 = 13;
              this.result_0 = this.local$$receiver.yield_11rb$(this.local$this$MergedVfs.file_61zpoe$(this.local$closure$path + '/' + this.local$v.basename), this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              break;
            }
             else {
              this.state_0 = 14;
              continue;
            }

          case 13:
            this.state_0 = 14;
            continue;
          case 14:
            this.state_0 = 9;
            continue;
          case 15:
            this.exceptionState_0 = 18;
            this.state_0 = 17;
            continue;
          case 16:
            this.exceptionState_0 = 18;
            this.local$e_0 = this.exception_0;
            if (!Kotlin.isType(this.local$e_0, Throwable))
              throw this.local$e_0;
            this.state_0 = 17;
            continue;
          case 17:
            this.state_0 = 1;
            continue;
          case 18:
            throw this.exception_0;
          case 19:
            return Unit;
        }
      }
       catch (e) {
        if (this.state_0 === 18)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function MergedVfs$list$lambda(this$MergedVfs_0, closure$path_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$MergedVfs$list$lambda(this$MergedVfs_0, closure$path_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$MergedVfs$list$lambda(this$MergedVfs_0, closure$path_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$this$MergedVfs = this$MergedVfs_0;
    this.local$closure$path = closure$path_0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$MergedVfs$list$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$MergedVfs$list$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$MergedVfs$list$lambda.prototype.constructor = Coroutine$MergedVfs$list$lambda;
  Coroutine$MergedVfs$list$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            return asyncGenerate(this.local$$receiver, MergedVfs$list$lambda$lambda(this.local$this$MergedVfs, this.local$closure$path));
          case 1:
            throw this.exception_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  MergedVfs.prototype.list_61zpoe$ = function (path_0, continuation_0, suspended) {
    var instance = new Coroutine$list_61zpoe$_0(this, path_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$list_61zpoe$_0($this, path_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$path = path_0;
  }
  Coroutine$list_61zpoe$_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$list_61zpoe$_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$list_61zpoe$_0.prototype.constructor = Coroutine$list_61zpoe$_0;
  Coroutine$list_61zpoe$_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = withCoroutineContext(MergedVfs$list$lambda(this.$this, this.local$path), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  MergedVfs.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'MergedVfs',
    interfaces: [Vfs$Proxy]
  };
  function MimeType(mime, exts) {
    MimeType$Companion_getInstance();
    this.mime = mime;
    this.exts = exts;
  }
  function MimeType$Companion() {
    MimeType$Companion_instance = this;
    this.APPLICATION_OCTET_STREAM = new MimeType('application/octet-stream', listOf('bin'));
    this.APPLICATION_JSON = new MimeType('application/json', listOf('json'));
    this.IMAGE_PNG = new MimeType('image/png', listOf('png'));
    this.IMAGE_JPEG = new MimeType('image/jpeg', listOf_0(['jpg', 'jpeg']));
    this.IMAGE_GIF = new MimeType('image/gif', listOf('gif'));
    this.TEXT_HTML = new MimeType('text/html', listOf_0(['htm', 'html']));
    this.TEXT_PLAIN = new MimeType('text/plain', listOf_0(['txt', 'text']));
    this.TEXT_CSS = new MimeType('text/css', listOf('css'));
    this.TEXT_JS = new MimeType('application/javascript', listOf('js'));
    this.byExtensions_0 = lmapOf([]);
    this.register_5fr5ga$([this.APPLICATION_OCTET_STREAM, this.APPLICATION_JSON, this.IMAGE_PNG, this.IMAGE_JPEG, this.IMAGE_GIF, this.TEXT_HTML, this.TEXT_PLAIN, this.TEXT_CSS, this.TEXT_JS]);
  }
  MimeType$Companion.prototype.register_4fxsh5$ = function (mimeType) {
    var tmp$;
    tmp$ = mimeType.exts.iterator();
    while (tmp$.hasNext()) {
      var ext = tmp$.next();
      this.byExtensions_0.put_xwzc9p$(ext, mimeType);
    }
  };
  MimeType$Companion.prototype.register_5fr5ga$ = function (mimeTypes) {
    var tmp$;
    for (tmp$ = 0; tmp$ !== mimeTypes.length; ++tmp$) {
      var mt = mimeTypes[tmp$];
      this.register_4fxsh5$(mt);
    }
  };
  MimeType$Companion.prototype.register_60y5e1$ = function (mime, exsts) {
    var tmp$ = this.register_4fxsh5$;
    var destination = ArrayList_init(exsts.length);
    var tmp$_0;
    for (tmp$_0 = 0; tmp$_0 !== exsts.length; ++tmp$_0) {
      var item = exsts[tmp$_0];
      destination.add_11rb$(item.toLowerCase());
    }
    tmp$.call(this, new MimeType(mime, destination));
  };
  MimeType$Companion.prototype.getByExtension_xbj4sl$ = function (ext, default_0) {
    if (default_0 === void 0)
      default_0 = this.APPLICATION_OCTET_STREAM;
    var tmp$;
    return (tmp$ = this.byExtensions_0.get_11rb$(ext.toLowerCase())) != null ? tmp$ : default_0;
  };
  MimeType$Companion.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var MimeType$Companion_instance = null;
  function MimeType$Companion_getInstance() {
    if (MimeType$Companion_instance === null) {
      new MimeType$Companion();
    }
    return MimeType$Companion_instance;
  }
  MimeType.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'MimeType',
    interfaces: [Vfs$Attribute]
  };
  function mimeType($receiver) {
    return MimeType$Companion_getInstance().getByExtension_xbj4sl$($receiver.extensionLC);
  }
  function MountableVfs$lambda$ObjectLiteral() {
    Vfs$Proxy.call(this);
    this.mounts_0 = ArrayList_init();
  }
  MountableVfs$lambda$ObjectLiteral.prototype.mount_hem4eq$ = function (folder, file) {
    this._unmount_0(folder);
    var $receiver = this.mounts_0;
    var element = to(VfsUtil_getInstance().normalize_61zpoe$(folder), file);
    $receiver.add_11rb$(element);
    this.resort_0();
    return this;
  };
  MountableVfs$lambda$ObjectLiteral.prototype.unmount_61zpoe$ = function (folder) {
    this._unmount_0(folder);
    this.resort_0();
    return this;
  };
  function MountableVfs$lambda$ObjectLiteral$_unmount$lambda(closure$folder) {
    return function (it) {
      return Kotlin.equals(it.first, VfsUtil_getInstance().normalize_61zpoe$(closure$folder));
    };
  }
  MountableVfs$lambda$ObjectLiteral.prototype._unmount_0 = function (folder) {
    removeAll(this.mounts_0, MountableVfs$lambda$ObjectLiteral$_unmount$lambda(folder));
  };
  function MountableVfs$lambda$ObjectLiteral$resort$lambda(it) {
    return -it.first.length;
  }
  var sortWith = Kotlin.kotlin.collections.sortWith_nqfjgj$;
  var compareBy$lambda_0 = wrapFunction(function () {
    var compareValues = Kotlin.kotlin.comparisons.compareValues_s00gnj$;
    return function (closure$selector) {
      return function (a, b) {
        var selector = closure$selector;
        return compareValues(selector(a), selector(b));
      };
    };
  });
  function Comparator$ObjectLiteral_0(closure$comparison) {
    this.closure$comparison = closure$comparison;
  }
  Comparator$ObjectLiteral_0.prototype.compare = function (a, b) {
    return this.closure$comparison(a, b);
  };
  Comparator$ObjectLiteral_0.$metadata$ = {kind: Kotlin.Kind.CLASS, interfaces: [Comparator]};
  MountableVfs$lambda$ObjectLiteral.prototype.resort_0 = function () {
    var $receiver = this.mounts_0;
    if ($receiver.size > 1) {
      sortWith($receiver, new Comparator$ObjectLiteral_0(compareBy$lambda_0(MountableVfs$lambda$ObjectLiteral$resort$lambda)));
    }
  };
  MountableVfs$lambda$ObjectLiteral.prototype.access_61zpoe$ = function (path, continuation) {
    var tmp$;
    var rpath = VfsUtil_getInstance().normalize_61zpoe$(path);
    tmp$ = this.mounts_0.iterator();
    while (tmp$.hasNext()) {
      var tmp$_0 = tmp$.next();
      var base = tmp$_0.component1()
      , file = tmp$_0.component2();
      if (startsWith_0(rpath, base)) {
        var startIndex = base.length;
        return file.get_61zpoe$(rpath.substring(startIndex));
      }
    }
    throw new FileNotFoundException(path);
  };
  MountableVfs$lambda$ObjectLiteral.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    interfaces: [Mountable, Vfs$Proxy]
  };
  function MountableVfs$lambda$ObjectLiteral_0(closure$c, closure$mount) {
    this.closure$c = closure$c;
    this.closure$mount = closure$mount;
    this.context_7awl2s$_0 = closure$c.context;
  }
  Object.defineProperty(MountableVfs$lambda$ObjectLiteral_0.prototype, 'context', {
    get: function () {
      return this.context_7awl2s$_0;
    }
  });
  MountableVfs$lambda$ObjectLiteral_0.prototype.resume_11rb$ = function (value) {
    this.closure$c.resume_11rb$(this.closure$mount.root);
  };
  MountableVfs$lambda$ObjectLiteral_0.prototype.resumeWithException_tcv7n7$ = function (exception) {
    this.closure$c.resumeWithException_tcv7n7$(exception);
  };
  MountableVfs$lambda$ObjectLiteral_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    interfaces: [Continuation]
  };
  function MountableVfs$lambda(closure$callback) {
    return function (c) {
      var mount = new MountableVfs$lambda$ObjectLiteral();
      korioStartCoroutine(closure$callback, mount, new MountableVfs$lambda$ObjectLiteral_0(c, mount));
      return Unit;
    };
  }
  var korioSuspendCoroutine$lambda_4 = wrapFunction(function () {
    return function (closure$block) {
      return function (c) {
        closure$block(toEventLoop(c));
        return Unit;
      };
    };
  });
  var _korioSuspendCoroutine$lambda_8 = wrapFunction(function () {
    return function (closure$block) {
      return function (c) {
        closure$block(c);
        return Unit;
      };
    };
  });
  function suspendCoroutine$lambda_9(closure$block) {
    return function (c) {
      var safe = SafeContinuation_init(c);
      closure$block(safe);
      return safe.getResult();
    };
  }
  function MountableVfs(callback, continuation) {
    return suspendCoroutine$lambda_9(_korioSuspendCoroutine$lambda_8(korioSuspendCoroutine$lambda_4(MountableVfs$lambda(callback))))(continuation.facade);
  }
  function Mountable() {
  }
  Mountable.$metadata$ = {
    kind: Kotlin.Kind.INTERFACE,
    simpleName: 'Mountable',
    interfaces: []
  };
  function NodeVfs(caseSensitive) {
    if (caseSensitive === void 0)
      caseSensitive = true;
    Vfs.call(this);
    this.caseSensitive = caseSensitive;
    this.events = new Signal();
    this.rootNode = new NodeVfs$Node(this, '', true);
  }
  function NodeVfs$Node($outer, name, isDirectory, parent) {
    this.$outer = $outer;
    if (isDirectory === void 0)
      isDirectory = false;
    if (parent === void 0)
      parent = null;
    this.name = name;
    this.isDirectory = isDirectory;
    this.nameLC = this.name.toLowerCase();
    this.parent_gsmy8c$_0 = null;
    this.parent = parent;
    this.data = null;
    this.children = lmapOf([]);
    this.childrenLC = lmapOf([]);
    this.stream = null;
  }
  NodeVfs$Node.prototype.iterator = function () {
    return this.children.values.iterator();
  };
  Object.defineProperty(NodeVfs$Node.prototype, 'parent', {
    get: function () {
      return this.parent_gsmy8c$_0;
    },
    set: function (value) {
      var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4;
      if (this.parent_gsmy8c$_0 != null) {
        ((tmp$ = this.parent_gsmy8c$_0) != null ? tmp$ : Kotlin.throwNPE()).children.remove_11rb$(this.name);
        ((tmp$_0 = this.parent_gsmy8c$_0) != null ? tmp$_0 : Kotlin.throwNPE()).childrenLC.remove_11rb$(this.nameLC);
      }
      this.parent_gsmy8c$_0 = value;
      if ((tmp$_2 = (tmp$_1 = this.parent_gsmy8c$_0) != null ? tmp$_1.children : null) != null) {
        var key = this.name;
        tmp$_2.put_xwzc9p$(key, this);
      }
      if ((tmp$_4 = (tmp$_3 = this.parent_gsmy8c$_0) != null ? tmp$_3.childrenLC : null) != null) {
        var key_0 = this.nameLC;
        tmp$_4.put_xwzc9p$(key_0, this);
      }
    }
  });
  Object.defineProperty(NodeVfs$Node.prototype, 'root', {
    get: function () {
      var tmp$, tmp$_0;
      return (tmp$_0 = (tmp$ = this.parent) != null ? tmp$.root : null) != null ? tmp$_0 : this;
    }
  });
  NodeVfs$Node.prototype.child_61zpoe$ = function (name) {
    if (Kotlin.equals(name, '') || Kotlin.equals(name, '.'))
      return this;
    else if (Kotlin.equals(name, '..'))
      return this.parent;
    else if (this.$outer.caseSensitive) {
      return this.children.get_11rb$(name);
    }
     else {
      return this.childrenLC.get_11rb$(name.toLowerCase());
    }
  };
  NodeVfs$Node.prototype.createChild_ivxn3r$ = function (name, isDirectory) {
    if (isDirectory === void 0)
      isDirectory = false;
    return new NodeVfs$Node(this.$outer, name, isDirectory, this);
  };
  NodeVfs$Node.prototype.get_61zpoe$ = function (path) {
    return this.access_ivxn3r$(path, false);
  };
  NodeVfs$Node.prototype.access_ivxn3r$ = function (path, createFolders) {
    if (createFolders === void 0)
      createFolders = false;
    var tmp$;
    var node = startsWith(path, 47) ? this.root : this;
    tmp$ = VfsUtil_getInstance().parts_61zpoe$(path).iterator();
    while (tmp$.hasNext()) {
      var part = tmp$.next();
      var child = node.child_61zpoe$(part);
      if (child == null && createFolders)
        child = node.createChild_ivxn3r$(part, true);
      if (child == null) {
        throw new FileNotFoundException("Can't find '" + part + "' in " + path);
      }
      node = child;
    }
    return node;
  };
  NodeVfs$Node.prototype.mkdir_61zpoe$ = function (name) {
    if (this.child_61zpoe$(name) != null) {
      return false;
    }
     else {
      this.createChild_ivxn3r$(name, true);
      return true;
    }
  };
  NodeVfs$Node.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'Node',
    interfaces: [Iterable]
  };
  function NodeVfs$open$ObjectLiteral(closure$s, this$NodeVfs, closure$vfsFile) {
    this.closure$s = closure$s;
    this.this$NodeVfs = this$NodeVfs;
    this.closure$vfsFile = closure$vfsFile;
    AsyncStreamBase.call(this);
  }
  NodeVfs$open$ObjectLiteral.prototype.read_4m9kcn$ = function (position, buffer, offset, len, continuation) {
    return this.closure$s.read_4m9kcn$(position, buffer, offset, len);
  };
  NodeVfs$open$ObjectLiteral.prototype.write_4m9kcn$ = function (position, buffer, offset, len, continuation) {
    this.closure$s.write_4m9kcn$(position, buffer, offset, len);
    this.this$NodeVfs.events.invoke_11rb$(new VfsFileEvent(VfsFileEvent$Kind$MODIFIED_getInstance(), this.closure$vfsFile));
  };
  NodeVfs$open$ObjectLiteral.prototype.setLength_s8cxhz$ = function (value, continuation) {
    this.closure$s.length = value;
    this.this$NodeVfs.events.invoke_11rb$(new VfsFileEvent(VfsFileEvent$Kind$MODIFIED_getInstance(), this.closure$vfsFile));
  };
  NodeVfs$open$ObjectLiteral.prototype.getLength = function (continuation) {
    return this.closure$s.length;
  };
  NodeVfs$open$ObjectLiteral.prototype.close = function (continuation) {
    return this.closure$s.close();
  };
  NodeVfs$open$ObjectLiteral.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    interfaces: [AsyncStreamBase]
  };
  NodeVfs.prototype.open_j4ip3x$ = function (path_0, mode_0, continuation_0, suspended) {
    var instance = new Coroutine$open_j4ip3x$_0(this, path_0, mode_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$open_j4ip3x$_0($this, path_0, mode_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$tmp$ = void 0;
    this.local$tmp$_0 = void 0;
    this.local$pathInfo = void 0;
    this.local$folder = void 0;
    this.local$node = void 0;
    this.local$vfsFile = void 0;
    this.local$s = void 0;
    this.local$path = path_0;
    this.local$mode = mode_0;
  }
  Coroutine$open_j4ip3x$_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$open_j4ip3x$_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$open_j4ip3x$_0.prototype.constructor = Coroutine$open_j4ip3x$_0;
  Coroutine$open_j4ip3x$_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$pathInfo = new PathInfo(this.local$path);
            this.local$folder = this.$this.rootNode.access_ivxn3r$(this.local$pathInfo.folder);
            this.local$node = this.local$folder.child_61zpoe$(this.local$pathInfo.basename);
            this.local$vfsFile = this.$this.get_61zpoe$(this.local$path);
            if (this.local$node == null && this.local$mode.createIfNotExists) {
              this.local$node = this.local$folder.createChild_ivxn3r$(this.local$pathInfo.basename, false);
              this.local$s = MemorySyncStream().base;
              this.local$node.stream = toAsyncStream_0(new NodeVfs$open$ObjectLiteral(this.local$s, this.$this, this.local$vfsFile));
            }

            this.state_0 = 2;
            this.result_0 = (this.local$tmp$ = this.local$node != null ? this.local$node.stream : null) != null ? this.local$tmp$.clone(this) : null;
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$tmp$_0 = this.result_0;
            if (this.local$tmp$_0 == null) {
              throw new FileNotFoundException(this.local$path);
            }

            return this.local$tmp$_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  NodeVfs.prototype.stat_61zpoe$ = function (path_0, continuation_0, suspended) {
    var instance = new Coroutine$stat_61zpoe$_0(this, path_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$stat_61zpoe$_0($this, path_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 4;
    this.$this = $this;
    this.local$tmp$ = void 0;
    this.local$tmp$_0 = void 0;
    this.local$tmp$_1 = void 0;
    this.local$node = void 0;
    this.local$length = void 0;
    this.local$path = path_0;
    this.local$e = void 0;
  }
  Coroutine$stat_61zpoe$_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$stat_61zpoe$_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$stat_61zpoe$_0.prototype.constructor = Coroutine$stat_61zpoe$_0;
  Coroutine$stat_61zpoe$_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.exceptionState_0 = 2;
            this.local$node = this.$this.rootNode.access_ivxn3r$(this.local$path);
            this.state_0 = 1;
            this.result_0 = (this.local$tmp$ = this.local$node.stream) != null ? this.local$tmp$.getLength(this) : null;
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            this.local$tmp$_0 = this.result_0;
            this.local$length = this.local$tmp$_0 != null ? this.local$tmp$_0 : Kotlin.Long.ZERO;
            this.local$tmp$_1 = this.$this.createExistsStat_sjl0ub$(this.local$path, this.local$node.isDirectory, this.local$length);
            this.exceptionState_0 = 4;
            this.state_0 = 3;
            continue;
          case 2:
            this.exceptionState_0 = 4;
            this.local$e = this.exception_0;
            if (Kotlin.isType(this.local$e, Throwable)) {
              this.local$tmp$_1 = this.$this.createNonExistsStat_4w9ihe$(this.local$path);
            }
             else
              throw this.local$e;
            this.state_0 = 3;
            continue;
          case 3:
            return this.local$tmp$_1;
          case 4:
            throw this.exception_0;
        }
      }
       catch (e) {
        if (this.state_0 === 4)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function NodeVfs$list$lambda$lambda(this$NodeVfs_0, closure$path_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$NodeVfs$list$lambda$lambda(this$NodeVfs_0, closure$path_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$NodeVfs$list$lambda$lambda(this$NodeVfs_0, closure$path_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$this$NodeVfs = this$NodeVfs_0;
    this.local$closure$path = closure$path_0;
    this.local$tmp$ = void 0;
    this.local$node = void 0;
    this.local$tmp$_0 = void 0;
    this.local$name = void 0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$NodeVfs$list$lambda$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$NodeVfs$list$lambda$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$NodeVfs$list$lambda$lambda.prototype.constructor = Coroutine$NodeVfs$list$lambda$lambda;
  Coroutine$NodeVfs$list$lambda$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$node = this.local$this$NodeVfs.rootNode.get_61zpoe$(this.local$closure$path);
            this.local$tmp$ = this.local$node.children.entries.iterator();
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            if (!this.local$tmp$.hasNext()) {
              this.state_0 = 4;
              continue;
            }

            this.local$tmp$_0 = this.local$tmp$.next();
            this.local$name = this.local$tmp$_0.key;
            this.state_0 = 3;
            this.result_0 = this.local$$receiver.yield_11rb$(this.local$this$NodeVfs.file_61zpoe$(this.local$closure$path + '/' + this.local$name), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            this.state_0 = 2;
            continue;
          case 4:
            return Unit;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function NodeVfs$list$lambda(this$NodeVfs_0, closure$path_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$NodeVfs$list$lambda(this$NodeVfs_0, closure$path_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$NodeVfs$list$lambda(this$NodeVfs_0, closure$path_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$this$NodeVfs = this$NodeVfs_0;
    this.local$closure$path = closure$path_0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$NodeVfs$list$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$NodeVfs$list$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$NodeVfs$list$lambda.prototype.constructor = Coroutine$NodeVfs$list$lambda;
  Coroutine$NodeVfs$list$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            return asyncGenerate(this.local$$receiver, NodeVfs$list$lambda$lambda(this.local$this$NodeVfs, this.local$closure$path));
          case 1:
            throw this.exception_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  NodeVfs.prototype.list_61zpoe$ = function (path_0, continuation_0, suspended) {
    var instance = new Coroutine$list_61zpoe$_1(this, path_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$list_61zpoe$_1($this, path_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$path = path_0;
  }
  Coroutine$list_61zpoe$_1.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$list_61zpoe$_1.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$list_61zpoe$_1.prototype.constructor = Coroutine$list_61zpoe$_1;
  Coroutine$list_61zpoe$_1.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = withCoroutineContext(NodeVfs$list$lambda(this.$this, this.local$path), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  NodeVfs.prototype.delete_61zpoe$ = function (path, continuation) {
    var node = this.rootNode.get_61zpoe$(path);
    node.parent = null;
    this.events.invoke_11rb$(new VfsFileEvent(VfsFileEvent$Kind$DELETED_getInstance(), this.get_61zpoe$(path)));
    return true;
  };
  NodeVfs.prototype.mkdir_2aqdj1$ = function (path, attributes, continuation) {
    var pathInfo = new PathInfo(path);
    var out = this.rootNode.access_ivxn3r$(pathInfo.folder).mkdir_61zpoe$(pathInfo.basename);
    this.events.invoke_11rb$(new VfsFileEvent(VfsFileEvent$Kind$CREATED_getInstance(), this.get_61zpoe$(path)));
    return out;
  };
  NodeVfs.prototype.rename_puj7f4$ = function (src, dst, continuation) {
    if (Kotlin.equals(src, dst))
      return false;
    var dstInfo = new PathInfo(dst);
    var srcNode = this.rootNode.access_ivxn3r$(src);
    var dstFolder = this.rootNode.access_ivxn3r$(dstInfo.folder);
    srcNode.parent = dstFolder;
    this.events.invoke_11rb$(new VfsFileEvent(VfsFileEvent$Kind$RENAMED_getInstance(), this.get_61zpoe$(src), this.get_61zpoe$(dst)));
    return true;
  };
  function NodeVfs$watch$lambda(closure$handler) {
    return function (it) {
      closure$handler(it);
      return Unit;
    };
  }
  NodeVfs.prototype.watch_gu5k8n$ = function (path, handler, continuation) {
    return this.events.invoke_qlkmfe$(NodeVfs$watch$lambda(handler));
  };
  NodeVfs.prototype.toString = function () {
    return 'NodeVfs';
  };
  NodeVfs.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'NodeVfs',
    interfaces: [Vfs]
  };
  function PathInfo(fullpath) {
    this.fullpath = fullpath;
    this.fullpathNormalized = replace_0(this.fullpath, 92, 47);
    this.folder_yh3o4s$_0 = lazy(PathInfo$folder$lambda(this));
    this.folderWithSlash_ae0h9t$_0 = lazy(PathInfo$folderWithSlash$lambda(this));
    this.basename_8f2rwi$_0 = lazy(PathInfo$basename$lambda(this));
    this.pathWithoutExtension_u8ec8u$_0 = lazy(PathInfo$pathWithoutExtension$lambda(this));
    this.fullnameWithoutExtension_35ipwp$_0 = lazy(PathInfo$fullnameWithoutExtension$lambda(this));
    this.basenameWithoutExtension_ph323d$_0 = lazy(PathInfo$basenameWithoutExtension$lambda(this));
    this.fullnameWithoutCompoundExtension_k5vohg$_0 = lazy(PathInfo$fullnameWithoutCompoundExtension$lambda(this));
    this.basenameWithoutCompoundExtension_gf2d2q$_0 = lazy(PathInfo$basenameWithoutCompoundExtension$lambda(this));
    this.extension_5r19c5$_0 = lazy(PathInfo$extension$lambda(this));
    this.extensionLC_dq6g10$_0 = lazy(PathInfo$extensionLC$lambda(this));
    this.compoundExtension_e3leh2$_0 = lazy(PathInfo$compoundExtension$lambda(this));
    this.compoundExtensionLC_gy6p01$_0 = lazy(PathInfo$compoundExtensionLC$lambda(this));
  }
  Object.defineProperty(PathInfo.prototype, 'folder', {
    get: function () {
      var $receiver = this.folder_yh3o4s$_0;
      new Kotlin.PropertyMetadata('folder');
      return $receiver.value;
    }
  });
  Object.defineProperty(PathInfo.prototype, 'folderWithSlash', {
    get: function () {
      var $receiver = this.folderWithSlash_ae0h9t$_0;
      new Kotlin.PropertyMetadata('folderWithSlash');
      return $receiver.value;
    }
  });
  Object.defineProperty(PathInfo.prototype, 'basename', {
    get: function () {
      var $receiver = this.basename_8f2rwi$_0;
      new Kotlin.PropertyMetadata('basename');
      return $receiver.value;
    }
  });
  Object.defineProperty(PathInfo.prototype, 'pathWithoutExtension', {
    get: function () {
      var $receiver = this.pathWithoutExtension_u8ec8u$_0;
      new Kotlin.PropertyMetadata('pathWithoutExtension');
      return $receiver.value;
    }
  });
  PathInfo.prototype.pathWithExtension_61zpoe$ = function (ext) {
    return ext.length === 0 ? this.pathWithoutExtension : this.pathWithoutExtension + '.' + ext;
  };
  Object.defineProperty(PathInfo.prototype, 'fullnameWithoutExtension', {
    get: function () {
      var $receiver = this.fullnameWithoutExtension_35ipwp$_0;
      new Kotlin.PropertyMetadata('fullnameWithoutExtension');
      return $receiver.value;
    }
  });
  Object.defineProperty(PathInfo.prototype, 'basenameWithoutExtension', {
    get: function () {
      var $receiver = this.basenameWithoutExtension_ph323d$_0;
      new Kotlin.PropertyMetadata('basenameWithoutExtension');
      return $receiver.value;
    }
  });
  Object.defineProperty(PathInfo.prototype, 'fullnameWithoutCompoundExtension', {
    get: function () {
      var $receiver = this.fullnameWithoutCompoundExtension_k5vohg$_0;
      new Kotlin.PropertyMetadata('fullnameWithoutCompoundExtension');
      return $receiver.value;
    }
  });
  Object.defineProperty(PathInfo.prototype, 'basenameWithoutCompoundExtension', {
    get: function () {
      var $receiver = this.basenameWithoutCompoundExtension_gf2d2q$_0;
      new Kotlin.PropertyMetadata('basenameWithoutCompoundExtension');
      return $receiver.value;
    }
  });
  PathInfo.prototype.basenameWithExtension_61zpoe$ = function (ext) {
    return ext.length === 0 ? this.pathWithoutExtension : this.pathWithoutExtension + '.' + ext;
  };
  Object.defineProperty(PathInfo.prototype, 'extension', {
    get: function () {
      var $receiver = this.extension_5r19c5$_0;
      new Kotlin.PropertyMetadata('extension');
      return $receiver.value;
    }
  });
  Object.defineProperty(PathInfo.prototype, 'extensionLC', {
    get: function () {
      var $receiver = this.extensionLC_dq6g10$_0;
      new Kotlin.PropertyMetadata('extensionLC');
      return $receiver.value;
    }
  });
  Object.defineProperty(PathInfo.prototype, 'compoundExtension', {
    get: function () {
      var $receiver = this.compoundExtension_e3leh2$_0;
      new Kotlin.PropertyMetadata('compoundExtension');
      return $receiver.value;
    }
  });
  Object.defineProperty(PathInfo.prototype, 'compoundExtensionLC', {
    get: function () {
      var $receiver = this.compoundExtensionLC_gy6p01$_0;
      new Kotlin.PropertyMetadata('compoundExtensionLC');
      return $receiver.value;
    }
  });
  Object.defineProperty(PathInfo.prototype, 'mimeTypeByExtension', {
    get: function () {
      return MimeType$Companion_getInstance().getByExtension_xbj4sl$(this.extensionLC);
    }
  });
  PathInfo.prototype.getComponents = function () {
    return split(this.fullpathNormalized, Kotlin.charArrayOf(47));
  };
  PathInfo.prototype.getFullComponents = function () {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
    var out = ArrayList_init();
    tmp$ = get_indices_6(this.fullpathNormalized);
    tmp$_0 = tmp$.first;
    tmp$_1 = tmp$.last;
    tmp$_2 = tmp$.step;
    for (var n = tmp$_0; n <= tmp$_1; n += tmp$_2) {
      tmp$_3 = this.fullpathNormalized.charCodeAt(n);
      if (tmp$_3 === 47 || tmp$_3 === 92) {
        var element = this.fullpathNormalized.substring(0, n);
        out.add_11rb$(element);
      }
    }
    var element_0 = this.fullpathNormalized;
    out.add_11rb$(element_0);
    return out;
  };
  function PathInfo$folder$lambda(this$PathInfo) {
    return function () {
      var tmp$, tmp$_0;
      tmp$_0 = this$PathInfo.fullpath;
      var endIndex = (tmp$ = lastIndexOfOrNull(this$PathInfo.fullpathNormalized, 47)) != null ? tmp$ : 0;
      return tmp$_0.substring(0, endIndex);
    };
  }
  function PathInfo$folderWithSlash$lambda(this$PathInfo) {
    return function () {
      var tmp$, tmp$_0, tmp$_1;
      tmp$_1 = this$PathInfo.fullpath;
      var endIndex = (tmp$_0 = (tmp$ = lastIndexOfOrNull(this$PathInfo.fullpathNormalized, 47)) != null ? tmp$ + 1 | 0 : null) != null ? tmp$_0 : 0;
      return tmp$_1.substring(0, endIndex);
    };
  }
  function PathInfo$basename$lambda(this$PathInfo) {
    return function () {
      return substringAfterLast(this$PathInfo.fullpathNormalized, 47);
    };
  }
  function PathInfo$pathWithoutExtension$lambda(this$PathInfo) {
    return function () {
      var tmp$, tmp$_0, tmp$_1, tmp$_2;
      var startIndex = (tmp$_0 = (tmp$ = lastIndexOfOrNull(this$PathInfo.fullpathNormalized, 47)) != null ? tmp$ + 1 | 0 : null) != null ? tmp$_0 : 0;
      tmp$_2 = this$PathInfo.fullpath;
      var endIndex = (tmp$_1 = indexOfOrNull(this$PathInfo.fullpathNormalized, 46, startIndex)) != null ? tmp$_1 : this$PathInfo.fullpathNormalized.length;
      return tmp$_2.substring(0, endIndex);
    };
  }
  function PathInfo$fullnameWithoutExtension$lambda(this$PathInfo) {
    return function () {
      return substringBeforeLast(this$PathInfo.fullpath, 46, this$PathInfo.fullpath);
    };
  }
  function PathInfo$basenameWithoutExtension$lambda(this$PathInfo) {
    return function () {
      return substringBeforeLast(this$PathInfo.basename, 46, this$PathInfo.basename);
    };
  }
  function PathInfo$fullnameWithoutCompoundExtension$lambda(this$PathInfo) {
    return function () {
      return this$PathInfo.folderWithSlash + this$PathInfo.basenameWithoutCompoundExtension;
    };
  }
  function PathInfo$basenameWithoutCompoundExtension$lambda(this$PathInfo) {
    return function () {
      return substringBefore(this$PathInfo.basename, 46, this$PathInfo.basename);
    };
  }
  function PathInfo$extension$lambda(this$PathInfo) {
    return function () {
      return substringAfterLast(this$PathInfo.basename, 46, '');
    };
  }
  function PathInfo$extensionLC$lambda(this$PathInfo) {
    return function () {
      return this$PathInfo.extension.toLowerCase();
    };
  }
  function PathInfo$compoundExtension$lambda(this$PathInfo) {
    return function () {
      return substringAfter(this$PathInfo.basename, 46, '');
    };
  }
  function PathInfo$compoundExtensionLC$lambda(this$PathInfo) {
    return function () {
      return this$PathInfo.compoundExtension.toLowerCase();
    };
  }
  PathInfo.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'PathInfo',
    interfaces: []
  };
  function UrlVfs(url) {
    return (new UrlVfs_0(url, Unit)).root;
  }
  function UrlVfs_0(url, dummy) {
    Vfs.call(this);
    this.url = url;
    this.dummy = dummy;
    this.absolutePath_c1c7up$_0 = this.url;
    this.client = createHttpClient();
  }
  Object.defineProperty(UrlVfs_0.prototype, 'absolutePath', {
    get: function () {
      return this.absolutePath_c1c7up$_0;
    }
  });
  UrlVfs_0.prototype.getFullUrl_61zpoe$ = function (path) {
    return trim(this.url, Kotlin.charArrayOf(47)) + String.fromCharCode(toBoxedChar(47)) + trim(path, Kotlin.charArrayOf(47));
  };
  function UrlVfs$open$ObjectLiteral(this$UrlVfs, closure$fullUrl, closure$stat) {
    this.this$UrlVfs = this$UrlVfs;
    this.closure$fullUrl = closure$fullUrl;
    this.closure$stat = closure$stat;
    AsyncStreamBase.call(this);
  }
  UrlVfs$open$ObjectLiteral.prototype.read_4m9kcn$ = function (position_0, buffer_0, offset_0, len_0, continuation_0, suspended) {
    var instance = new Coroutine$read_4m9kcn$_1(this, position_0, buffer_0, offset_0, len_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$read_4m9kcn$_1($this, position_0, buffer_0, offset_0, len_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$res = void 0;
    this.local$out = void 0;
    this.local$position = position_0;
    this.local$buffer = buffer_0;
    this.local$offset = offset_0;
    this.local$len = len_0;
  }
  Coroutine$read_4m9kcn$_1.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$read_4m9kcn$_1.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$read_4m9kcn$_1.prototype.constructor = Coroutine$read_4m9kcn$_1;
  Coroutine$read_4m9kcn$_1.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$len === 0) {
              return 0;
            }
             else {
              this.state_0 = 2;
              continue;
            }

          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.$this.this$UrlVfs.client.request_v6tn8p$(Http$Method$Companion_getInstance().GET, this.$this.closure$fullUrl, Http$Http$Headers_init_0(lmapOf([to('range', 'bytes=' + this.local$position + '-' + this.local$position.add(Kotlin.Long.fromInt(this.local$len)).subtract(Kotlin.Long.fromInt(1)))])), void 0, void 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            this.local$res = this.result_0;
            this.state_0 = 4;
            this.result_0 = this.local$res.content.read_mj6st8$(this.local$buffer, this.local$offset, this.local$len, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 4:
            this.local$out = this.result_0;
            return this.local$out;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  UrlVfs$open$ObjectLiteral.prototype.getLength = function (continuation) {
    return this.closure$stat.size;
  };
  UrlVfs$open$ObjectLiteral.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    interfaces: [AsyncStreamBase]
  };
  UrlVfs_0.prototype.open_j4ip3x$ = function (path_0, mode_0, continuation_0, suspended) {
    var instance = new Coroutine$open_j4ip3x$_1(this, path_0, mode_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$open_j4ip3x$_1($this, path_0, mode_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$tmp$ = void 0;
    this.local$fullUrl = void 0;
    this.local$stat = void 0;
    this.local$response = void 0;
    this.local$path = path_0;
    this.local$mode = mode_0;
  }
  Coroutine$open_j4ip3x$_1.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$open_j4ip3x$_1.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$open_j4ip3x$_1.prototype.constructor = Coroutine$open_j4ip3x$_1;
  Coroutine$open_j4ip3x$_1.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$fullUrl = this.$this.getFullUrl_61zpoe$(this.local$path);
            this.state_0 = 2;
            this.result_0 = this.$this.stat_61zpoe$(this.local$path, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$stat = this.result_0;
            this.local$response = Kotlin.isType(this.local$tmp$ = this.local$stat.extraInfo, HttpClient$Response) ? this.local$tmp$ : null;
            if (!this.local$stat.exists) {
              throw new FileNotFoundException('Unexistant ' + this.local$fullUrl + ' : ' + Kotlin.toString(this.local$response));
            }

            return buffered(toAsyncStream_0(new UrlVfs$open$ObjectLiteral(this.$this, this.local$fullUrl, this.local$stat)));
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  UrlVfs_0.prototype.openInputStream_61zpoe$ = function (path_0, continuation_0, suspended) {
    var instance = new Coroutine$openInputStream_61zpoe$(this, path_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$openInputStream_61zpoe$($this, path_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$path = path_0;
  }
  Coroutine$openInputStream_61zpoe$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$openInputStream_61zpoe$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$openInputStream_61zpoe$.prototype.constructor = Coroutine$openInputStream_61zpoe$;
  Coroutine$openInputStream_61zpoe$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.client.request_v6tn8p$(Http$Method$Companion_getInstance().GET, this.$this.getFullUrl_61zpoe$(this.local$path), void 0, void 0, void 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0.content;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  UrlVfs_0.prototype.readRange_fmne7s$ = function (path_0, range_0, continuation_0, suspended) {
    var instance = new Coroutine$readRange_fmne7s$(this, path_0, range_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$readRange_fmne7s$($this, path_0, range_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$path = path_0;
    this.local$range = range_0;
  }
  Coroutine$readRange_fmne7s$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readRange_fmne7s$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readRange_fmne7s$.prototype.constructor = Coroutine$readRange_fmne7s$;
  Coroutine$readRange_fmne7s$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.client.requestAsBytes_v6tn8p$(Http$Method$Companion_getInstance().GET, this.$this.getFullUrl_61zpoe$(this.local$path), Http$Http$Headers_init_0((this.local$range != null ? this.local$range.equals(LONG_ZERO_TO_MAX_RANGE) : null) ? lmapOf([]) : lmapOf([to('range', 'bytes=' + this.local$range.start + '-' + this.local$range.endInclusive)])), void 0, void 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0.content;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function UrlVfs$HttpHeaders(headers) {
    this.headers = headers;
  }
  UrlVfs$HttpHeaders.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'HttpHeaders',
    interfaces: [Vfs$Attribute]
  };
  UrlVfs_0.prototype.put_3dniav$$default = function (path_0, content_0, attributes_0, continuation_0, suspended) {
    var instance = new Coroutine$put_3dniav$$default(this, path_0, content_0, attributes_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$put_3dniav$$default($this, path_0, content_0, attributes_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$tmp$ = void 0;
    this.local$tmp$_0 = void 0;
    this.local$tmp$_1 = void 0;
    this.local$firstOrNull$result = void 0;
    this.local$tmp$_2 = void 0;
    this.local$element = void 0;
    this.local$headers = void 0;
    this.local$tmp$_3 = void 0;
    this.local$firstOrNull$result_0 = void 0;
    this.local$tmp$_4 = void 0;
    this.local$element_0 = void 0;
    this.local$mimeType = void 0;
    this.local$hheaders = void 0;
    this.local$contentLength = void 0;
    this.local$path = path_0;
    this.local$content = content_0;
    this.local$attributes = attributes_0;
  }
  Coroutine$put_3dniav$$default.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$put_3dniav$$default.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$put_3dniav$$default.prototype.constructor = Coroutine$put_3dniav$$default;
  Coroutine$put_3dniav$$default.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (!Kotlin.isType(this.local$content, AsyncStream))
              invalidOp('UrlVfs.put requires content to be AsyncStream');
            firstOrNull$break: do {
              this.local$tmp$_2 = this.local$attributes.iterator();
              while (this.local$tmp$_2.hasNext()) {
                this.local$element = this.local$tmp$_2.next();
                if (Kotlin.isType(this.local$element, UrlVfs$HttpHeaders)) {
                  this.local$firstOrNull$result = this.local$element;
                  break firstOrNull$break;
                }
              }
              this.local$firstOrNull$result = null;
            }
             while (false);
            var tmp$;
            this.local$headers = (tmp$ = this.local$tmp$_1 = this.local$firstOrNull$result) == null || Kotlin.isType(tmp$, UrlVfs$HttpHeaders) ? this.local$tmp$_1 : Kotlin.throwCCE();
            firstOrNull$break: do {
              this.local$tmp$_4 = this.local$attributes.iterator();
              while (this.local$tmp$_4.hasNext()) {
                this.local$element_0 = this.local$tmp$_4.next();
                if (Kotlin.isType(this.local$element_0, MimeType)) {
                  this.local$firstOrNull$result_0 = this.local$element_0;
                  break firstOrNull$break;
                }
              }
              this.local$firstOrNull$result_0 = null;
            }
             while (false);
            var tmp$_0;
            this.local$mimeType = (this.local$tmp$ = (tmp$_0 = this.local$tmp$_3 = this.local$firstOrNull$result_0) == null || Kotlin.isType(tmp$_0, MimeType) ? this.local$tmp$_3 : Kotlin.throwCCE()) != null ? this.local$tmp$ : MimeType$Companion_getInstance().APPLICATION_JSON;
            this.local$hheaders = (this.local$tmp$_0 = this.local$headers != null ? this.local$headers.headers : null) != null ? this.local$tmp$_0 : Http$Http$Headers_init([]);
            this.state_0 = 2;
            this.result_0 = this.local$content.getLength(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$contentLength = this.result_0;
            this.state_0 = 3;
            this.result_0 = this.$this.client.request_v6tn8p$(Http$Method$Companion_getInstance().PUT, this.$this.getFullUrl_61zpoe$(this.local$path), this.local$hheaders.withReplaceHeaders_9ih0sy$([to('content-length', this.local$contentLength.toString()), to('content-type', this.local$mimeType.mime)]), this.local$content, void 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            this.state_0 = 4;
            this.result_0 = this.local$content.getLength(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 4:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  UrlVfs_0.prototype.stat_61zpoe$ = function (path_0, continuation_0, suspended) {
    var instance = new Coroutine$stat_61zpoe$_1(this, path_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$stat_61zpoe$_1($this, path_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$tmp$ = void 0;
    this.local$tmp$_0 = void 0;
    this.local$tmp$_1 = void 0;
    this.local$result = void 0;
    this.local$path = path_0;
  }
  Coroutine$stat_61zpoe$_1.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$stat_61zpoe$_1.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$stat_61zpoe$_1.prototype.constructor = Coroutine$stat_61zpoe$_1;
  Coroutine$stat_61zpoe$_1.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.client.request_v6tn8p$(Http$Method$Companion_getInstance().HEAD, this.$this.getFullUrl_61zpoe$(this.local$path), void 0, void 0, void 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$result = this.result_0;
            if (this.local$result.success) {
              this.local$tmp$_1 = this.$this.createExistsStat_sjl0ub$(this.local$path, true, (this.local$tmp$_0 = (this.local$tmp$ = this.local$result.headers.get_61zpoe$('content-length')) != null ? toLongOrNull(this.local$tmp$) : null) != null ? this.local$tmp$_0 : Kotlin.Long.ZERO, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, this.local$result);
            }
             else {
              this.local$tmp$_1 = this.$this.createNonExistsStat_4w9ihe$(this.local$path, this.local$result);
            }

            return this.local$tmp$_1;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  UrlVfs_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'UrlVfs',
    interfaces: [Vfs]
  };
  function Vfs() {
    this.absolutePath_pbmtco$_0 = '';
    this.root_d8c2by$_0 = lazy(Vfs$root$lambda(this));
    this.supportedAttributeTypes_fu7rnv$_0 = emptyList();
  }
  Object.defineProperty(Vfs.prototype, 'absolutePath', {
    get: function () {
      return this.absolutePath_pbmtco$_0;
    }
  });
  Vfs.prototype.getAbsolutePath_61zpoe$ = function (path) {
    return VfsUtil_getInstance().lightCombine_puj7f4$(this.absolutePath, path);
  };
  Object.defineProperty(Vfs.prototype, 'root', {
    get: function () {
      var $receiver = this.root_d8c2by$_0;
      new Kotlin.PropertyMetadata('root');
      return $receiver.value;
    }
  });
  Object.defineProperty(Vfs.prototype, 'supportedAttributeTypes', {
    get: function () {
      return this.supportedAttributeTypes_fu7rnv$_0;
    }
  });
  Vfs.prototype.get_61zpoe$ = function (path) {
    return this.root.get_61zpoe$(path);
  };
  Vfs.prototype.file_61zpoe$ = function (path) {
    return this.root.get_61zpoe$(path);
  };
  Vfs.prototype.createExistsStat_sjl0ub$ = function (path, isDirectory, size, device, inode, mode, owner, group, createTime, modifiedTime, lastAccessTime, extraInfo) {
    if (device === void 0)
      device = Kotlin.Long.NEG_ONE;
    if (inode === void 0)
      inode = Kotlin.Long.NEG_ONE;
    if (mode === void 0)
      mode = 511;
    if (owner === void 0)
      owner = 'nobody';
    if (group === void 0)
      group = 'nobody';
    if (createTime === void 0)
      createTime = Kotlin.Long.ZERO;
    if (modifiedTime === void 0)
      modifiedTime = createTime;
    if (lastAccessTime === void 0)
      lastAccessTime = modifiedTime;
    if (extraInfo === void 0)
      extraInfo = null;
    return new VfsStat(this.file_61zpoe$(path), true, isDirectory, size, device, inode, mode, owner, group, createTime, modifiedTime, lastAccessTime, extraInfo);
  };
  Vfs.prototype.createNonExistsStat_4w9ihe$ = function (path, extraInfo) {
    if (extraInfo === void 0)
      extraInfo = null;
    return new VfsStat(this.file_61zpoe$(path), false, false, Kotlin.Long.ZERO, Kotlin.Long.NEG_ONE, Kotlin.Long.NEG_ONE, 511, 'nobody', 'nobody', Kotlin.Long.ZERO, Kotlin.Long.ZERO, Kotlin.Long.ZERO, extraInfo);
  };
  Vfs.prototype.readSpecial_62dmce$ = function (path_0, clazz_0, continuation_0, suspended) {
    var instance = new Coroutine$readSpecial_62dmce$(this, path_0, clazz_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$readSpecial_62dmce$($this, path_0, clazz_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$tmp$ = void 0;
    this.local$tmp$_0 = void 0;
    this.local$tmp$_1 = void 0;
    this.local$path = path_0;
    this.local$clazz = clazz_0;
  }
  Coroutine$readSpecial_62dmce$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readSpecial_62dmce$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readSpecial_62dmce$.prototype.constructor = Coroutine$readSpecial_62dmce$;
  Coroutine$readSpecial_62dmce$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = (this.local$tmp$ = vfsSpecialReadersMap.get_11rb$(this.local$clazz)) != null ? this.local$tmp$.readSpecial_9oq4me$(this.$this, this.local$path, this) : null;
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return (this.local$tmp$_1 = Kotlin.isType(this.local$tmp$_0 = this.result_0, Any) ? this.local$tmp$_0 : Kotlin.throwCCE()) != null ? this.local$tmp$_1 : invalidOp("Don't know how to readSpecial " + this.local$clazz);
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  Vfs.prototype.exec_3h8ree$$default = function (path, cmdAndArgs, handler, continuation) {
    throw new UnsupportedOperationException();
  };
  Vfs.prototype.exec_3h8ree$ = function (path, cmdAndArgs, handler, continuation, callback$default) {
    if (handler === void 0)
      handler = new VfsProcessHandler();
    return callback$default ? callback$default(path, cmdAndArgs, handler, continuation) : this.exec_3h8ree$$default(path, cmdAndArgs, handler, continuation);
  };
  Vfs.prototype.exec_trzgun$$default = function (path, cmdAndArgs, env, handler, continuation) {
    throw new UnsupportedOperationException();
  };
  Vfs.prototype.exec_trzgun$ = function (path, cmdAndArgs, env, handler, continuation, callback$default) {
    if (handler === void 0)
      handler = new VfsProcessHandler();
    return callback$default ? callback$default(path, cmdAndArgs, env, handler, continuation) : this.exec_trzgun$$default(path, cmdAndArgs, env, handler, continuation);
  };
  Vfs.prototype.open_j4ip3x$ = function (path, mode, continuation) {
    throw new UnsupportedOperationException();
  };
  function Vfs$openInputStream$ObjectLiteral(closure$s) {
    this.closure$s = closure$s;
  }
  Vfs$openInputStream$ObjectLiteral.prototype.close = function (continuation_0, suspended) {
    var instance = new Coroutine$close_2(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$close_2($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
  }
  Coroutine$close_2.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$close_2.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$close_2.prototype.constructor = Coroutine$close_2;
  Coroutine$close_2.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.closure$s.close(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  Vfs$openInputStream$ObjectLiteral.prototype.read_mj6st8$ = function (buffer, offset, len, continuation) {
    return this.closure$s.read_mj6st8$(buffer, offset, len, continuation);
  };
  Vfs$openInputStream$ObjectLiteral.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    interfaces: [AsyncInputStream]
  };
  Vfs.prototype.openInputStream_61zpoe$ = function (path_0, continuation_0, suspended) {
    var instance = new Coroutine$openInputStream_61zpoe$_0(this, path_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$openInputStream_61zpoe$_0($this, path_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$s = void 0;
    this.local$path = path_0;
  }
  Coroutine$openInputStream_61zpoe$_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$openInputStream_61zpoe$_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$openInputStream_61zpoe$_0.prototype.constructor = Coroutine$openInputStream_61zpoe$_0;
  Coroutine$openInputStream_61zpoe$_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.open_j4ip3x$(this.local$path, VfsOpenMode$READ_getInstance(), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$s = this.result_0;
            return new Vfs$openInputStream$ObjectLiteral(this.local$s);
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  Vfs.prototype.readRange_fmne7s$ = function (path_0, range_0, continuation_0, suspended) {
    var instance = new Coroutine$readRange_fmne7s$_0(this, path_0, range_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$readRange_fmne7s$_0($this, path_0, range_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 8;
    this.$this = $this;
    this.local$s = void 0;
    this.local$readCount = void 0;
    this.local$path = path_0;
    this.local$range = range_0;
  }
  Coroutine$readRange_fmne7s$_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readRange_fmne7s$_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readRange_fmne7s$_0.prototype.constructor = Coroutine$readRange_fmne7s$_0;
  Coroutine$readRange_fmne7s$_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 1;
            this.result_0 = this.$this.open_j4ip3x$(this.local$path, VfsOpenMode$READ_getInstance(), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            this.local$s = this.result_0;
            this.exceptionState_0 = 5;
            this.local$s.position = this.local$range.start;
            this.local$readCount = min(Math_0, Kotlin.Long.fromInt(2147483646), this.local$range.endInclusive.subtract(this.local$range.start)).toInt() + 1 | 0;
            this.state_0 = 2;
            this.result_0 = readBytesUpTo(this.local$s, this.local$readCount, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 2:
            this.exceptionState_0 = 8;
            this.finallyPath_0 = [3];
            this.state_0 = 6;
            this.$returnValue = this.result_0;
            continue;
          case 3:
            return this.$returnValue;
          case 4:
            return;
          case 5:
            this.finallyPath_0 = [8];
            this.state_0 = 6;
            continue;
          case 6:
            this.state_0 = 7;
            this.result_0 = this.local$s.close(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 7:
            this.state_0 = this.finallyPath_0.shift();
            continue;
          case 8:
            throw this.exception_0;
        }
      }
       catch (e) {
        if (this.state_0 === 8)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function Vfs$Attribute() {
  }
  Vfs$Attribute.$metadata$ = {
    kind: Kotlin.Kind.INTERFACE,
    simpleName: 'Attribute',
    interfaces: []
  };
  Vfs.prototype.get_q42h1k$ = defineInlineFunction('korio-js.com.soywiz.korio.vfs.Vfs.get_q42h1k$', wrapFunction(function () {
    return function (T_0, isT, $receiver) {
      var tmp$;
      var firstOrNull$result;
      firstOrNull$break: do {
        var tmp$_0;
        tmp$_0 = $receiver.iterator();
        while (tmp$_0.hasNext()) {
          var element = tmp$_0.next();
          if (isT(element)) {
            firstOrNull$result = element;
            break firstOrNull$break;
          }
        }
        firstOrNull$result = null;
      }
       while (false);
      return (tmp$ = firstOrNull$result) == null || isT(tmp$) ? tmp$ : Kotlin.throwCCE();
    };
  }));
  function Vfs$put$lambda(closure$content_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$Vfs$put$lambda(closure$content_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$Vfs$put$lambda(closure$content_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$closure$content = closure$content_0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$Vfs$put$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$Vfs$put$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$Vfs$put$lambda.prototype.constructor = Coroutine$Vfs$put$lambda;
  Coroutine$Vfs$put$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = copyTo(this.local$closure$content, this.local$$receiver, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  Vfs.prototype.put_3dniav$$default = function (path_0, content_0, attributes_0, continuation_0, suspended) {
    var instance = new Coroutine$put_3dniav$$default_0(this, path_0, content_0, attributes_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$put_3dniav$$default_0($this, path_0, content_0, attributes_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 7;
    this.$this = $this;
    this.local$$receiver = void 0;
    this.local$path = path_0;
    this.local$content = content_0;
    this.local$attributes = attributes_0;
  }
  Coroutine$put_3dniav$$default_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$put_3dniav$$default_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$put_3dniav$$default_0.prototype.constructor = Coroutine$put_3dniav$$default_0;
  Coroutine$put_3dniav$$default_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 1;
            this.result_0 = this.$this.open_j4ip3x$(this.local$path, VfsOpenMode$CREATE_OR_TRUNCATE_getInstance(), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            this.local$$receiver = this.result_0;
            this.exceptionState_0 = 4;
            this.state_0 = 2;
            this.result_0 = await_1(Vfs$put$lambda(this.local$content), this.local$$receiver, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 2:
            this.result_0 = this.result_0;
            this.exceptionState_0 = 7;
            this.finallyPath_0 = [3];
            this.state_0 = 5;
            continue;
          case 3:
            return this.result_0;
          case 4:
            this.finallyPath_0 = [7];
            this.state_0 = 5;
            continue;
          case 5:
            this.state_0 = 6;
            this.result_0 = this.local$$receiver.close(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 6:
            this.state_0 = this.finallyPath_0.shift();
            continue;
          case 7:
            throw this.exception_0;
        }
      }
       catch (e) {
        if (this.state_0 === 7)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  Vfs.prototype.put_3dniav$ = function (path, content, attributes, continuation, callback$default) {
    if (attributes === void 0) {
      attributes = emptyList();
    }
    return callback$default ? callback$default(path, content, attributes, continuation) : this.put_3dniav$$default(path, content, attributes, continuation);
  };
  Vfs.prototype.readChunk_dckg8j$ = function (path_0, offset_0, size_0, continuation_0, suspended) {
    var instance = new Coroutine$readChunk_dckg8j$(this, path_0, offset_0, size_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$readChunk_dckg8j$($this, path_0, offset_0, size_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$s = void 0;
    this.local$path = path_0;
    this.local$offset = offset_0;
    this.local$size = size_0;
  }
  Coroutine$readChunk_dckg8j$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readChunk_dckg8j$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readChunk_dckg8j$.prototype.constructor = Coroutine$readChunk_dckg8j$;
  Coroutine$readChunk_dckg8j$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.open_j4ip3x$(this.local$path, VfsOpenMode$READ_getInstance(), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$s = this.result_0;
            if (!Kotlin.equals(this.local$offset, Kotlin.Long.ZERO)) {
              this.state_0 = 3;
              this.result_0 = this.local$s.setPosition_s8cxhz$(this.local$offset, this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              break;
            }
             else {
              this.state_0 = 4;
              continue;
            }

          case 3:
            this.state_0 = 4;
            continue;
          case 4:
            this.state_0 = 5;
            this.result_0 = readBytes(this.local$s, this.local$size, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 5:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  Vfs.prototype.writeChunk_1ce9rc$ = function (path_0, data_0, offset_0, resize_0, continuation_0, suspended) {
    var instance = new Coroutine$writeChunk_1ce9rc$(this, path_0, data_0, offset_0, resize_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$writeChunk_1ce9rc$($this, path_0, data_0, offset_0, resize_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$s = void 0;
    this.local$path = path_0;
    this.local$data = data_0;
    this.local$offset = offset_0;
    this.local$resize = resize_0;
  }
  Coroutine$writeChunk_1ce9rc$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$writeChunk_1ce9rc$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$writeChunk_1ce9rc$.prototype.constructor = Coroutine$writeChunk_1ce9rc$;
  Coroutine$writeChunk_1ce9rc$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.open_j4ip3x$(this.local$path, VfsOpenMode$CREATE_getInstance(), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$s = this.result_0;
            this.state_0 = 3;
            this.result_0 = this.local$s.setPosition_s8cxhz$(this.local$offset, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            this.state_0 = 4;
            this.result_0 = writeBytes(this.local$s, this.local$data, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 4:
            if (this.local$resize) {
              this.state_0 = 5;
              this.result_0 = this.local$s.getPosition(this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              break;
            }
             else {
              this.state_0 = 7;
              continue;
            }

          case 5:
            this.state_0 = 6;
            this.result_0 = this.local$s.setLength_s8cxhz$(this.result_0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 6:
            this.state_0 = 7;
            continue;
          case 7:
            return;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function Vfs$setSize$lambda(closure$size_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$Vfs$setSize$lambda(closure$size_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$Vfs$setSize$lambda(closure$size_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$closure$size = closure$size_0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$Vfs$setSize$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$Vfs$setSize$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$Vfs$setSize$lambda.prototype.constructor = Coroutine$Vfs$setSize$lambda;
  Coroutine$Vfs$setSize$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$$receiver.setLength_s8cxhz$(this.local$closure$size, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  Vfs.prototype.setSize_4wgjuj$ = function (path_0, size_0, continuation_0, suspended) {
    var instance = new Coroutine$setSize_4wgjuj$_0(this, path_0, size_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$setSize_4wgjuj$_0($this, path_0, size_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 7;
    this.$this = $this;
    this.local$$receiver = void 0;
    this.local$path = path_0;
    this.local$size = size_0;
  }
  Coroutine$setSize_4wgjuj$_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$setSize_4wgjuj$_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$setSize_4wgjuj$_0.prototype.constructor = Coroutine$setSize_4wgjuj$_0;
  Coroutine$setSize_4wgjuj$_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 1;
            this.result_0 = this.$this.open_j4ip3x$(this.local$path, VfsOpenMode$WRITE_getInstance(), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            this.local$$receiver = this.result_0;
            this.exceptionState_0 = 4;
            this.state_0 = 2;
            this.result_0 = await_1(Vfs$setSize$lambda(this.local$size), this.local$$receiver, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 2:
            this.result_0 = this.result_0;
            this.exceptionState_0 = 7;
            this.finallyPath_0 = [3];
            this.state_0 = 5;
            continue;
          case 3:
            return;
          case 4:
            this.finallyPath_0 = [7];
            this.state_0 = 5;
            continue;
          case 5:
            this.state_0 = 6;
            this.result_0 = this.local$$receiver.close(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 6:
            this.state_0 = this.finallyPath_0.shift();
            continue;
          case 7:
            throw this.exception_0;
        }
      }
       catch (e) {
        if (this.state_0 === 7)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  Vfs.prototype.setAttributes_2aqdj1$ = function (path, attributes, continuation) {
    return Unit;
  };
  Vfs.prototype.stat_61zpoe$ = function (path, continuation) {
    return this.createNonExistsStat_4w9ihe$(path);
  };
  function Vfs$list$lambda$lambda($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$Vfs$list$lambda$lambda($receiver_0, this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$Vfs$list$lambda$lambda($receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$Vfs$list$lambda$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$Vfs$list$lambda$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$Vfs$list$lambda$lambda.prototype.constructor = Coroutine$Vfs$list$lambda$lambda;
  Coroutine$Vfs$list$lambda$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            return Unit;
          case 1:
            throw this.exception_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function Vfs$list$lambda($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$Vfs$list$lambda($receiver_0, this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$Vfs$list$lambda($receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$Vfs$list$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$Vfs$list$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$Vfs$list$lambda.prototype.constructor = Coroutine$Vfs$list$lambda;
  Coroutine$Vfs$list$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            return asyncGenerate(this.local$$receiver, Vfs$list$lambda$lambda);
          case 1:
            throw this.exception_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  Vfs.prototype.list_61zpoe$ = function (path, continuation) {
    return withCoroutineContext(Vfs$list$lambda, continuation);
  };
  Vfs.prototype.mkdir_2aqdj1$ = function (path, attributes, continuation) {
    return unsupported_0();
  };
  Vfs.prototype.delete_61zpoe$ = function (path, continuation) {
    return unsupported_0();
  };
  Vfs.prototype.rename_puj7f4$ = function (src, dst, continuation) {
    return unsupported_0();
  };
  function Vfs$watch$lambda() {
    return Unit;
  }
  Vfs.prototype.watch_gu5k8n$ = function (path, handler, continuation) {
    return Closeable_0(Vfs$watch$lambda);
  };
  Vfs.prototype.touch_cd0evc$ = function (path, time, atime, continuation) {
  };
  function Vfs$Proxy() {
    Vfs.call(this);
    this.initialized = false;
  }
  Vfs$Proxy.prototype.transform_phxig4$ = function (out, continuation) {
    return this.file_61zpoe$(out.path);
  };
  Vfs$Proxy.prototype.transform2_93ma6j$ = function ($receiver, continuation) {
    return this.transform_phxig4$($receiver, continuation);
  };
  Vfs$Proxy.prototype.init = function (continuation) {
  };
  Vfs$Proxy.prototype.initOnce_n5v84d$_0 = function (continuation_0, suspended) {
    var instance = new Coroutine$initOnce_n5v84d$_0(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$initOnce_n5v84d$_0($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
  }
  Coroutine$initOnce_n5v84d$_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$initOnce_n5v84d$_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$initOnce_n5v84d$_0.prototype.constructor = Coroutine$initOnce_n5v84d$_0;
  Coroutine$initOnce_n5v84d$_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (!this.$this.initialized) {
              this.$this.initialized = true;
              this.state_0 = 2;
              this.result_0 = this.$this.init(this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              break;
            }
             else {
              this.state_0 = 3;
              continue;
            }

          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            continue;
          case 3:
            return this.$this;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  Vfs$Proxy.prototype.exec_trzgun$$default = function (path_0, cmdAndArgs_0, env_0, handler_0, continuation_0, suspended) {
    var instance = new Coroutine$exec_trzgun$$default(this, path_0, cmdAndArgs_0, env_0, handler_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$exec_trzgun$$default($this, path_0, cmdAndArgs_0, env_0, handler_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$path = path_0;
    this.local$cmdAndArgs = cmdAndArgs_0;
    this.local$env = env_0;
    this.local$handler = handler_0;
  }
  Coroutine$exec_trzgun$$default.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$exec_trzgun$$default.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$exec_trzgun$$default.prototype.constructor = Coroutine$exec_trzgun$$default;
  Coroutine$exec_trzgun$$default.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.initOnce_n5v84d$_0(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.result_0.access_61zpoe$(this.local$path, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            this.state_0 = 4;
            this.result_0 = this.result_0.exec_gu7lep$(this.local$cmdAndArgs, this.local$env, this.local$handler, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 4:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  Vfs$Proxy.prototype.open_j4ip3x$ = function (path_0, mode_0, continuation_0, suspended) {
    var instance = new Coroutine$open_j4ip3x$_2(this, path_0, mode_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$open_j4ip3x$_2($this, path_0, mode_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$path = path_0;
    this.local$mode = mode_0;
  }
  Coroutine$open_j4ip3x$_2.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$open_j4ip3x$_2.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$open_j4ip3x$_2.prototype.constructor = Coroutine$open_j4ip3x$_2;
  Coroutine$open_j4ip3x$_2.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.initOnce_n5v84d$_0(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.result_0.access_61zpoe$(this.local$path, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            this.state_0 = 4;
            this.result_0 = this.result_0.open_7c7tmz$(this.local$mode, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 4:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  Vfs$Proxy.prototype.readRange_fmne7s$ = function (path_0, range_0, continuation_0, suspended) {
    var instance = new Coroutine$readRange_fmne7s$_1(this, path_0, range_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$readRange_fmne7s$_1($this, path_0, range_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$path = path_0;
    this.local$range = range_0;
  }
  Coroutine$readRange_fmne7s$_1.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readRange_fmne7s$_1.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readRange_fmne7s$_1.prototype.constructor = Coroutine$readRange_fmne7s$_1;
  Coroutine$readRange_fmne7s$_1.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.initOnce_n5v84d$_0(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.result_0.access_61zpoe$(this.local$path, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            this.state_0 = 4;
            this.result_0 = this.result_0.readRangeBytes_6z6t3e$(this.local$range, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 4:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  Vfs$Proxy.prototype.readSpecial_62dmce$ = function (path_0, clazz_0, continuation_0, suspended) {
    var instance = new Coroutine$readSpecial_62dmce$_0(this, path_0, clazz_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$readSpecial_62dmce$_0($this, path_0, clazz_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$path = path_0;
    this.local$clazz = clazz_0;
  }
  Coroutine$readSpecial_62dmce$_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readSpecial_62dmce$_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readSpecial_62dmce$_0.prototype.constructor = Coroutine$readSpecial_62dmce$_0;
  Coroutine$readSpecial_62dmce$_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.initOnce_n5v84d$_0(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.result_0.access_61zpoe$(this.local$path, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            this.state_0 = 4;
            this.result_0 = this.result_0.readSpecial_lmshww$(this.local$clazz, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 4:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  Vfs$Proxy.prototype.put_3dniav$$default = function (path_0, content_0, attributes_0, continuation_0, suspended) {
    var instance = new Coroutine$put_3dniav$$default_1(this, path_0, content_0, attributes_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$put_3dniav$$default_1($this, path_0, content_0, attributes_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$path = path_0;
    this.local$content = content_0;
    this.local$attributes = attributes_0;
  }
  Coroutine$put_3dniav$$default_1.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$put_3dniav$$default_1.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$put_3dniav$$default_1.prototype.constructor = Coroutine$put_3dniav$$default_1;
  Coroutine$put_3dniav$$default_1.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.initOnce_n5v84d$_0(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.result_0.access_61zpoe$(this.local$path, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            this.state_0 = 4;
            this.result_0 = this.result_0.put_ymcm1v$(this.local$content, copyToArray(this.local$attributes).slice(), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 4:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  Vfs$Proxy.prototype.setSize_4wgjuj$ = function (path_0, size_0, continuation_0, suspended) {
    var instance = new Coroutine$setSize_4wgjuj$_1(this, path_0, size_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$setSize_4wgjuj$_1($this, path_0, size_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$path = path_0;
    this.local$size = size_0;
  }
  Coroutine$setSize_4wgjuj$_1.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$setSize_4wgjuj$_1.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$setSize_4wgjuj$_1.prototype.constructor = Coroutine$setSize_4wgjuj$_1;
  Coroutine$setSize_4wgjuj$_1.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.initOnce_n5v84d$_0(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.result_0.access_61zpoe$(this.local$path, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            this.state_0 = 4;
            this.result_0 = this.result_0.setSize_s8cxhz$(this.local$size, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 4:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  Vfs$Proxy.prototype.stat_61zpoe$ = function (path_0, continuation_0, suspended) {
    var instance = new Coroutine$stat_61zpoe$_2(this, path_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$stat_61zpoe$_2($this, path_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$path = path_0;
  }
  Coroutine$stat_61zpoe$_2.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$stat_61zpoe$_2.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$stat_61zpoe$_2.prototype.constructor = Coroutine$stat_61zpoe$_2;
  Coroutine$stat_61zpoe$_2.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.initOnce_n5v84d$_0(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.result_0.access_61zpoe$(this.local$path, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            this.state_0 = 4;
            this.result_0 = this.result_0.stat(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 4:
            return this.result_0.copy_jho7dq$(this.$this.file_61zpoe$(this.local$path));
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function Vfs$Proxy$list$lambda$lambda(this$Proxy_0, closure$path_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$Vfs$Proxy$list$lambda$lambda(this$Proxy_0, closure$path_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$Vfs$Proxy$list$lambda$lambda(this$Proxy_0, closure$path_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$this$Proxy = this$Proxy_0;
    this.local$closure$path = closure$path_0;
    this.local$tmp$ = void 0;
    this.local$it = void 0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$Vfs$Proxy$list$lambda$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$Vfs$Proxy$list$lambda$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$Vfs$Proxy$list$lambda$lambda.prototype.constructor = Coroutine$Vfs$Proxy$list$lambda$lambda;
  Coroutine$Vfs$Proxy$list$lambda$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$this$Proxy.initOnce_n5v84d$_0(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.local$this$Proxy.access_61zpoe$(this.local$closure$path, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            this.state_0 = 4;
            this.result_0 = this.result_0.list(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 4:
            this.local$tmp$ = this.result_0.iterator();
            this.state_0 = 5;
            continue;
          case 5:
            this.state_0 = 6;
            this.result_0 = this.local$tmp$.hasNext(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 6:
            if (!this.result_0) {
              this.state_0 = 11;
              continue;
            }
             else {
              this.state_0 = 7;
              continue;
            }

          case 7:
            this.state_0 = 8;
            this.result_0 = this.local$tmp$.next(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 8:
            this.local$it = this.result_0;
            this.state_0 = 9;
            this.result_0 = this.local$this$Proxy.transform_phxig4$(this.local$it, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 9:
            this.state_0 = 10;
            this.result_0 = this.local$$receiver.yield_11rb$(this.result_0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 10:
            this.state_0 = 5;
            continue;
          case 11:
            return Unit;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function Vfs$Proxy$list$lambda(this$Proxy_0, closure$path_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$Vfs$Proxy$list$lambda(this$Proxy_0, closure$path_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$Vfs$Proxy$list$lambda(this$Proxy_0, closure$path_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$this$Proxy = this$Proxy_0;
    this.local$closure$path = closure$path_0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$Vfs$Proxy$list$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$Vfs$Proxy$list$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$Vfs$Proxy$list$lambda.prototype.constructor = Coroutine$Vfs$Proxy$list$lambda;
  Coroutine$Vfs$Proxy$list$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            return asyncGenerate(this.local$$receiver, Vfs$Proxy$list$lambda$lambda(this.local$this$Proxy, this.local$closure$path));
          case 1:
            throw this.exception_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  Vfs$Proxy.prototype.list_61zpoe$ = function (path_0, continuation_0, suspended) {
    var instance = new Coroutine$list_61zpoe$_2(this, path_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$list_61zpoe$_2($this, path_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$path = path_0;
  }
  Coroutine$list_61zpoe$_2.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$list_61zpoe$_2.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$list_61zpoe$_2.prototype.constructor = Coroutine$list_61zpoe$_2;
  Coroutine$list_61zpoe$_2.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = withCoroutineContext(Vfs$Proxy$list$lambda(this.$this, this.local$path), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  Vfs$Proxy.prototype.delete_61zpoe$ = function (path_0, continuation_0, suspended) {
    var instance = new Coroutine$delete_61zpoe$(this, path_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$delete_61zpoe$($this, path_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$path = path_0;
  }
  Coroutine$delete_61zpoe$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$delete_61zpoe$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$delete_61zpoe$.prototype.constructor = Coroutine$delete_61zpoe$;
  Coroutine$delete_61zpoe$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.initOnce_n5v84d$_0(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.result_0.access_61zpoe$(this.local$path, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            this.state_0 = 4;
            this.result_0 = this.result_0.delete(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 4:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  Vfs$Proxy.prototype.setAttributes_2aqdj1$ = function (path_0, attributes_0, continuation_0, suspended) {
    var instance = new Coroutine$setAttributes_2aqdj1$_0(this, path_0, attributes_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$setAttributes_2aqdj1$_0($this, path_0, attributes_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$path = path_0;
    this.local$attributes = attributes_0;
  }
  Coroutine$setAttributes_2aqdj1$_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$setAttributes_2aqdj1$_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$setAttributes_2aqdj1$_0.prototype.constructor = Coroutine$setAttributes_2aqdj1$_0;
  Coroutine$setAttributes_2aqdj1$_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.initOnce_n5v84d$_0(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.result_0.access_61zpoe$(this.local$path, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            this.state_0 = 4;
            this.result_0 = this.result_0.setAttributes_uzmvfn$(copyToArray(this.local$attributes).slice(), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 4:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  Vfs$Proxy.prototype.mkdir_2aqdj1$ = function (path_0, attributes_0, continuation_0, suspended) {
    var instance = new Coroutine$mkdir_2aqdj1$(this, path_0, attributes_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$mkdir_2aqdj1$($this, path_0, attributes_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$path = path_0;
    this.local$attributes = attributes_0;
  }
  Coroutine$mkdir_2aqdj1$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$mkdir_2aqdj1$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$mkdir_2aqdj1$.prototype.constructor = Coroutine$mkdir_2aqdj1$;
  Coroutine$mkdir_2aqdj1$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.initOnce_n5v84d$_0(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.result_0.access_61zpoe$(this.local$path, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            this.state_0 = 4;
            this.result_0 = this.result_0.mkdir_uzmvfn$(copyToArray(this.local$attributes).slice(), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 4:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  Vfs$Proxy.prototype.touch_cd0evc$ = function (path_0, time_0, atime_0, continuation_0, suspended) {
    var instance = new Coroutine$touch_cd0evc$_0(this, path_0, time_0, atime_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$touch_cd0evc$_0($this, path_0, time_0, atime_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$path = path_0;
    this.local$time = time_0;
    this.local$atime = atime_0;
  }
  Coroutine$touch_cd0evc$_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$touch_cd0evc$_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$touch_cd0evc$_0.prototype.constructor = Coroutine$touch_cd0evc$_0;
  Coroutine$touch_cd0evc$_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.initOnce_n5v84d$_0(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.result_0.access_61zpoe$(this.local$path, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            this.state_0 = 4;
            this.result_0 = this.result_0.touch_3pjtqy$(this.local$time, this.local$atime, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 4:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  Vfs$Proxy.prototype.rename_puj7f4$ = function (src_0, dst_0, continuation_0, suspended) {
    var instance = new Coroutine$rename_puj7f4$(this, src_0, dst_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$rename_puj7f4$($this, src_0, dst_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$srcFile = void 0;
    this.local$dstFile = void 0;
    this.local$src = src_0;
    this.local$dst = dst_0;
  }
  Coroutine$rename_puj7f4$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$rename_puj7f4$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$rename_puj7f4$.prototype.constructor = Coroutine$rename_puj7f4$;
  Coroutine$rename_puj7f4$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.initOnce_n5v84d$_0(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.$this.access_61zpoe$(this.local$src, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            this.local$srcFile = this.result_0;
            this.state_0 = 4;
            this.result_0 = this.$this.access_61zpoe$(this.local$dst, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 4:
            this.local$dstFile = this.result_0;
            if (!Kotlin.equals(this.local$srcFile.vfs, this.local$dstFile.vfs))
              throw new IllegalArgumentException("Can't rename between filesystems. Use copyTo instead, and remove later.");
            this.state_0 = 5;
            this.result_0 = this.local$srcFile.renameTo_61zpoe$(this.local$dstFile.path, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 5:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function Vfs$Proxy$watch$lambda$lambda$lambda(closure$e_0, this$Proxy_0, closure$handler_0) {
    return function (continuation_0, suspended) {
      var instance = new Coroutine$Vfs$Proxy$watch$lambda$lambda$lambda(closure$e_0, this$Proxy_0, closure$handler_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$Vfs$Proxy$watch$lambda$lambda$lambda(closure$e_0, this$Proxy_0, closure$handler_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$closure$e = closure$e_0;
    this.local$this$Proxy = this$Proxy_0;
    this.local$closure$handler = closure$handler_0;
    this.local$tmp$ = void 0;
    this.local$f1 = void 0;
    this.local$f2 = void 0;
  }
  Coroutine$Vfs$Proxy$watch$lambda$lambda$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$Vfs$Proxy$watch$lambda$lambda$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$Vfs$Proxy$watch$lambda$lambda$lambda.prototype.constructor = Coroutine$Vfs$Proxy$watch$lambda$lambda$lambda;
  Coroutine$Vfs$Proxy$watch$lambda$lambda$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$this$Proxy.transform2_93ma6j$(this.local$closure$e.file, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$f1 = this.result_0;
            this.state_0 = 3;
            this.result_0 = (this.local$tmp$ = this.local$closure$e.other) != null ? this.local$this$Proxy.transform2_93ma6j$(this.local$tmp$, this) : null;
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            this.local$f2 = this.result_0;
            return this.local$closure$handler(this.local$closure$e.copy_ndqf77$(void 0, this.local$f1, this.local$f2));
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function Vfs$Proxy$watch$lambda$lambda(this$_0, this$Proxy_0, closure$handler_0) {
    return function (e_0, continuation_0, suspended) {
      var instance = new Coroutine$Vfs$Proxy$watch$lambda$lambda(this$_0, this$Proxy_0, closure$handler_0, e_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$Vfs$Proxy$watch$lambda$lambda(this$_0, this$Proxy_0, closure$handler_0, e_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$this$ = this$_0;
    this.local$this$Proxy = this$Proxy_0;
    this.local$closure$handler = closure$handler_0;
    this.local$e = e_0;
  }
  Coroutine$Vfs$Proxy$watch$lambda$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$Vfs$Proxy$watch$lambda$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$Vfs$Proxy$watch$lambda$lambda.prototype.constructor = Coroutine$Vfs$Proxy$watch$lambda$lambda;
  Coroutine$Vfs$Proxy$watch$lambda$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            return spawn(this.local$this$, Vfs$Proxy$watch$lambda$lambda$lambda(this.local$e, this.local$this$Proxy, this.local$closure$handler));
          case 1:
            throw this.exception_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function Vfs$Proxy$watch$lambda(this$Proxy_0, closure$path_0, closure$handler_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$Vfs$Proxy$watch$lambda(this$Proxy_0, closure$path_0, closure$handler_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$Vfs$Proxy$watch$lambda(this$Proxy_0, closure$path_0, closure$handler_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$this$Proxy = this$Proxy_0;
    this.local$closure$path = closure$path_0;
    this.local$closure$handler = closure$handler_0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$Vfs$Proxy$watch$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$Vfs$Proxy$watch$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$Vfs$Proxy$watch$lambda.prototype.constructor = Coroutine$Vfs$Proxy$watch$lambda;
  Coroutine$Vfs$Proxy$watch$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$this$Proxy.initOnce_n5v84d$_0(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.local$this$Proxy.access_61zpoe$(this.local$closure$path, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            this.state_0 = 4;
            this.result_0 = this.result_0.watch_m8x5l3$(Vfs$Proxy$watch$lambda$lambda(this.local$$receiver, this.local$this$Proxy, this.local$closure$handler), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 4:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  Vfs$Proxy.prototype.watch_gu5k8n$ = function (path_0, handler_0, continuation_0, suspended) {
    var instance = new Coroutine$watch_gu5k8n$(this, path_0, handler_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$watch_gu5k8n$($this, path_0, handler_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$path = path_0;
    this.local$handler = handler_0;
  }
  Coroutine$watch_gu5k8n$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$watch_gu5k8n$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$watch_gu5k8n$.prototype.constructor = Coroutine$watch_gu5k8n$;
  Coroutine$watch_gu5k8n$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = withCoroutineContext(Vfs$Proxy$watch$lambda(this.$this, this.local$path, this.local$handler), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  Vfs$Proxy.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'Proxy',
    interfaces: [Vfs]
  };
  function Vfs$Decorator(parent) {
    Vfs$Proxy.call(this);
    this.parent = parent;
    this.parentVfs = this.parent.vfs;
  }
  Vfs$Decorator.prototype.access_61zpoe$ = function (path, continuation) {
    return this.parentVfs.get_61zpoe$(path);
  };
  Vfs$Decorator.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'Decorator',
    interfaces: [Vfs$Proxy]
  };
  function Vfs$root$lambda(this$Vfs) {
    return function () {
      return new VfsFile(this$Vfs, '');
    };
  }
  Vfs.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'Vfs',
    interfaces: []
  };
  function AsyncFileLoader(loader) {
    this.loader = loader;
  }
  AsyncFileLoader.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'AsyncFileLoader',
    interfaces: []
  };
  AsyncFileLoader.prototype.component1 = function () {
    return this.loader;
  };
  AsyncFileLoader.prototype.copy_xll94z$ = function (loader) {
    return new AsyncFileLoader(loader === void 0 ? this.loader : loader);
  };
  AsyncFileLoader.prototype.toString = function () {
    return 'AsyncFileLoader(loader=' + Kotlin.toString(this.loader) + ')';
  };
  AsyncFileLoader.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.loader) | 0;
    return result;
  };
  AsyncFileLoader.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.loader, other.loader))));
  };
  function VfsFile(vfs, path) {
    VfsNamed.call(this, path);
    this.vfs = vfs;
    this.parent_rneohm$_0 = lazy(VfsFile$parent$lambda(this));
    this.absolutePath_wup0ss$_0 = lazy(VfsFile$absolutePath$lambda(this, path));
  }
  VfsFile.prototype.get_61zpoe$ = function (path) {
    return new VfsFile(this.vfs, VfsUtil_getInstance().combine_puj7f4$(this.path, path));
  };
  VfsFile.prototype.set_puj7f4$ = function (path_0, content_0, continuation_0, suspended) {
    var instance = new Coroutine$set_puj7f4$(this, path_0, content_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$set_puj7f4$($this, path_0, content_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$closure$continuation = void 0;
    this.local$path = path_0;
    this.local$content = content_0;
  }
  Coroutine$set_puj7f4$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$set_puj7f4$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$set_puj7f4$.prototype.constructor = Coroutine$set_puj7f4$;
  Coroutine$set_puj7f4$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$closure$continuation = this;
            this.state_0 = 2;
            this.result_0 = this.$this.get_61zpoe$(this.local$path).put_pka5lh$(openAsync(toByteArray(this.local$content, Charsets_getInstance().UTF_8)), void 0, this.local$closure$continuation);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return Unit;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  VfsFile.prototype.set_yzgtim$ = function (path_0, content_0, continuation_0, suspended) {
    var instance = new Coroutine$set_yzgtim$(this, path_0, content_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$set_yzgtim$($this, path_0, content_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$closure$continuation = void 0;
    this.local$path = path_0;
    this.local$content = content_0;
  }
  Coroutine$set_yzgtim$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$set_yzgtim$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$set_yzgtim$.prototype.constructor = Coroutine$set_yzgtim$;
  Coroutine$set_yzgtim$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$closure$continuation = this;
            this.state_0 = 2;
            this.result_0 = this.$this.get_61zpoe$(this.local$path).put_pka5lh$(openAsync(this.local$content), void 0, this.local$closure$continuation);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return Unit;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  VfsFile.prototype.set_519pps$ = function (path_0, content_0, continuation_0, suspended) {
    var instance = new Coroutine$set_519pps$(this, path_0, content_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$set_519pps$($this, path_0, content_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$closure$continuation = void 0;
    this.local$path = path_0;
    this.local$content = content_0;
  }
  Coroutine$set_519pps$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$set_519pps$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$set_519pps$.prototype.constructor = Coroutine$set_519pps$;
  Coroutine$set_519pps$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$closure$continuation = this;
            this.state_0 = 2;
            this.result_0 = this.$this.get_61zpoe$(this.local$path).writeStream_a2denj$(this.local$content, [], this.local$closure$continuation);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return Unit;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  VfsFile.prototype.set_hem4eq$ = function (path_0, content_0, continuation_0, suspended) {
    var instance = new Coroutine$set_hem4eq$(this, path_0, content_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$set_hem4eq$($this, path_0, content_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$closure$continuation = void 0;
    this.local$path = path_0;
    this.local$content = content_0;
  }
  Coroutine$set_hem4eq$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$set_hem4eq$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$set_hem4eq$.prototype.constructor = Coroutine$set_hem4eq$;
  Coroutine$set_hem4eq$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$closure$continuation = this;
            this.state_0 = 2;
            this.result_0 = this.$this.get_61zpoe$(this.local$path).writeFile_83fdm3$(this.local$content, [], this.local$closure$continuation);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return Unit;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  VfsFile.prototype.put_pka5lh$ = function (content, attributes, continuation) {
    if (attributes === void 0) {
      attributes = emptyList();
    }
    return this.vfs.put_3dniav$(this.path, content, attributes, continuation);
  };
  VfsFile.prototype.put_ymcm1v$ = function (content, attributes, continuation) {
    return this.vfs.put_3dniav$(this.path, content, toList_0(attributes), continuation);
  };
  VfsFile.prototype.write_gssovf$ = function (data, attributes, continuation) {
    return this.put_ymcm1v$(openAsync(data), attributes.slice(), continuation);
  };
  VfsFile.prototype.writeBytes_gssovf$ = function (data, attributes, continuation) {
    return this.put_ymcm1v$(openAsync(data), attributes.slice(), continuation);
  };
  VfsFile.prototype.writeStream_a2denj$ = function (src_0, attributes_0, continuation_0, suspended) {
    var instance = new Coroutine$writeStream_a2denj$(this, src_0, attributes_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$writeStream_a2denj$($this, src_0, attributes_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$closure$continuation = void 0;
    this.local$src = src_0;
    this.local$attributes = attributes_0;
  }
  Coroutine$writeStream_a2denj$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$writeStream_a2denj$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$writeStream_a2denj$.prototype.constructor = Coroutine$writeStream_a2denj$;
  Coroutine$writeStream_a2denj$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$closure$continuation = this;
            this.state_0 = 2;
            this.result_0 = this.$this.put_ymcm1v$(this.local$src, this.local$attributes.slice(), this.local$closure$continuation);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.local$src.getLength(this.local$closure$continuation);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            return this.local$closure$continuation.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  VfsFile.prototype.writeStream_ymcm1v$ = function (src, attributes, continuation) {
    return this.put_ymcm1v$(src, attributes.slice(), continuation);
  };
  VfsFile.prototype.writeFile_83fdm3$ = function (file, attributes, continuation) {
    return file.copyTo_83fdm3$(this, attributes.slice(), continuation);
  };
  VfsFile.prototype.copyTo_83fdm3$ = function (target_0, attributes_0, continuation_0, suspended) {
    var instance = new Coroutine$copyTo_83fdm3$(this, target_0, attributes_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$copyTo_83fdm3$($this, target_0, attributes_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 8;
    this.$this = $this;
    this.local$inputStream = void 0;
    this.local$target = target_0;
    this.local$attributes = attributes_0;
  }
  Coroutine$copyTo_83fdm3$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$copyTo_83fdm3$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$copyTo_83fdm3$.prototype.constructor = Coroutine$copyTo_83fdm3$;
  Coroutine$copyTo_83fdm3$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 1;
            this.result_0 = this.$this.openInputStream(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            this.local$inputStream = this.result_0;
            this.exceptionState_0 = 5;
            this.state_0 = 2;
            this.result_0 = this.local$target.writeStream_ymcm1v$(this.local$inputStream, this.local$attributes.slice(), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 2:
            this.exceptionState_0 = 8;
            this.finallyPath_0 = [3];
            this.state_0 = 6;
            this.$returnValue = this.result_0;
            continue;
          case 3:
            return this.$returnValue;
          case 4:
            return;
          case 5:
            this.finallyPath_0 = [8];
            this.state_0 = 6;
            continue;
          case 6:
            this.state_0 = 7;
            this.result_0 = this.local$inputStream.close(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 7:
            this.state_0 = this.finallyPath_0.shift();
            continue;
          case 8:
            throw this.exception_0;
        }
      }
       catch (e) {
        if (this.state_0 === 8)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function VfsFile$copyTo$lambda(closure$target_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$VfsFile$copyTo$lambda(closure$target_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$VfsFile$copyTo$lambda(closure$target_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$closure$target = closure$target_0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$VfsFile$copyTo$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$VfsFile$copyTo$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$VfsFile$copyTo$lambda.prototype.constructor = Coroutine$VfsFile$copyTo$lambda;
  Coroutine$VfsFile$copyTo$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = copyTo(this.local$$receiver, this.local$closure$target, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function VfsFile$openUse$lambda_0(closure$callback_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$VfsFile$openUse$lambda_0(closure$callback_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$VfsFile$openUse$lambda_0(closure$callback_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$closure$callback = closure$callback_0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$VfsFile$openUse$lambda_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$VfsFile$openUse$lambda_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$VfsFile$openUse$lambda_0.prototype.constructor = Coroutine$VfsFile$openUse$lambda_0;
  Coroutine$VfsFile$openUse$lambda_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = await_1(this.local$closure$callback, this.local$$receiver, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  VfsFile.prototype.copyTo_dm3lun$ = function (target_0, continuation_0, suspended) {
    var instance = new Coroutine$copyTo_dm3lun$(this, target_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$copyTo_dm3lun$($this, target_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 7;
    this.$this = $this;
    this.local$mode = void 0;
    this.local$$receiver = void 0;
    this.local$target = target_0;
  }
  Coroutine$copyTo_dm3lun$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$copyTo_dm3lun$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$copyTo_dm3lun$.prototype.constructor = Coroutine$copyTo_dm3lun$;
  Coroutine$copyTo_dm3lun$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$mode = void 0;
            this.local$mode = VfsOpenMode.READ;
            this.state_0 = 1;
            this.result_0 = this.$this.open_7c7tmz$(this.local$mode, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            this.local$$receiver = this.result_0;
            this.exceptionState_0 = 4;
            this.state_0 = 2;
            this.result_0 = await_1(VfsFile$openUse$lambda_0(VfsFile$copyTo$lambda(this.local$target)), this.local$$receiver, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 2:
            this.result_0 = this.result_0;
            this.exceptionState_0 = 7;
            this.finallyPath_0 = [3];
            this.state_0 = 5;
            continue;
          case 3:
            this.result_0 = this.result_0;
            return;
          case 4:
            this.finallyPath_0 = [7];
            this.state_0 = 5;
            continue;
          case 5:
            this.state_0 = 6;
            this.result_0 = this.local$$receiver.close(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 6:
            this.state_0 = this.finallyPath_0.shift();
            continue;
          case 7:
            throw this.exception_0;
        }
      }
       catch (e) {
        if (this.state_0 === 7)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  Object.defineProperty(VfsFile.prototype, 'parent', {
    get: function () {
      var $receiver = this.parent_rneohm$_0;
      new Kotlin.PropertyMetadata('parent');
      return $receiver.value;
    }
  });
  Object.defineProperty(VfsFile.prototype, 'root', {
    get: function () {
      return this.vfs.root;
    }
  });
  VfsFile.prototype.withExtension_61zpoe$ = function (ext) {
    return new VfsFile(this.vfs, this.fullnameWithoutExtension + (ext.length > 0 ? '.' + ext : ''));
  };
  VfsFile.prototype.withCompoundExtension_61zpoe$ = function (ext) {
    return new VfsFile(this.vfs, this.fullnameWithoutCompoundExtension + (ext.length > 0 ? '.' + ext : ''));
  };
  VfsFile.prototype.appendExtension_61zpoe$ = function (ext) {
    return new VfsFile(this.vfs, this.fullname + ('.' + ext));
  };
  VfsFile.prototype.open_7c7tmz$ = function (mode, continuation) {
    if (mode === void 0)
      mode = VfsOpenMode$READ_getInstance();
    return this.vfs.open_j4ip3x$(this.path, mode, continuation);
  };
  VfsFile.prototype.openInputStream = function (continuation) {
    return this.vfs.openInputStream_61zpoe$(this.path, continuation);
  };
  VfsFile.prototype.openRead = function (continuation) {
    return this.open_7c7tmz$(VfsOpenMode$READ_getInstance(), continuation);
  };
  VfsFile.prototype.openUse_v2mq79$ = defineInlineFunction('korio-js.com.soywiz.korio.vfs.VfsFile.openUse_v2mq79$', wrapFunction(function () {
    var VfsOpenMode = _.com.soywiz.korio.vfs.VfsOpenMode;
    var await_0 = _.com.soywiz.korio.async.await_7zc599$;
    function VfsFile$openUse$lambda(closure$callback) {
      return function ($receiver, continuation) {
        await_0(closure$callback, $receiver, $this$);
        return $this$.$$coroutineResult$$;
      };
    }
    return function (mode_0, callback_0, continuation_0, suspended) {
      var instance = new Coroutine$openUse_v2mq79$(this, mode_0, callback_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }));
  function Coroutine$openUse_v2mq79$($this, mode_0, callback_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 7;
    this.$this = $this;
    this.local$$receiver = void 0;
    this.local$mode = mode_0;
    this.local$callback = callback_0;
  }
  Coroutine$openUse_v2mq79$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$openUse_v2mq79$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$openUse_v2mq79$.prototype.constructor = Coroutine$openUse_v2mq79$;
  Coroutine$openUse_v2mq79$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$mode === void 0)
              this.local$mode = VfsOpenMode.READ;
            this.state_0 = 1;
            this.result_0 = this.$this.open_7c7tmz$(this.local$mode, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            this.local$$receiver = this.result_0;
            this.exceptionState_0 = 4;
            this.state_0 = 2;
            this.result_0 = await_0(VfsFile$openUse$lambda(this.local$callback), this.local$$receiver, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 2:
            this.result_0 = this.result_0;
            this.exceptionState_0 = 7;
            this.finallyPath_0 = [3];
            this.state_0 = 5;
            continue;
          case 3:
            return this.result_0;
          case 4:
            this.finallyPath_0 = [7];
            this.state_0 = 5;
            continue;
          case 5:
            this.state_0 = 6;
            this.result_0 = this.local$$receiver.close(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 6:
            this.state_0 = this.finallyPath_0.shift();
            continue;
          case 7:
            throw this.exception_0;
        }
      }
       catch (e) {
        if (this.state_0 === 7)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  VfsFile.prototype.readSpecial_30y1fr$ = defineInlineFunction('korio-js.com.soywiz.korio.vfs.VfsFile.readSpecial_30y1fr$', function (T_0, isT, continuation) {
    return this.vfs.readSpecial_62dmce$(this.path, Kotlin.getKClass(T_0), continuation);
  });
  VfsFile.prototype.readSpecial_lmshww$ = function (clazz, continuation) {
    return this.vfs.readSpecial_62dmce$(this.path, clazz, continuation);
  };
  VfsFile.prototype.readRangeBytes_6z6t3e$ = function (range, continuation) {
    return this.vfs.readRange_fmne7s$(this.path, range, continuation);
  };
  VfsFile.prototype.readRangeBytes_n8acyv$ = function (range, continuation) {
    return this.vfs.readRange_fmne7s$(this.path, toLongRange(range), continuation);
  };
  VfsFile.prototype.read = function (continuation) {
    return this.vfs.readRange_fmne7s$(this.path, LONG_ZERO_TO_MAX_RANGE, continuation);
  };
  VfsFile.prototype.readAll = function (continuation) {
    return this.vfs.readRange_fmne7s$(this.path, LONG_ZERO_TO_MAX_RANGE, continuation);
  };
  VfsFile.prototype.readBytes = function (continuation) {
    return this.vfs.readRange_fmne7s$(this.path, LONG_ZERO_TO_MAX_RANGE, continuation);
  };
  VfsFile.prototype.readAsSyncStream = function (continuation_0, suspended) {
    var instance = new Coroutine$readAsSyncStream(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$readAsSyncStream($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
  }
  Coroutine$readAsSyncStream.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readAsSyncStream.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readAsSyncStream.prototype.constructor = Coroutine$readAsSyncStream;
  Coroutine$readAsSyncStream.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.read(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return openSync(this.result_0);
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  VfsFile.prototype.readString_qa9gbo$ = function (charset_0, continuation_0, suspended) {
    var instance = new Coroutine$readString_qa9gbo$(this, charset_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$readString_qa9gbo$($this, charset_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$charset = charset_0;
  }
  Coroutine$readString_qa9gbo$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readString_qa9gbo$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readString_qa9gbo$.prototype.constructor = Coroutine$readString_qa9gbo$;
  Coroutine$readString_qa9gbo$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$charset === void 0)
              this.local$charset = Charsets_getInstance().UTF_8;
            this.state_0 = 2;
            this.result_0 = this.$this.read(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return toString(this.result_0, this.local$charset);
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  VfsFile.prototype.writeString_i52441$ = function (data_0, attributes_0, continuation_0, suspended) {
    var instance = new Coroutine$writeString_i52441$(this, data_0, attributes_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$writeString_i52441$($this, data_0, attributes_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$closure$continuation = void 0;
    this.local$data = data_0;
    this.local$attributes = attributes_0;
  }
  Coroutine$writeString_i52441$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$writeString_i52441$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$writeString_i52441$.prototype.constructor = Coroutine$writeString_i52441$;
  Coroutine$writeString_i52441$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$closure$continuation = this;
            this.state_0 = 2;
            this.result_0 = this.$this.write_gssovf$(toByteArray(this.local$data, Charsets_getInstance().UTF_8), this.local$attributes.slice(), this.local$closure$continuation);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return Unit;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  VfsFile.prototype.writeString_ue4rdr$ = function (data_0, charset_0, attributes_0, continuation_0, suspended) {
    var instance = new Coroutine$writeString_ue4rdr$(this, data_0, charset_0, attributes_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$writeString_ue4rdr$($this, data_0, charset_0, attributes_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$closure$continuation = void 0;
    this.local$data = data_0;
    this.local$charset = charset_0;
    this.local$attributes = attributes_0;
  }
  Coroutine$writeString_ue4rdr$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$writeString_ue4rdr$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$writeString_ue4rdr$.prototype.constructor = Coroutine$writeString_ue4rdr$;
  Coroutine$writeString_ue4rdr$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$closure$continuation = this;
            this.state_0 = 2;
            this.result_0 = this.$this.write_gssovf$(toByteArray(this.local$data, this.local$charset), this.local$attributes.slice(), this.local$closure$continuation);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return Unit;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  VfsFile.prototype.readChunk_yhmem3$ = function (offset, size, continuation) {
    return this.vfs.readChunk_dckg8j$(this.path, offset, size, continuation);
  };
  VfsFile.prototype.writeChunk_fzdgxm$ = function (data, offset, resize, continuation) {
    if (resize === void 0)
      resize = false;
    return this.vfs.writeChunk_1ce9rc$(this.path, data, offset, resize, continuation);
  };
  VfsFile.prototype.stat = function (continuation) {
    return this.vfs.stat_61zpoe$(this.path, continuation);
  };
  VfsFile.prototype.touch_3pjtqy$ = function (time, atime, continuation) {
    if (atime === void 0)
      atime = time;
    return this.vfs.touch_cd0evc$(this.path, time, atime, continuation);
  };
  VfsFile.prototype.size = function (continuation_0, suspended) {
    var instance = new Coroutine$size(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$size($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
  }
  Coroutine$size.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$size.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$size.prototype.constructor = Coroutine$size;
  Coroutine$size.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.vfs.stat_61zpoe$(this.$this.path, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0.size;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  VfsFile.prototype.exists = function (continuation_0, suspended) {
    var instance = new Coroutine$exists(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$exists($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 5;
    this.$this = $this;
    this.local$e = void 0;
  }
  Coroutine$exists.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$exists.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$exists.prototype.constructor = Coroutine$exists;
  Coroutine$exists.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.exceptionState_0 = 2;
            this.state_0 = 1;
            this.result_0 = this.$this.vfs.stat_61zpoe$(this.$this.path, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            return this.result_0.exists;
          case 2:
            this.exceptionState_0 = 5;
            this.local$e = this.exception_0;
            if (Kotlin.isType(this.local$e, Throwable)) {
              return false;
            }
             else {
              throw this.local$e;
            }

          case 3:
            this.state_0 = 4;
            continue;
          case 4:
            return;
          case 5:
            throw this.exception_0;
        }
      }
       catch (e) {
        if (this.state_0 === 5)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  VfsFile.prototype.isDirectory = function (continuation_0, suspended) {
    var instance = new Coroutine$isDirectory(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$isDirectory($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
  }
  Coroutine$isDirectory.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$isDirectory.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$isDirectory.prototype.constructor = Coroutine$isDirectory;
  Coroutine$isDirectory.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.stat(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0.isDirectory;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  VfsFile.prototype.setSize_s8cxhz$ = function (size, continuation) {
    return this.vfs.setSize_4wgjuj$(this.path, size, continuation);
  };
  VfsFile.prototype.jail = function () {
    return JailVfs(this);
  };
  VfsFile.prototype.delete = function (continuation) {
    return this.vfs.delete_61zpoe$(this.path, continuation);
  };
  VfsFile.prototype.setAttributes_v1kded$ = function (attributes, continuation) {
    return this.vfs.setAttributes_2aqdj1$(this.path, attributes, continuation);
  };
  VfsFile.prototype.setAttributes_uzmvfn$ = function (attributes, continuation) {
    return this.vfs.setAttributes_2aqdj1$(this.path, toList_0(attributes), continuation);
  };
  VfsFile.prototype.mkdir_v1kded$ = function (attributes, continuation) {
    return this.vfs.mkdir_2aqdj1$(this.path, attributes, continuation);
  };
  VfsFile.prototype.mkdirs_v1kded$ = function (attributes_0, continuation_0, suspended) {
    var instance = new Coroutine$mkdirs_v1kded$(this, attributes_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$mkdirs_v1kded$($this, attributes_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$attributes = attributes_0;
  }
  Coroutine$mkdirs_v1kded$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$mkdirs_v1kded$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$mkdirs_v1kded$.prototype.constructor = Coroutine$mkdirs_v1kded$;
  Coroutine$mkdirs_v1kded$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.mkdir_v1kded$(this.local$attributes, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  VfsFile.prototype.mkdir_uzmvfn$ = function (attributes, continuation) {
    return this.mkdir_v1kded$(toList_0(attributes), continuation);
  };
  VfsFile.prototype.mkdirs_uzmvfn$ = function (attributes, continuation) {
    return this.mkdirs_v1kded$(toList_0(attributes), continuation);
  };
  function VfsFile$copyToTree$lambda(it_0, continuation_0, suspended) {
    var instance = new Coroutine$VfsFile$copyToTree$lambda(it_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$VfsFile$copyToTree$lambda(it_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$it = it_0;
  }
  Coroutine$VfsFile$copyToTree$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$VfsFile$copyToTree$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$VfsFile$copyToTree$lambda.prototype.constructor = Coroutine$VfsFile$copyToTree$lambda;
  Coroutine$VfsFile$copyToTree$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            return Unit;
          case 1:
            throw this.exception_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  VfsFile.prototype.copyToTree_8bkjo9$ = function (target_0, attributes_0, notify_0, continuation_0, suspended) {
    var instance = new Coroutine$copyToTree_8bkjo9$(this, target_0, attributes_0, notify_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$copyToTree_8bkjo9$($this, target_0, attributes_0, notify_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$tmp$ = void 0;
    this.local$file = void 0;
    this.local$target = target_0;
    this.local$attributes = attributes_0;
    this.local$notify = notify_0;
  }
  Coroutine$copyToTree_8bkjo9$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$copyToTree_8bkjo9$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$copyToTree_8bkjo9$.prototype.constructor = Coroutine$copyToTree_8bkjo9$;
  Coroutine$copyToTree_8bkjo9$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$notify === void 0)
              this.local$notify = VfsFile$copyToTree$lambda;
            this.state_0 = 2;
            this.result_0 = this.local$notify(to(this.$this, this.local$target), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.$this.isDirectory(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            if (this.result_0) {
              this.state_0 = 5;
              this.result_0 = this.local$target.mkdir_uzmvfn$([], this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              break;
            }
             else {
              this.state_0 = 4;
              this.result_0 = this.$this.copyTo_83fdm3$(this.local$target, this.local$attributes.slice(), this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              break;
            }

          case 4:
            this.state_0 = 13;
            continue;
          case 5:
            this.state_0 = 6;
            this.result_0 = this.$this.list(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 6:
            this.local$tmp$ = this.result_0.iterator();
            this.state_0 = 7;
            continue;
          case 7:
            this.state_0 = 8;
            this.result_0 = this.local$tmp$.hasNext(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 8:
            if (!this.result_0) {
              this.state_0 = 12;
              continue;
            }
             else {
              this.state_0 = 9;
              continue;
            }

          case 9:
            this.state_0 = 10;
            this.result_0 = this.local$tmp$.next(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 10:
            this.local$file = this.result_0;
            this.state_0 = 11;
            this.result_0 = this.local$file.copyToTree_8bkjo9$(this.local$target.get_61zpoe$(this.local$file.basename), this.local$attributes.slice(), this.local$notify, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 11:
            this.state_0 = 7;
            continue;
          case 12:
            this.state_0 = 13;
            continue;
          case 13:
            return;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  VfsFile.prototype.ensureParents = function (continuation_0, suspended) {
    var instance = new Coroutine$ensureParents(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$ensureParents($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$closure$continuation = void 0;
  }
  Coroutine$ensureParents.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$ensureParents.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$ensureParents.prototype.constructor = Coroutine$ensureParents;
  Coroutine$ensureParents.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$closure$continuation = this;
            this.state_0 = 2;
            this.result_0 = this.$this.parent.mkdirs_uzmvfn$([], this.local$closure$continuation);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.$this;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  VfsFile.prototype.renameTo_61zpoe$ = function (dstPath, continuation) {
    return this.vfs.rename_puj7f4$(this.path, dstPath, continuation);
  };
  VfsFile.prototype.list = function (continuation) {
    return this.vfs.list_61zpoe$(this.path, continuation);
  };
  function VfsFile$listRecursive$lambda(it) {
    return true;
  }
  function VfsFile$listRecursive$lambda$lambda(this$VfsFile_0, closure$filter_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$VfsFile$listRecursive$lambda$lambda(this$VfsFile_0, closure$filter_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$VfsFile$listRecursive$lambda$lambda(this$VfsFile_0, closure$filter_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$this$VfsFile = this$VfsFile_0;
    this.local$closure$filter = closure$filter_0;
    this.local$tmp$ = void 0;
    this.local$tmp$_0 = void 0;
    this.local$file = void 0;
    this.local$stat = void 0;
    this.local$f = void 0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$VfsFile$listRecursive$lambda$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$VfsFile$listRecursive$lambda$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$VfsFile$listRecursive$lambda$lambda.prototype.constructor = Coroutine$VfsFile$listRecursive$lambda$lambda;
  Coroutine$VfsFile$listRecursive$lambda$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$this$VfsFile.list(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$tmp$ = this.result_0.iterator();
            this.state_0 = 3;
            continue;
          case 3:
            this.state_0 = 4;
            this.result_0 = this.local$tmp$.hasNext(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 4:
            if (!this.result_0) {
              this.state_0 = 18;
              continue;
            }
             else {
              this.state_0 = 5;
              continue;
            }

          case 5:
            this.state_0 = 6;
            this.result_0 = this.local$tmp$.next(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 6:
            this.local$file = this.result_0;
            if (!this.local$closure$filter(this.local$file)) {
              this.state_0 = 3;
              continue;
            }
             else {
              this.state_0 = 7;
              continue;
            }

          case 7:
            this.state_0 = 8;
            this.result_0 = this.local$$receiver.yield_11rb$(this.local$file, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 8:
            this.state_0 = 9;
            this.result_0 = this.local$file.stat(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 9:
            this.local$stat = this.result_0;
            if (this.local$stat.isDirectory) {
              this.state_0 = 10;
              this.result_0 = this.local$file.listRecursive_tj1ql9$(void 0, this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              break;
            }
             else {
              this.state_0 = 17;
              continue;
            }

          case 10:
            this.local$tmp$_0 = this.result_0.iterator();
            this.state_0 = 11;
            continue;
          case 11:
            this.state_0 = 12;
            this.result_0 = this.local$tmp$_0.hasNext(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 12:
            if (!this.result_0) {
              this.state_0 = 16;
              continue;
            }
             else {
              this.state_0 = 13;
              continue;
            }

          case 13:
            this.state_0 = 14;
            this.result_0 = this.local$tmp$_0.next(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 14:
            this.local$f = this.result_0;
            this.state_0 = 15;
            this.result_0 = this.local$$receiver.yield_11rb$(this.local$f, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 15:
            this.state_0 = 11;
            continue;
          case 16:
            this.state_0 = 17;
            continue;
          case 17:
            this.state_0 = 3;
            continue;
          case 18:
            return Unit;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function VfsFile$listRecursive$lambda_0(this$VfsFile_0, closure$filter_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$VfsFile$listRecursive$lambda(this$VfsFile_0, closure$filter_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$VfsFile$listRecursive$lambda(this$VfsFile_0, closure$filter_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$this$VfsFile = this$VfsFile_0;
    this.local$closure$filter = closure$filter_0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$VfsFile$listRecursive$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$VfsFile$listRecursive$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$VfsFile$listRecursive$lambda.prototype.constructor = Coroutine$VfsFile$listRecursive$lambda;
  Coroutine$VfsFile$listRecursive$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            return asyncGenerate(this.local$$receiver, VfsFile$listRecursive$lambda$lambda(this.local$this$VfsFile, this.local$closure$filter));
          case 1:
            throw this.exception_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  VfsFile.prototype.listRecursive_tj1ql9$ = function (filter_0, continuation_0, suspended) {
    var instance = new Coroutine$listRecursive_tj1ql9$(this, filter_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$listRecursive_tj1ql9$($this, filter_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$filter = filter_0;
  }
  Coroutine$listRecursive_tj1ql9$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$listRecursive_tj1ql9$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$listRecursive_tj1ql9$.prototype.constructor = Coroutine$listRecursive_tj1ql9$;
  Coroutine$listRecursive_tj1ql9$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$filter === void 0)
              this.local$filter = VfsFile$listRecursive$lambda;
            this.state_0 = 2;
            this.result_0 = withCoroutineContext(VfsFile$listRecursive$lambda_0(this.$this, this.local$filter), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  VfsFile.prototype.exec_gu7lep$ = function (cmdAndArgs, env, handler, continuation) {
    if (env === void 0)
      env = lmapOf([]);
    if (handler === void 0)
      handler = new VfsProcessHandler();
    return this.vfs.exec_trzgun$(this.path, cmdAndArgs, env, handler, continuation);
  };
  function VfsFile$execToString$ObjectLiteral(closure$out, closure$captureError, closure$err) {
    this.closure$out = closure$out;
    this.closure$captureError = closure$captureError;
    this.closure$err = closure$err;
    VfsProcessHandler.call(this);
  }
  VfsFile$execToString$ObjectLiteral.prototype.onOut_fqrh44$ = function (data, continuation) {
    this.closure$out.append_fqrh44$(data);
  };
  VfsFile$execToString$ObjectLiteral.prototype.onErr_fqrh44$ = function (data, continuation) {
    if (this.closure$captureError)
      this.closure$out.append_fqrh44$(data);
    this.closure$err.append_fqrh44$(data);
  };
  VfsFile$execToString$ObjectLiteral.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    interfaces: [VfsProcessHandler]
  };
  VfsFile.prototype.execToString_rejnxc$ = function (cmdAndArgs_0, env_0, charset_0, captureError_0, throwOnError_0, continuation_0, suspended) {
    var instance = new Coroutine$execToString_rejnxc$(this, cmdAndArgs_0, env_0, charset_0, captureError_0, throwOnError_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$execToString_rejnxc$($this, cmdAndArgs_0, env_0, charset_0, captureError_0, throwOnError_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$out = void 0;
    this.local$err = void 0;
    this.local$result = void 0;
    this.local$errString = void 0;
    this.local$outString = void 0;
    this.local$cmdAndArgs = cmdAndArgs_0;
    this.local$env = env_0;
    this.local$charset = charset_0;
    this.local$captureError = captureError_0;
    this.local$throwOnError = throwOnError_0;
  }
  Coroutine$execToString_rejnxc$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$execToString_rejnxc$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$execToString_rejnxc$.prototype.constructor = Coroutine$execToString_rejnxc$;
  Coroutine$execToString_rejnxc$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$env === void 0)
              this.local$env = lmapOf([]);
            if (this.local$charset === void 0)
              this.local$charset = Charsets_getInstance().UTF_8;
            if (this.local$captureError === void 0)
              this.local$captureError = false;
            if (this.local$throwOnError === void 0)
              this.local$throwOnError = true;
            this.local$out = ByteArrayBuilder_init();
            this.local$err = ByteArrayBuilder_init();
            this.state_0 = 2;
            this.result_0 = this.$this.exec_gu7lep$(this.local$cmdAndArgs, this.local$env, new VfsFile$execToString$ObjectLiteral(this.local$out, this.local$captureError, this.local$err), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$result = this.result_0;
            this.local$errString = toString(this.local$err.toByteArray(), this.local$charset);
            this.local$outString = toString(this.local$out.toByteArray(), this.local$charset);
            if (this.local$throwOnError && this.local$result !== 0)
              throw new VfsProcessException('Process not returned 0, but ' + this.local$result + '. Error: ' + this.local$errString + ', Output: ' + this.local$outString);
            return this.local$outString;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  VfsFile.prototype.execToString_kd6qi3$ = function (cmdAndArgs, charset, continuation) {
    if (charset === void 0)
      charset = Charsets_getInstance().UTF_8;
    return this.execToString_rejnxc$(toList_0(cmdAndArgs), void 0, charset, void 0, void 0, continuation);
  };
  function VfsFile$passthru$ObjectLiteral(closure$charset) {
    this.closure$charset = closure$charset;
    VfsProcessHandler.call(this);
  }
  VfsFile$passthru$ObjectLiteral.prototype.onOut_fqrh44$ = function (data, continuation) {
    Console_getInstance().out_print_61zpoe$(toString(data, this.closure$charset));
  };
  VfsFile$passthru$ObjectLiteral.prototype.onErr_fqrh44$ = function (data, continuation) {
    Console_getInstance().err_print_61zpoe$(toString(data, this.closure$charset));
  };
  VfsFile$passthru$ObjectLiteral.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    interfaces: [VfsProcessHandler]
  };
  VfsFile.prototype.passthru_msg81s$ = function (cmdAndArgs, env, charset, continuation) {
    if (env === void 0)
      env = lmapOf([]);
    if (charset === void 0)
      charset = Charsets_getInstance().UTF_8;
    return this.exec_gu7lep$(toList(cmdAndArgs), env, new VfsFile$passthru$ObjectLiteral(charset), continuation);
  };
  VfsFile.prototype.passthru_2y9ixa$ = function (cmdAndArgs, env, charset, continuation) {
    if (env === void 0)
      env = lmapOf([]);
    if (charset === void 0)
      charset = Charsets_getInstance().UTF_8;
    return this.passthru_msg81s$(toList_0(cmdAndArgs), env, charset, continuation);
  };
  function VfsFile$watch$lambda$lambda$lambda(closure$handler_0, closure$event_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$VfsFile$watch$lambda$lambda$lambda(closure$handler_0, closure$event_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$VfsFile$watch$lambda$lambda$lambda(closure$handler_0, closure$event_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$closure$handler = closure$handler_0;
    this.local$closure$event = closure$event_0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$VfsFile$watch$lambda$lambda$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$VfsFile$watch$lambda$lambda$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$VfsFile$watch$lambda$lambda$lambda.prototype.constructor = Coroutine$VfsFile$watch$lambda$lambda$lambda;
  Coroutine$VfsFile$watch$lambda$lambda$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$closure$handler(this.local$closure$event, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function VfsFile$watch$lambda$lambda(closure$handler, this$) {
    return function (event) {
      async_3(this$, VfsFile$watch$lambda$lambda$lambda(closure$handler, event));
      return Unit;
    };
  }
  function VfsFile$watch$lambda(this$VfsFile_0, closure$handler_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$VfsFile$watch$lambda(this$VfsFile_0, closure$handler_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$VfsFile$watch$lambda(this$VfsFile_0, closure$handler_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$this$VfsFile = this$VfsFile_0;
    this.local$closure$handler = closure$handler_0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$VfsFile$watch$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$VfsFile$watch$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$VfsFile$watch$lambda.prototype.constructor = Coroutine$VfsFile$watch$lambda;
  Coroutine$VfsFile$watch$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$this$VfsFile.vfs.watch_gu5k8n$(this.local$this$VfsFile.path, VfsFile$watch$lambda$lambda(this.local$closure$handler, this.local$$receiver), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  VfsFile.prototype.watch_m8x5l3$ = function (handler_0, continuation_0, suspended) {
    var instance = new Coroutine$watch_m8x5l3$(this, handler_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$watch_m8x5l3$($this, handler_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$handler = handler_0;
  }
  Coroutine$watch_m8x5l3$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$watch_m8x5l3$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$watch_m8x5l3$.prototype.constructor = Coroutine$watch_m8x5l3$;
  Coroutine$watch_m8x5l3$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = withCoroutineContext(VfsFile$watch$lambda(this.$this, this.local$handler), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function VfsFile$redirected$ObjectLiteral(closure$actualFile, closure$pathRedirector) {
    this.closure$actualFile = closure$actualFile;
    this.closure$pathRedirector = closure$pathRedirector;
    Vfs$Proxy.call(this);
  }
  VfsFile$redirected$ObjectLiteral.prototype.access_61zpoe$ = function (path_0, continuation_0, suspended) {
    var instance = new Coroutine$access_61zpoe$_0(this, path_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$access_61zpoe$_0($this, path_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$tmp$ = void 0;
    this.local$path = path_0;
  }
  Coroutine$access_61zpoe$_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$access_61zpoe$_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$access_61zpoe$_0.prototype.constructor = Coroutine$access_61zpoe$_0;
  Coroutine$access_61zpoe$_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$tmp$ = this.$this.closure$actualFile;
            this.state_0 = 2;
            this.result_0 = this.$this.closure$pathRedirector(this.$this.closure$actualFile, this.local$path, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.local$tmp$.get_61zpoe$(this.result_0);
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  VfsFile$redirected$ObjectLiteral.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    interfaces: [Vfs$Proxy]
  };
  VfsFile.prototype.redirected_6arw84$ = function (pathRedirector_0, continuation_0, suspended) {
    var instance = new Coroutine$redirected_6arw84$(this, pathRedirector_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$redirected_6arw84$($this, pathRedirector_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$actualFile = void 0;
    this.local$pathRedirector = pathRedirector_0;
  }
  Coroutine$redirected_6arw84$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$redirected_6arw84$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$redirected_6arw84$.prototype.constructor = Coroutine$redirected_6arw84$;
  Coroutine$redirected_6arw84$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$actualFile = this.$this;
            return new VfsFile(new VfsFile$redirected$ObjectLiteral(this.local$actualFile, this.local$pathRedirector), this.$this.path);
          case 1:
            throw this.exception_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  VfsFile.prototype.toString = function () {
    return this.vfs + '[' + this.path + ']';
  };
  Object.defineProperty(VfsFile.prototype, 'absolutePath', {
    get: function () {
      var $receiver = this.absolutePath_wup0ss$_0;
      new Kotlin.PropertyMetadata('absolutePath');
      return $receiver.value;
    }
  });
  function VfsFile$parent$lambda(this$VfsFile) {
    return function () {
      return new VfsFile(this$VfsFile.vfs, this$VfsFile.pathInfo.folder);
    };
  }
  function VfsFile$absolutePath$lambda(this$VfsFile, closure$path) {
    return function () {
      return this$VfsFile.vfs.getAbsolutePath_61zpoe$(closure$path);
    };
  }
  VfsFile.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'VfsFile',
    interfaces: [AsyncInputOpenable, VfsNamed]
  };
  function VfsFileEvent(kind, file, other) {
    if (other === void 0)
      other = null;
    this.kind = kind;
    this.file = file;
    this.other = other;
  }
  function VfsFileEvent$Kind(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function VfsFileEvent$Kind_initFields() {
    VfsFileEvent$Kind_initFields = function () {
    };
    VfsFileEvent$Kind$DELETED_instance = new VfsFileEvent$Kind('DELETED', 0);
    VfsFileEvent$Kind$MODIFIED_instance = new VfsFileEvent$Kind('MODIFIED', 1);
    VfsFileEvent$Kind$CREATED_instance = new VfsFileEvent$Kind('CREATED', 2);
    VfsFileEvent$Kind$RENAMED_instance = new VfsFileEvent$Kind('RENAMED', 3);
  }
  var VfsFileEvent$Kind$DELETED_instance;
  function VfsFileEvent$Kind$DELETED_getInstance() {
    VfsFileEvent$Kind_initFields();
    return VfsFileEvent$Kind$DELETED_instance;
  }
  var VfsFileEvent$Kind$MODIFIED_instance;
  function VfsFileEvent$Kind$MODIFIED_getInstance() {
    VfsFileEvent$Kind_initFields();
    return VfsFileEvent$Kind$MODIFIED_instance;
  }
  var VfsFileEvent$Kind$CREATED_instance;
  function VfsFileEvent$Kind$CREATED_getInstance() {
    VfsFileEvent$Kind_initFields();
    return VfsFileEvent$Kind$CREATED_instance;
  }
  var VfsFileEvent$Kind$RENAMED_instance;
  function VfsFileEvent$Kind$RENAMED_getInstance() {
    VfsFileEvent$Kind_initFields();
    return VfsFileEvent$Kind$RENAMED_instance;
  }
  VfsFileEvent$Kind.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'Kind',
    interfaces: [Enum]
  };
  function VfsFileEvent$Kind$values() {
    return [VfsFileEvent$Kind$DELETED_getInstance(), VfsFileEvent$Kind$MODIFIED_getInstance(), VfsFileEvent$Kind$CREATED_getInstance(), VfsFileEvent$Kind$RENAMED_getInstance()];
  }
  VfsFileEvent$Kind.values = VfsFileEvent$Kind$values;
  function VfsFileEvent$Kind$valueOf(name) {
    switch (name) {
      case 'DELETED':
        return VfsFileEvent$Kind$DELETED_getInstance();
      case 'MODIFIED':
        return VfsFileEvent$Kind$MODIFIED_getInstance();
      case 'CREATED':
        return VfsFileEvent$Kind$CREATED_getInstance();
      case 'RENAMED':
        return VfsFileEvent$Kind$RENAMED_getInstance();
      default:Kotlin.throwISE('No enum constant com.soywiz.korio.vfs.VfsFileEvent.Kind.' + name);
    }
  }
  VfsFileEvent$Kind.valueOf_61zpoe$ = VfsFileEvent$Kind$valueOf;
  VfsFileEvent.prototype.toString = function () {
    return this.other != null ? this.kind + '(' + this.file + ', ' + Kotlin.toString(this.other) + ')' : this.kind + '(' + this.file + ')';
  };
  VfsFileEvent.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'VfsFileEvent',
    interfaces: []
  };
  VfsFileEvent.prototype.component1 = function () {
    return this.kind;
  };
  VfsFileEvent.prototype.component2 = function () {
    return this.file;
  };
  VfsFileEvent.prototype.component3 = function () {
    return this.other;
  };
  VfsFileEvent.prototype.copy_ndqf77$ = function (kind, file, other) {
    return new VfsFileEvent(kind === void 0 ? this.kind : kind, file === void 0 ? this.file : file, other === void 0 ? this.other : other);
  };
  VfsFileEvent.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.kind) | 0;
    result = result * 31 + Kotlin.hashCode(this.file) | 0;
    result = result * 31 + Kotlin.hashCode(this.other) | 0;
    return result;
  };
  VfsFileEvent.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.kind, other.kind) && Kotlin.equals(this.file, other.file) && Kotlin.equals(this.other, other.other)))));
  };
  function VfsNamed(path) {
    this.path = path;
    this.pathInfo_e5whvu$_0 = lazy(VfsNamed$pathInfo$lambda(this));
  }
  Object.defineProperty(VfsNamed.prototype, 'fullname', {
    get: function () {
      return this.path;
    }
  });
  Object.defineProperty(VfsNamed.prototype, 'pathInfo', {
    get: function () {
      var $receiver = this.pathInfo_e5whvu$_0;
      new Kotlin.PropertyMetadata('pathInfo');
      return $receiver.value;
    }
  });
  Object.defineProperty(VfsNamed.prototype, 'basename', {
    get: function () {
      return this.pathInfo.basename;
    }
  });
  Object.defineProperty(VfsNamed.prototype, 'fullnameWithoutExtension', {
    get: function () {
      return this.pathInfo.fullnameWithoutExtension;
    }
  });
  Object.defineProperty(VfsNamed.prototype, 'basenameWithoutExtension', {
    get: function () {
      return this.pathInfo.basenameWithoutExtension;
    }
  });
  Object.defineProperty(VfsNamed.prototype, 'fullnameWithoutCompoundExtension', {
    get: function () {
      return this.pathInfo.fullnameWithoutCompoundExtension;
    }
  });
  Object.defineProperty(VfsNamed.prototype, 'basenameWithoutCompoundExtension', {
    get: function () {
      return this.pathInfo.basenameWithoutCompoundExtension;
    }
  });
  Object.defineProperty(VfsNamed.prototype, 'extension', {
    get: function () {
      return this.pathInfo.extension;
    }
  });
  Object.defineProperty(VfsNamed.prototype, 'extensionLC', {
    get: function () {
      return this.pathInfo.extensionLC;
    }
  });
  Object.defineProperty(VfsNamed.prototype, 'compoundExtension', {
    get: function () {
      return this.pathInfo.compoundExtension;
    }
  });
  Object.defineProperty(VfsNamed.prototype, 'compoundExtensionLC', {
    get: function () {
      return this.pathInfo.compoundExtensionLC;
    }
  });
  function VfsNamed$pathInfo$lambda(this$VfsNamed) {
    return function () {
      return new PathInfo(this$VfsNamed.path);
    };
  }
  VfsNamed.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'VfsNamed',
    interfaces: []
  };
  function VfsOpenMode(name, ordinal, cmode, write, createIfNotExists, truncate) {
    if (createIfNotExists === void 0)
      createIfNotExists = false;
    if (truncate === void 0)
      truncate = false;
    Enum.call(this);
    this.cmode = cmode;
    this.write = write;
    this.createIfNotExists = createIfNotExists;
    this.truncate = truncate;
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function VfsOpenMode_initFields() {
    VfsOpenMode_initFields = function () {
    };
    VfsOpenMode$READ_instance = new VfsOpenMode('READ', 0, 'r', false);
    VfsOpenMode$WRITE_instance = new VfsOpenMode('WRITE', 1, 'rw', true, true);
    VfsOpenMode$APPEND_instance = new VfsOpenMode('APPEND', 2, 'a+', true, true);
    VfsOpenMode$CREATE_OR_TRUNCATE_instance = new VfsOpenMode('CREATE_OR_TRUNCATE', 3, 'rw', true, true, true);
    VfsOpenMode$CREATE_instance = new VfsOpenMode('CREATE', 4, 'rw', true, true);
    VfsOpenMode$CREATE_NEW_instance = new VfsOpenMode('CREATE_NEW', 5, 'rw', true);
    VfsOpenMode$Companion_getInstance();
  }
  var VfsOpenMode$READ_instance;
  function VfsOpenMode$READ_getInstance() {
    VfsOpenMode_initFields();
    return VfsOpenMode$READ_instance;
  }
  var VfsOpenMode$WRITE_instance;
  function VfsOpenMode$WRITE_getInstance() {
    VfsOpenMode_initFields();
    return VfsOpenMode$WRITE_instance;
  }
  var VfsOpenMode$APPEND_instance;
  function VfsOpenMode$APPEND_getInstance() {
    VfsOpenMode_initFields();
    return VfsOpenMode$APPEND_instance;
  }
  var VfsOpenMode$CREATE_OR_TRUNCATE_instance;
  function VfsOpenMode$CREATE_OR_TRUNCATE_getInstance() {
    VfsOpenMode_initFields();
    return VfsOpenMode$CREATE_OR_TRUNCATE_instance;
  }
  var VfsOpenMode$CREATE_instance;
  function VfsOpenMode$CREATE_getInstance() {
    VfsOpenMode_initFields();
    return VfsOpenMode$CREATE_instance;
  }
  var VfsOpenMode$CREATE_NEW_instance;
  function VfsOpenMode$CREATE_NEW_getInstance() {
    VfsOpenMode_initFields();
    return VfsOpenMode$CREATE_NEW_instance;
  }
  function VfsOpenMode$Companion() {
    VfsOpenMode$Companion_instance = this;
  }
  VfsOpenMode$Companion.prototype.fromString_61zpoe$ = function (str) {
    if (contains_0(str, 114)) {
      return VfsOpenMode$READ_getInstance();
    }
    throw new NotImplementedError_init();
  };
  VfsOpenMode$Companion.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var VfsOpenMode$Companion_instance = null;
  function VfsOpenMode$Companion_getInstance() {
    VfsOpenMode_initFields();
    if (VfsOpenMode$Companion_instance === null) {
      new VfsOpenMode$Companion();
    }
    return VfsOpenMode$Companion_instance;
  }
  VfsOpenMode.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'VfsOpenMode',
    interfaces: [Enum]
  };
  function VfsOpenMode$values() {
    return [VfsOpenMode$READ_getInstance(), VfsOpenMode$WRITE_getInstance(), VfsOpenMode$APPEND_getInstance(), VfsOpenMode$CREATE_OR_TRUNCATE_getInstance(), VfsOpenMode$CREATE_getInstance(), VfsOpenMode$CREATE_NEW_getInstance()];
  }
  VfsOpenMode.values = VfsOpenMode$values;
  function VfsOpenMode$valueOf(name) {
    switch (name) {
      case 'READ':
        return VfsOpenMode$READ_getInstance();
      case 'WRITE':
        return VfsOpenMode$WRITE_getInstance();
      case 'APPEND':
        return VfsOpenMode$APPEND_getInstance();
      case 'CREATE_OR_TRUNCATE':
        return VfsOpenMode$CREATE_OR_TRUNCATE_getInstance();
      case 'CREATE':
        return VfsOpenMode$CREATE_getInstance();
      case 'CREATE_NEW':
        return VfsOpenMode$CREATE_NEW_getInstance();
      default:Kotlin.throwISE('No enum constant com.soywiz.korio.vfs.VfsOpenMode.' + name);
    }
  }
  VfsOpenMode.valueOf_61zpoe$ = VfsOpenMode$valueOf;
  function VfsProcessHandler() {
  }
  VfsProcessHandler.prototype.onOut_fqrh44$ = function (data, continuation) {
  };
  VfsProcessHandler.prototype.onErr_fqrh44$ = function (data, continuation) {
  };
  VfsProcessHandler.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'VfsProcessHandler',
    interfaces: []
  };
  function VfsProcessException(message) {
    IOException.call(this, message);
    this.name = 'VfsProcessException';
  }
  VfsProcessException.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'VfsProcessException',
    interfaces: [IOException]
  };
  function VfsSpecialReader(clazz) {
    this.clazz = clazz;
  }
  VfsSpecialReader.prototype.readSpecial_9oq4me$ = function (vfs, path, continuation) {
    throw new NotImplementedError_init('An operation is not implemented: ' + ('Not implemented VfsSpecialReader.readSpecial in ' + Kotlin.getKClassFromExpression(this)));
  };
  VfsSpecialReader.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'VfsSpecialReader',
    interfaces: []
  };
  var vfsSpecialReadersMap;
  function registerVfsSpecialReader(sr) {
    var $receiver = vfsSpecialReadersMap;
    var key = sr.clazz;
    $receiver.put_xwzc9p$(key, sr);
  }
  function register($receiver) {
    registerVfsSpecialReader($receiver);
  }
  function VfsStat(file, exists, isDirectory, size, device, inode, mode, owner, group, createTime, modifiedTime, lastAccessTime, extraInfo) {
    if (device === void 0)
      device = Kotlin.Long.NEG_ONE;
    if (inode === void 0)
      inode = Kotlin.Long.NEG_ONE;
    if (mode === void 0)
      mode = 511;
    if (owner === void 0)
      owner = 'nobody';
    if (group === void 0)
      group = 'nobody';
    if (createTime === void 0)
      createTime = Kotlin.Long.ZERO;
    if (modifiedTime === void 0)
      modifiedTime = createTime;
    if (lastAccessTime === void 0)
      lastAccessTime = modifiedTime;
    if (extraInfo === void 0)
      extraInfo = null;
    VfsNamed.call(this, file.path);
    this.file = file;
    this.exists = exists;
    this.isDirectory = isDirectory;
    this.size = size;
    this.device = device;
    this.inode = inode;
    this.mode = mode;
    this.owner = owner;
    this.group = group;
    this.createTime = createTime;
    this.modifiedTime = modifiedTime;
    this.lastAccessTime = lastAccessTime;
    this.extraInfo = extraInfo;
  }
  VfsStat.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'VfsStat',
    interfaces: [VfsNamed]
  };
  VfsStat.prototype.component1 = function () {
    return this.file;
  };
  VfsStat.prototype.component2 = function () {
    return this.exists;
  };
  VfsStat.prototype.component3 = function () {
    return this.isDirectory;
  };
  VfsStat.prototype.component4 = function () {
    return this.size;
  };
  VfsStat.prototype.component5 = function () {
    return this.device;
  };
  VfsStat.prototype.component6 = function () {
    return this.inode;
  };
  VfsStat.prototype.component7 = function () {
    return this.mode;
  };
  VfsStat.prototype.component8 = function () {
    return this.owner;
  };
  VfsStat.prototype.component9 = function () {
    return this.group;
  };
  VfsStat.prototype.component10 = function () {
    return this.createTime;
  };
  VfsStat.prototype.component11 = function () {
    return this.modifiedTime;
  };
  VfsStat.prototype.component12 = function () {
    return this.lastAccessTime;
  };
  VfsStat.prototype.component13 = function () {
    return this.extraInfo;
  };
  VfsStat.prototype.copy_jho7dq$ = function (file, exists, isDirectory, size, device, inode, mode, owner, group, createTime, modifiedTime, lastAccessTime, extraInfo) {
    return new VfsStat(file === void 0 ? this.file : file, exists === void 0 ? this.exists : exists, isDirectory === void 0 ? this.isDirectory : isDirectory, size === void 0 ? this.size : size, device === void 0 ? this.device : device, inode === void 0 ? this.inode : inode, mode === void 0 ? this.mode : mode, owner === void 0 ? this.owner : owner, group === void 0 ? this.group : group, createTime === void 0 ? this.createTime : createTime, modifiedTime === void 0 ? this.modifiedTime : modifiedTime, lastAccessTime === void 0 ? this.lastAccessTime : lastAccessTime, extraInfo === void 0 ? this.extraInfo : extraInfo);
  };
  VfsStat.prototype.toString = function () {
    return 'VfsStat(file=' + Kotlin.toString(this.file) + (', exists=' + Kotlin.toString(this.exists)) + (', isDirectory=' + Kotlin.toString(this.isDirectory)) + (', size=' + Kotlin.toString(this.size)) + (', device=' + Kotlin.toString(this.device)) + (', inode=' + Kotlin.toString(this.inode)) + (', mode=' + Kotlin.toString(this.mode)) + (', owner=' + Kotlin.toString(this.owner)) + (', group=' + Kotlin.toString(this.group)) + (', createTime=' + Kotlin.toString(this.createTime)) + (', modifiedTime=' + Kotlin.toString(this.modifiedTime)) + (', lastAccessTime=' + Kotlin.toString(this.lastAccessTime)) + (', extraInfo=' + Kotlin.toString(this.extraInfo)) + ')';
  };
  VfsStat.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.file) | 0;
    result = result * 31 + Kotlin.hashCode(this.exists) | 0;
    result = result * 31 + Kotlin.hashCode(this.isDirectory) | 0;
    result = result * 31 + Kotlin.hashCode(this.size) | 0;
    result = result * 31 + Kotlin.hashCode(this.device) | 0;
    result = result * 31 + Kotlin.hashCode(this.inode) | 0;
    result = result * 31 + Kotlin.hashCode(this.mode) | 0;
    result = result * 31 + Kotlin.hashCode(this.owner) | 0;
    result = result * 31 + Kotlin.hashCode(this.group) | 0;
    result = result * 31 + Kotlin.hashCode(this.createTime) | 0;
    result = result * 31 + Kotlin.hashCode(this.modifiedTime) | 0;
    result = result * 31 + Kotlin.hashCode(this.lastAccessTime) | 0;
    result = result * 31 + Kotlin.hashCode(this.extraInfo) | 0;
    return result;
  };
  VfsStat.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.file, other.file) && Kotlin.equals(this.exists, other.exists) && Kotlin.equals(this.isDirectory, other.isDirectory) && Kotlin.equals(this.size, other.size) && Kotlin.equals(this.device, other.device) && Kotlin.equals(this.inode, other.inode) && Kotlin.equals(this.mode, other.mode) && Kotlin.equals(this.owner, other.owner) && Kotlin.equals(this.group, other.group) && Kotlin.equals(this.createTime, other.createTime) && Kotlin.equals(this.modifiedTime, other.modifiedTime) && Kotlin.equals(this.lastAccessTime, other.lastAccessTime) && Kotlin.equals(this.extraInfo, other.extraInfo)))));
  };
  function get_createDate($receiver) {
    return new UTCDate($receiver.createTime);
  }
  function get_modifiedDate($receiver) {
    return new UTCDate($receiver.modifiedTime);
  }
  function get_lastAccessDate($receiver) {
    return new UTCDate($receiver.lastAccessTime);
  }
  function VfsUtil() {
    VfsUtil_instance = this;
  }
  VfsUtil.prototype.parts_61zpoe$ = function (path) {
    return split(path, Kotlin.charArrayOf(47));
  };
  VfsUtil.prototype.normalize_61zpoe$ = function (path) {
    var tmp$;
    var schemeIndex = indexOf_0(path, ':');
    if (schemeIndex >= 0) {
      var take = startsWith_0(path.substring(schemeIndex), '://') ? 3 : 1;
      var endIndex = schemeIndex + take | 0;
      var tmp$_0 = path.substring(0, endIndex);
      var tmp$_1 = this.normalize_61zpoe$;
      var startIndex = schemeIndex + take | 0;
      return tmp$_0 + tmp$_1.call(this, path.substring(startIndex));
    }
     else {
      var path2 = replace_0(path, 92, 47);
      var out = ArrayList_init();
      tmp$ = split_0(path2, ['/']).iterator();
      while (tmp$.hasNext()) {
        var part = tmp$.next();
        if (Kotlin.equals(part, '') || Kotlin.equals(part, '.')) {
          if (out.isEmpty()) {
            out.add_11rb$('');
          }
        }
         else if (Kotlin.equals(part, '..')) {
          if (!out.isEmpty())
            out.removeAt_za3lpa$(out.size - 1 | 0);
        }
         else {
          out.add_11rb$(part);
        }
      }
      return joinToString(out, '/');
    }
  };
  VfsUtil.prototype.combine_puj7f4$ = function (base, access) {
    return this.isAbsolute_61zpoe$(access) ? this.normalize_61zpoe$(access) : this.normalize_61zpoe$(base + '/' + access);
  };
  VfsUtil.prototype.lightCombine_puj7f4$ = function (base, access) {
    return base.length > 0 ? trimEnd(base, Kotlin.charArrayOf(47)) + '/' + trim(access, Kotlin.charArrayOf(47)) : access;
  };
  VfsUtil.prototype.isAbsolute_61zpoe$ = function (base) {
    if (base.length === 0)
      return false;
    var b = substringBefore(replace_0(base, 92, 47), 47);
    if (b.length === 0)
      return true;
    if (contains_0(b, 58))
      return true;
    return false;
  };
  VfsUtil.prototype.normalizeAbsolute_61zpoe$ = function (path) {
    return replace_0(path, 47, File_separatorChar);
  };
  VfsUtil.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'VfsUtil',
    interfaces: []
  };
  var VfsUtil_instance = null;
  function VfsUtil_getInstance() {
    if (VfsUtil_instance === null) {
      new VfsUtil();
    }
    return VfsUtil_instance;
  }
  function treeCreateZip($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$treeCreateZip($receiver_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$treeCreateZip($receiver_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$buf = void 0;
    this.local$mem = void 0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$treeCreateZip.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$treeCreateZip.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$treeCreateZip.prototype.constructor = Coroutine$treeCreateZip;
  Coroutine$treeCreateZip.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$buf = ByteArrayBuffer_init();
            this.local$mem = MemorySyncStream_0(this.local$buf);
            this.state_0 = 2;
            this.result_0 = treeCreateZipTo(this.local$$receiver, toAsync(this.local$mem), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.local$buf.toByteArray();
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function addZipFileEntry(s_0, entry_0, continuation_0, suspended) {
    var instance = new Coroutine$addZipFileEntry(s_0, entry_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$addZipFileEntry(s_0, entry_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$size = void 0;
    this.local$versionMadeBy = void 0;
    this.local$extractVersion = void 0;
    this.local$flags = void 0;
    this.local$compressionMethod = void 0;
    this.local$date = void 0;
    this.local$time = void 0;
    this.local$crc32 = void 0;
    this.local$name = void 0;
    this.local$nameBytes = void 0;
    this.local$extraBytes = void 0;
    this.local$compressedSize = void 0;
    this.local$uncompressedSize = void 0;
    this.local$headerOffset = void 0;
    this.local$s = s_0;
    this.local$entry = entry_0;
  }
  Coroutine$addZipFileEntry.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$addZipFileEntry.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$addZipFileEntry.prototype.constructor = Coroutine$addZipFileEntry;
  Coroutine$addZipFileEntry.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$entry.size(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$size = this.result_0.toInt();
            this.local$versionMadeBy = 788;
            this.local$extractVersion = 10;
            this.local$flags = 2048;
            this.local$compressionMethod = 0;
            this.local$date = 0;
            this.local$time = 0;
            this.state_0 = 3;
            this.result_0 = hashSync_1(this.local$entry, AsyncHash$Companion_getInstance().CRC32, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            this.local$crc32 = readS32_le_1(this.result_0, 0);
            this.local$name = trim(this.local$entry.fullname, Kotlin.charArrayOf(47));
            this.local$nameBytes = toByteArray(this.local$name, Charsets_getInstance().UTF_8);
            this.local$extraBytes = new Int8Array([]);
            this.local$compressedSize = this.local$size;
            this.local$uncompressedSize = this.local$size;
            this.local$headerOffset = this.local$s.position;
            this.state_0 = 4;
            this.result_0 = writeString(this.local$s, 'PK\x03\x04', void 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 4:
            this.state_0 = 5;
            this.result_0 = write16_le(this.local$s, this.local$extractVersion, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 5:
            this.state_0 = 6;
            this.result_0 = write16_le(this.local$s, this.local$flags, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 6:
            this.state_0 = 7;
            this.result_0 = write16_le(this.local$s, this.local$compressionMethod, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 7:
            this.state_0 = 8;
            this.result_0 = write16_le(this.local$s, this.local$date, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 8:
            this.state_0 = 9;
            this.result_0 = write16_le(this.local$s, this.local$time, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 9:
            this.state_0 = 10;
            this.result_0 = write32_le(this.local$s, this.local$crc32, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 10:
            this.state_0 = 11;
            this.result_0 = write32_le(this.local$s, this.local$compressedSize, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 11:
            this.state_0 = 12;
            this.result_0 = write32_le(this.local$s, this.local$uncompressedSize, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 12:
            this.state_0 = 13;
            this.result_0 = write16_le(this.local$s, this.local$nameBytes.length, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 13:
            this.state_0 = 14;
            this.result_0 = write16_le(this.local$s, this.local$extraBytes.length, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 14:
            this.state_0 = 15;
            this.result_0 = writeBytes(this.local$s, this.local$nameBytes, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 15:
            this.state_0 = 16;
            this.result_0 = writeBytes(this.local$s, this.local$extraBytes, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 16:
            this.state_0 = 17;
            this.result_0 = writeFile(this.local$s, this.local$entry, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 17:
            return new ZipEntry(this.local$versionMadeBy, this.local$extractVersion, this.local$headerOffset, this.local$compressionMethod, this.local$flags, this.local$date, this.local$time, this.local$crc32, this.local$compressedSize, this.local$uncompressedSize, this.local$nameBytes, this.local$extraBytes, 0, 0, 0, new Int8Array([]));
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function addZipFileEntryTree(s_0, entry_0, entries_0, continuation_0, suspended) {
    var instance = new Coroutine$addZipFileEntryTree(s_0, entry_0, entries_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$addZipFileEntryTree(s_0, entry_0, entries_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$tmp$ = void 0;
    this.local$it = void 0;
    this.local$element = void 0;
    this.local$s = s_0;
    this.local$entry = entry_0;
    this.local$entries = entries_0;
  }
  Coroutine$addZipFileEntryTree.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$addZipFileEntryTree.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$addZipFileEntryTree.prototype.constructor = Coroutine$addZipFileEntryTree;
  Coroutine$addZipFileEntryTree.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$entry.isDirectory(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            if (this.result_0) {
              this.state_0 = 4;
              this.result_0 = this.local$entry.list(this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              break;
            }
             else {
              this.state_0 = 3;
              this.result_0 = addZipFileEntry(this.local$s, this.local$entry, this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              break;
            }

          case 3:
            this.local$element = this.result_0;
            this.local$entries.add_11rb$(this.local$element);
            this.state_0 = 11;
            continue;
          case 4:
            this.local$tmp$ = this.result_0.iterator();
            this.state_0 = 5;
            continue;
          case 5:
            this.state_0 = 6;
            this.result_0 = this.local$tmp$.hasNext(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 6:
            if (!this.result_0) {
              this.state_0 = 10;
              continue;
            }
             else {
              this.state_0 = 7;
              continue;
            }

          case 7:
            this.state_0 = 8;
            this.result_0 = this.local$tmp$.next(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 8:
            this.local$it = this.result_0;
            this.state_0 = 9;
            this.result_0 = addZipFileEntryTree(this.local$s, this.local$it, this.local$entries, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 9:
            this.state_0 = 5;
            continue;
          case 10:
            this.state_0 = 11;
            continue;
          case 11:
            return;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function ZipEntry(versionMadeBy, extractVersion, headerOffset, compressionMethod, flags, date, time, crc32, compressedSize, uncompressedSize, nameBytes, extraBytes, diskNumberStart, internalAttributes, externalAttributes, commentBytes) {
    this.versionMadeBy = versionMadeBy;
    this.extractVersion = extractVersion;
    this.headerOffset = headerOffset;
    this.compressionMethod = compressionMethod;
    this.flags = flags;
    this.date = date;
    this.time = time;
    this.crc32 = crc32;
    this.compressedSize = compressedSize;
    this.uncompressedSize = uncompressedSize;
    this.nameBytes = nameBytes;
    this.extraBytes = extraBytes;
    this.diskNumberStart = diskNumberStart;
    this.internalAttributes = internalAttributes;
    this.externalAttributes = externalAttributes;
    this.commentBytes = commentBytes;
  }
  ZipEntry.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'ZipEntry',
    interfaces: []
  };
  function addDirEntry(s_0, e_0, continuation_0, suspended) {
    var instance = new Coroutine$addDirEntry(s_0, e_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$addDirEntry(s_0, e_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$s = s_0;
    this.local$e = e_0;
  }
  Coroutine$addDirEntry.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$addDirEntry.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$addDirEntry.prototype.constructor = Coroutine$addDirEntry;
  Coroutine$addDirEntry.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = writeString(this.local$s, 'PK\x01\x02', void 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = write16_le(this.local$s, this.local$e.versionMadeBy, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            this.state_0 = 4;
            this.result_0 = write16_le(this.local$s, this.local$e.extractVersion, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 4:
            this.state_0 = 5;
            this.result_0 = write16_le(this.local$s, this.local$e.flags, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 5:
            this.state_0 = 6;
            this.result_0 = write16_le(this.local$s, this.local$e.compressionMethod, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 6:
            this.state_0 = 7;
            this.result_0 = write16_le(this.local$s, this.local$e.date, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 7:
            this.state_0 = 8;
            this.result_0 = write16_le(this.local$s, this.local$e.time, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 8:
            this.state_0 = 9;
            this.result_0 = write32_le(this.local$s, this.local$e.crc32, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 9:
            this.state_0 = 10;
            this.result_0 = write32_le(this.local$s, this.local$e.compressedSize, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 10:
            this.state_0 = 11;
            this.result_0 = write32_le(this.local$s, this.local$e.uncompressedSize, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 11:
            this.state_0 = 12;
            this.result_0 = write16_le(this.local$s, this.local$e.nameBytes.length, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 12:
            this.state_0 = 13;
            this.result_0 = write16_le(this.local$s, this.local$e.extraBytes.length, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 13:
            this.state_0 = 14;
            this.result_0 = write16_le(this.local$s, this.local$e.commentBytes.length, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 14:
            this.state_0 = 15;
            this.result_0 = write16_le(this.local$s, this.local$e.diskNumberStart, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 15:
            this.state_0 = 16;
            this.result_0 = write16_le(this.local$s, this.local$e.internalAttributes, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 16:
            this.state_0 = 17;
            this.result_0 = write32_le(this.local$s, this.local$e.externalAttributes, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 17:
            this.state_0 = 18;
            this.result_0 = write32_le(this.local$s, this.local$e.headerOffset.toInt(), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 18:
            this.state_0 = 19;
            this.result_0 = writeBytes(this.local$s, this.local$e.nameBytes, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 19:
            this.state_0 = 20;
            this.result_0 = writeBytes(this.local$s, this.local$e.extraBytes, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 20:
            this.state_0 = 21;
            this.result_0 = writeBytes(this.local$s, this.local$e.commentBytes, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 21:
            return;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function treeCreateZipTo($receiver_0, s_0, continuation_0, suspended) {
    var instance = new Coroutine$treeCreateZipTo($receiver_0, s_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$treeCreateZipTo($receiver_0, s_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$tmp$ = void 0;
    this.local$entries = void 0;
    this.local$directoryStart = void 0;
    this.local$entry = void 0;
    this.local$directoryEnd = void 0;
    this.local$comment = void 0;
    this.local$$receiver = $receiver_0;
    this.local$s = s_0;
  }
  Coroutine$treeCreateZipTo.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$treeCreateZipTo.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$treeCreateZipTo.prototype.constructor = Coroutine$treeCreateZipTo;
  Coroutine$treeCreateZipTo.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$entries = ArrayList_init();
            this.state_0 = 2;
            this.result_0 = addZipFileEntryTree(this.local$s, this.local$$receiver, this.local$entries, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$directoryStart = this.local$s.position;
            this.local$tmp$ = this.local$entries.iterator();
            this.state_0 = 3;
            continue;
          case 3:
            if (!this.local$tmp$.hasNext()) {
              this.state_0 = 5;
              continue;
            }

            this.local$entry = this.local$tmp$.next();
            this.state_0 = 4;
            this.result_0 = addDirEntry(this.local$s, this.local$entry, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 4:
            this.state_0 = 3;
            continue;
          case 5:
            this.local$directoryEnd = this.local$s.position;
            this.local$comment = new Int8Array([]);
            this.state_0 = 6;
            this.result_0 = writeString(this.local$s, 'PK\x05\x06', void 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 6:
            this.state_0 = 7;
            this.result_0 = write16_le(this.local$s, 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 7:
            this.state_0 = 8;
            this.result_0 = write16_le(this.local$s, 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 8:
            this.state_0 = 9;
            this.result_0 = write16_le(this.local$s, this.local$entries.size, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 9:
            this.state_0 = 10;
            this.result_0 = write16_le(this.local$s, this.local$entries.size, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 10:
            this.state_0 = 11;
            this.result_0 = write32_le(this.local$s, this.local$directoryEnd.subtract(this.local$directoryStart).toInt(), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 11:
            this.state_0 = 12;
            this.result_0 = write32_le(this.local$s, this.local$directoryStart.toInt(), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 12:
            this.state_0 = 13;
            this.result_0 = write16_le(this.local$s, this.local$comment.length, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 13:
            this.state_0 = 14;
            this.result_0 = writeBytes(this.local$s, this.local$comment, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 14:
            return;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function ZipVfs$normalizeName($receiver) {
    return trim($receiver, Kotlin.charArrayOf(47));
  }
  function ZipVfs$ZipEntry(path, compressionMethod, isDirectory, time, offset, inode, headerEntry, compressedSize, uncompressedSize) {
    this.path = path;
    this.compressionMethod = compressionMethod;
    this.isDirectory = isDirectory;
    this.time = time;
    this.offset = offset;
    this.inode = inode;
    this.headerEntry = headerEntry;
    this.compressedSize = compressedSize;
    this.uncompressedSize = uncompressedSize;
  }
  ZipVfs$ZipEntry.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'ZipEntry',
    interfaces: []
  };
  function ZipVfs$toStat($receiver, file) {
    var tmp$;
    var vfs = file.vfs;
    if ($receiver != null) {
      tmp$ = vfs.createExistsStat_sjl0ub$(file.path, $receiver.isDirectory, $receiver.uncompressedSize, void 0, $receiver.inode, void 0, void 0, void 0, $receiver.time.utcTimestamp);
    }
     else {
      tmp$ = vfs.createNonExistsStat_4w9ihe$(file.path);
    }
    return tmp$;
  }
  function ZipVfs$Impl(closure$files, closure$normalizeName, closure$toStat, closure$filesPerFolder, closure$zipFile) {
    this.closure$files = closure$files;
    this.closure$normalizeName = closure$normalizeName;
    this.closure$toStat = closure$toStat;
    this.closure$filesPerFolder = closure$filesPerFolder;
    this.closure$zipFile = closure$zipFile;
    Vfs.call(this);
    this.vfs = this;
  }
  ZipVfs$Impl.prototype.open_j4ip3x$ = function (path_0, mode_0, continuation_0, suspended) {
    var instance = new Coroutine$open_j4ip3x$_3(this, path_0, mode_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$open_j4ip3x$_3($this, path_0, mode_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$tmp$ = void 0;
    this.local$entry = void 0;
    this.local$base = void 0;
    this.local$closure$continuation = void 0;
    this.local$block$result = void 0;
    this.local$tmp$_0 = void 0;
    this.local$version = void 0;
    this.local$flags = void 0;
    this.local$compressionType = void 0;
    this.local$fileTime = void 0;
    this.local$fileDate = void 0;
    this.local$crc = void 0;
    this.local$compressedSize = void 0;
    this.local$uncompressedSize = void 0;
    this.local$fileNameLength = void 0;
    this.local$extraLength = void 0;
    this.local$name = void 0;
    this.local$extra = void 0;
    this.local$compressedData = void 0;
    this.local$path = path_0;
    this.local$mode = mode_0;
  }
  Coroutine$open_j4ip3x$_3.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$open_j4ip3x$_3.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$open_j4ip3x$_3.prototype.constructor = Coroutine$open_j4ip3x$_3;
  Coroutine$open_j4ip3x$_3.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$tmp$ = this.$this.closure$files.get_11rb$(this.$this.closure$normalizeName(this.local$path));
            if (this.local$tmp$ == null) {
              throw new FileNotFoundException("Path: '" + this.local$path + "'");
            }

            this.local$entry = this.local$tmp$;
            if (this.local$entry.isDirectory)
              throw new IOException("Can't open a zip directory for " + this.local$mode);
            this.state_0 = 2;
            this.result_0 = slice_2(this.local$entry.headerEntry, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$base = this.result_0;
            this.local$closure$continuation = this;
            this.state_0 = 3;
            this.result_0 = this.local$base.getAvailable(this.local$closure$continuation);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            if (this.local$closure$continuation.result_0.compareTo_11rb$(Kotlin.Long.fromInt(16)) < 0)
              throw new IllegalStateException('Chunk to small to be a ZIP chunk');
            this.state_0 = 4;
            this.result_0 = readS32_be(this.local$base, this.local$closure$continuation);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 4:
            if (this.local$closure$continuation.result_0 !== 1347093252)
              throw new IllegalStateException('Not a zip file');
            this.state_0 = 5;
            this.result_0 = readU16_le(this.local$base, this.local$closure$continuation);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 5:
            this.local$version = this.local$closure$continuation.result_0;
            this.state_0 = 6;
            this.result_0 = readU16_le(this.local$base, this.local$closure$continuation);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 6:
            this.local$flags = this.local$closure$continuation.result_0;
            this.state_0 = 7;
            this.result_0 = readU16_le(this.local$base, this.local$closure$continuation);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 7:
            this.local$compressionType = this.local$closure$continuation.result_0;
            this.state_0 = 8;
            this.result_0 = readU16_le(this.local$base, this.local$closure$continuation);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 8:
            this.local$fileTime = this.local$closure$continuation.result_0;
            this.state_0 = 9;
            this.result_0 = readU16_le(this.local$base, this.local$closure$continuation);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 9:
            this.local$fileDate = this.local$closure$continuation.result_0;
            this.state_0 = 10;
            this.result_0 = readS32_le(this.local$base, this.local$closure$continuation);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 10:
            this.local$crc = this.local$closure$continuation.result_0;
            this.state_0 = 11;
            this.result_0 = readS32_le(this.local$base, this.local$closure$continuation);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 11:
            this.local$compressedSize = this.local$closure$continuation.result_0;
            this.state_0 = 12;
            this.result_0 = readS32_le(this.local$base, this.local$closure$continuation);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 12:
            this.local$uncompressedSize = this.local$closure$continuation.result_0;
            this.state_0 = 13;
            this.result_0 = readU16_le(this.local$base, this.local$closure$continuation);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 13:
            this.local$fileNameLength = this.local$closure$continuation.result_0;
            this.state_0 = 14;
            this.result_0 = readU16_le(this.local$base, this.local$closure$continuation);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 14:
            this.local$extraLength = this.local$closure$continuation.result_0;
            this.state_0 = 15;
            this.result_0 = readString(this.local$base, this.local$fileNameLength, void 0, this.local$closure$continuation);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 15:
            this.local$name = this.local$closure$continuation.result_0;
            this.state_0 = 16;
            this.result_0 = readBytes(this.local$base, this.local$extraLength, this.local$closure$continuation);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 16:
            this.local$extra = this.local$closure$continuation.result_0;
            this.state_0 = 17;
            this.result_0 = readSlice(this.local$base, this.local$entry.compressedSize, this.local$closure$continuation);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 17:
            this.local$compressedData = this.local$closure$continuation.result_0;
            this.local$tmp$_0 = this.local$entry.compressionMethod;
            if (this.local$tmp$_0 === 0) {
              this.local$block$result = this.local$compressedData;
            }
             else if (this.local$tmp$_0 === 8) {
              this.local$block$result = toAsyncStream(new InflateAsyncStream(this.local$compressedData, new Inflater(true), Kotlin.Long.fromInt(this.local$uncompressedSize)));
            }
             else {
              throw new NotImplementedError_init('An operation is not implemented: ' + ('Not implemented zip method ' + this.local$entry.compressionMethod));
            }

            return this.local$block$result;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  ZipVfs$Impl.prototype.stat_61zpoe$ = function (path, continuation) {
    return this.closure$toStat(this.closure$files.get_11rb$(this.closure$normalizeName(path)), this.get_61zpoe$(path));
  };
  function ZipVfs$Impl$list$lambda$lambda(closure$filesPerFolder_0, closure$path_0, closure$normalizeName_0, this$Impl_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$ZipVfs$Impl$list$lambda$lambda(closure$filesPerFolder_0, closure$path_0, closure$normalizeName_0, this$Impl_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$ZipVfs$Impl$list$lambda$lambda(closure$filesPerFolder_0, closure$path_0, closure$normalizeName_0, this$Impl_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$closure$filesPerFolder = closure$filesPerFolder_0;
    this.local$closure$path = closure$path_0;
    this.local$closure$normalizeName = closure$normalizeName_0;
    this.local$this$Impl = this$Impl_0;
    this.local$tmp$ = void 0;
    this.local$tmp$_0 = void 0;
    this.local$tmp$_1 = void 0;
    this.local$name = void 0;
    this.local$entry = void 0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$ZipVfs$Impl$list$lambda$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$ZipVfs$Impl$list$lambda$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$ZipVfs$Impl$list$lambda$lambda.prototype.constructor = Coroutine$ZipVfs$Impl$list$lambda$lambda;
  Coroutine$ZipVfs$Impl$list$lambda$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$tmp$_0 = ((this.local$tmp$ = this.local$closure$filesPerFolder.get_11rb$(this.local$closure$normalizeName(this.local$closure$path))) != null ? this.local$tmp$ : lmapOf([])).entries.iterator();
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            if (!this.local$tmp$_0.hasNext()) {
              this.state_0 = 4;
              continue;
            }

            this.local$tmp$_1 = this.local$tmp$_0.next();
            this.local$name = this.local$tmp$_1.key;
            this.local$entry = this.local$tmp$_1.value;
            this.state_0 = 3;
            this.result_0 = this.local$$receiver.yield_11rb$(this.local$this$Impl.vfs.get_61zpoe$(this.local$entry.path), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            this.state_0 = 2;
            continue;
          case 4:
            return Unit;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function ZipVfs$Impl$list$lambda(closure$filesPerFolder_0, closure$path_0, closure$normalizeName_0, this$Impl_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$ZipVfs$Impl$list$lambda(closure$filesPerFolder_0, closure$path_0, closure$normalizeName_0, this$Impl_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$ZipVfs$Impl$list$lambda(closure$filesPerFolder_0, closure$path_0, closure$normalizeName_0, this$Impl_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$closure$filesPerFolder = closure$filesPerFolder_0;
    this.local$closure$path = closure$path_0;
    this.local$closure$normalizeName = closure$normalizeName_0;
    this.local$this$Impl = this$Impl_0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$ZipVfs$Impl$list$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$ZipVfs$Impl$list$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$ZipVfs$Impl$list$lambda.prototype.constructor = Coroutine$ZipVfs$Impl$list$lambda;
  Coroutine$ZipVfs$Impl$list$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            return asyncGenerate(this.local$$receiver, ZipVfs$Impl$list$lambda$lambda(this.local$closure$filesPerFolder, this.local$closure$path, this.local$closure$normalizeName, this.local$this$Impl));
          case 1:
            throw this.exception_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  ZipVfs$Impl.prototype.list_61zpoe$ = function (path_0, continuation_0, suspended) {
    var instance = new Coroutine$list_61zpoe$_3(this, path_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$list_61zpoe$_3($this, path_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$path = path_0;
  }
  Coroutine$list_61zpoe$_3.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$list_61zpoe$_3.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$list_61zpoe$_3.prototype.constructor = Coroutine$list_61zpoe$_3;
  Coroutine$list_61zpoe$_3.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = withCoroutineContext(ZipVfs$Impl$list$lambda(this.$this.closure$filesPerFolder, this.local$path, this.$this.closure$normalizeName, this.$this), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  ZipVfs$Impl.prototype.toString = function () {
    return 'ZipVfs(' + Kotlin.toString(this.closure$zipFile) + ')';
  };
  ZipVfs$Impl.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'Impl',
    interfaces: [Vfs]
  };
  var max = Kotlin.kotlin.js.max_bug313$;
  function ZipVfs(s_0, zipFile_0, continuation_0, suspended) {
    var instance = new Coroutine$ZipVfs(s_0, zipFile_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$ZipVfs(s_0, zipFile_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$tmp$ = void 0;
    this.local$tmp$_0 = void 0;
    this.local$endBytes = void 0;
    this.local$PK_END = void 0;
    this.local$pk_endIndex = void 0;
    this.local$chunkSize = void 0;
    this.local$b = void 0;
    this.local$$receiver = void 0;
    this.local$fromIndex = void 0;
    this.local$toIndex = void 0;
    this.local$data = void 0;
    this.local$normalizeName = void 0;
    this.local$toStat = void 0;
    this.local$files = void 0;
    this.local$filesPerFolder = void 0;
    this.local$closure$continuation = void 0;
    this.local$diskNumber = void 0;
    this.local$startDiskNumber = void 0;
    this.local$entriesOnDisk = void 0;
    this.local$entriesInDirectory = void 0;
    this.local$directorySize = void 0;
    this.local$directoryOffset = void 0;
    this.local$commentLength = void 0;
    this.local$ds = void 0;
    this.local$tmp$_1 = void 0;
    this.local$tmp$_2 = void 0;
    this.local$tmp$_3 = void 0;
    this.local$n = void 0;
    this.local$versionMade = void 0;
    this.local$versionExtract = void 0;
    this.local$flags = void 0;
    this.local$compressionMethod = void 0;
    this.local$fileTime = void 0;
    this.local$fileDate = void 0;
    this.local$crc = void 0;
    this.local$compressedSize = void 0;
    this.local$uncompressedSize = void 0;
    this.local$fileNameLength = void 0;
    this.local$extraLength = void 0;
    this.local$fileCommentLength = void 0;
    this.local$diskNumberStart = void 0;
    this.local$internalAttributes = void 0;
    this.local$externalAttributes = void 0;
    this.local$headerOffset = void 0;
    this.local$name = void 0;
    this.local$extra = void 0;
    this.local$isDirectory = void 0;
    this.local$normalizedName = void 0;
    this.local$baseFolder = void 0;
    this.local$baseName = void 0;
    this.local$tmp$_4 = void 0;
    this.local$value = void 0;
    this.local$answer = void 0;
    this.local$folder = void 0;
    this.local$entry = void 0;
    this.local$components = void 0;
    this.local$m = void 0;
    this.local$f = void 0;
    this.local$c = void 0;
    this.local$tmp$_5 = void 0;
    this.local$tmp$_6 = void 0;
    this.local$value_0 = void 0;
    this.local$answer_0 = void 0;
    this.local$folder2 = void 0;
    this.local$entry2 = void 0;
    this.local$key = void 0;
    this.local$value_1 = void 0;
    this.local$s = s_0;
    this.local$zipFile = zipFile_0;
  }
  Coroutine$ZipVfs.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$ZipVfs.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$ZipVfs.prototype.constructor = Coroutine$ZipVfs;
  Coroutine$ZipVfs.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$zipFile === void 0)
              this.local$zipFile = null;
            this.local$endBytes = new Int8Array(0);
            this.local$PK_END = new Int8Array([80, 75, 5, 6]);
            this.local$pk_endIndex = -1;
            this.local$tmp$ = listOf_0([22, 256, 4096, 65536]).iterator();
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            if (!this.local$tmp$.hasNext()) {
              this.state_0 = 8;
              continue;
            }

            this.local$chunkSize = this.local$tmp$.next();
            this.local$tmp$_0 = Kotlin.Long.ZERO;
            this.state_0 = 3;
            this.result_0 = this.local$s.getLength(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            this.state_0 = 4;
            this.result_0 = this.local$s.setPosition_s8cxhz$(max(Math_0, this.local$tmp$_0, this.result_0.subtract(Kotlin.Long.fromInt(this.local$chunkSize))), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 4:
            this.state_0 = 5;
            this.result_0 = this.local$s.getAvailable(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 5:
            this.local$b = toIntClamp(this.result_0);
            this.state_0 = 6;
            this.result_0 = readBytesExact(this.local$s, Math_0.max(this.local$chunkSize, this.local$b), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 6:
            this.local$endBytes = this.result_0;
            this.local$pk_endIndex = indexOf_3(this.local$endBytes, this.local$PK_END);
            if (this.local$pk_endIndex >= 0) {
              this.state_0 = 8;
              continue;
            }
             else {
              this.state_0 = 7;
              continue;
            }

          case 7:
            this.state_0 = 2;
            continue;
          case 8:
            if (this.local$pk_endIndex < 0)
              throw new IllegalArgumentException('Not a zip file');
            this.local$$receiver = this.local$endBytes;
            this.local$fromIndex = this.local$pk_endIndex;
            this.local$toIndex = this.local$endBytes.length;
            this.local$data = openSync(this.local$$receiver.slice(this.local$fromIndex, this.local$toIndex));
            this.local$normalizeName = ZipVfs$normalizeName;
            this.local$toStat = ZipVfs$toStat;
            this.local$files = lmapOf([]);
            this.local$filesPerFolder = lmapOf([]);
            this.local$closure$continuation = this;
            if (readS32_be_0(this.local$data) !== 1347093766)
              throw new IllegalStateException('Not a zip file');
            this.local$diskNumber = readU16_le_0(this.local$data);
            this.local$startDiskNumber = readU16_le_0(this.local$data);
            this.local$entriesOnDisk = readU16_le_0(this.local$data);
            this.local$entriesInDirectory = readU16_le_0(this.local$data);
            this.local$directorySize = readS32_le_0(this.local$data);
            this.local$directoryOffset = readS32_le_0(this.local$data);
            this.local$commentLength = readU16_le_0(this.local$data);
            this.state_0 = 9;
            this.result_0 = sliceWithSize(this.local$s, Kotlin.Long.fromInt(this.local$directoryOffset), Kotlin.Long.fromInt(this.local$directorySize), this.local$closure$continuation);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 9:
            this.state_0 = 10;
            this.result_0 = readAvailable(this.local$closure$continuation.result_0, this.local$closure$continuation);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 10:
            this.local$ds = openSync(this.local$closure$continuation.result_0);
            this.local$n = 0;
            this.state_0 = 11;
            continue;
          case 11:
            if (this.local$n >= this.local$entriesInDirectory) {
              this.state_0 = 14;
              continue;
            }

            if (readS32_be_0(this.local$ds) !== 1347092738)
              throw new IllegalStateException('Not a zip file record');
            this.local$versionMade = readU16_le_0(this.local$ds);
            this.local$versionExtract = readU16_le_0(this.local$ds);
            this.local$flags = readU16_le_0(this.local$ds);
            this.local$compressionMethod = readU16_le_0(this.local$ds);
            this.local$fileTime = readU16_le_0(this.local$ds);
            this.local$fileDate = readU16_le_0(this.local$ds);
            this.local$crc = readS32_le_0(this.local$ds);
            this.local$compressedSize = readS32_le_0(this.local$ds);
            this.local$uncompressedSize = readS32_le_0(this.local$ds);
            this.local$fileNameLength = readU16_le_0(this.local$ds);
            this.local$extraLength = readU16_le_0(this.local$ds);
            this.local$fileCommentLength = readU16_le_0(this.local$ds);
            this.local$diskNumberStart = readU16_le_0(this.local$ds);
            this.local$internalAttributes = readU16_le_0(this.local$ds);
            this.local$externalAttributes = readS32_le_0(this.local$ds);
            this.local$headerOffset = readS32_le_0(this.local$ds);
            this.local$name = readString_0(this.local$ds, this.local$fileNameLength);
            this.local$extra = readBytes_0(this.local$ds, this.local$extraLength);
            this.local$isDirectory = endsWith_0(this.local$name, '/');
            this.local$normalizedName = this.local$normalizeName(this.local$name);
            this.local$baseFolder = substringBeforeLast(this.local$normalizedName, 47, '');
            this.local$baseName = substringAfterLast(this.local$normalizedName, 47);
            this.local$value = this.local$filesPerFolder.get_11rb$(this.local$baseFolder);
            if (this.local$value == null) {
              this.local$answer = lmapOf([]);
              this.local$filesPerFolder.put_xwzc9p$(this.local$baseFolder, this.local$answer);
              this.local$tmp$_4 = this.local$answer;
            }
             else {
              this.local$tmp$_4 = this.local$value;
            }

            this.local$folder = this.local$tmp$_4;
            this.local$tmp$_1 = new DosFileDateTime(this.local$fileTime, this.local$fileDate);
            this.local$tmp$_2 = Kotlin.Long.fromInt(this.local$n);
            this.state_0 = 12;
            this.result_0 = sliceWithStart(this.local$s, toUInt(this.local$headerOffset), this.local$closure$continuation);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 12:
            this.local$entry = new ZipVfs$ZipEntry(this.local$name, this.local$compressionMethod, this.local$isDirectory, this.local$tmp$_1, this.local$headerOffset, this.local$tmp$_2, this.local$closure$continuation.result_0, toUInt(this.local$compressedSize), toUInt(this.local$uncompressedSize));
            this.local$components = plus(listOf(''), (new PathInfo(this.local$normalizedName)).getFullComponents());
            this.local$tmp$_3 = this.local$components.size;
            for (this.local$m = 1; this.local$m < this.local$tmp$_3; this.local$m++) {
              this.local$f = this.local$components.get_za3lpa$(this.local$m - 1 | 0);
              this.local$c = this.local$components.get_za3lpa$(this.local$m);
              if (!(Kotlin.isType(this.local$tmp$_5 = this.local$files, Map) ? this.local$tmp$_5 : Kotlin.throwCCE()).containsKey_11rb$(this.local$c)) {
                this.local$value_0 = this.local$filesPerFolder.get_11rb$(this.local$f);
                if (this.local$value_0 == null) {
                  this.local$answer_0 = lmapOf([]);
                  this.local$filesPerFolder.put_xwzc9p$(this.local$f, this.local$answer_0);
                  this.local$tmp$_6 = this.local$answer_0;
                }
                 else {
                  this.local$tmp$_6 = this.local$value_0;
                }
                this.local$folder2 = this.local$tmp$_6;
                this.local$entry2 = new ZipVfs$ZipEntry(this.local$c, 0, true, new DosFileDateTime(0, 0), 0, Kotlin.Long.ZERO, openAsync(new Int8Array([])), Kotlin.Long.ZERO, Kotlin.Long.ZERO);
                this.local$key = (new PathInfo(this.local$c)).basename;
                this.local$folder2.put_xwzc9p$(this.local$key, this.local$entry2);
                this.local$files.put_xwzc9p$(this.local$c, this.local$entry2);
              }
            }

            this.local$folder.put_xwzc9p$(this.local$baseName, this.local$entry);
            this.local$files.put_xwzc9p$(this.local$normalizedName, this.local$entry);
            this.state_0 = 13;
            continue;
          case 13:
            this.local$n++;
            this.state_0 = 11;
            continue;
          case 14:
            this.local$value_1 = new ZipVfs$ZipEntry('', 0, true, new DosFileDateTime(0, 0), 0, Kotlin.Long.ZERO, openAsync(new Int8Array([])), Kotlin.Long.ZERO, Kotlin.Long.ZERO);
            this.local$files.put_xwzc9p$('', this.local$value_1);
            return (new ZipVfs$Impl(this.local$files, this.local$normalizeName, this.local$toStat, this.local$filesPerFolder, this.local$zipFile)).root;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function DosFileDateTime(dosTime, dosDate) {
    this.dosTime = dosTime;
    this.dosDate = dosDate;
    this.date_rycc3m$_0 = lazy(DosFileDateTime$date$lambda(this));
    this.utcTimestamp_rveaou$_0 = lazy(DosFileDateTime$utcTimestamp$lambda(this));
  }
  Object.defineProperty(DosFileDateTime.prototype, 'seconds', {
    get: function () {
      return 2 * getBits(this.dosTime, 0, 5) | 0;
    }
  });
  Object.defineProperty(DosFileDateTime.prototype, 'minutes', {
    get: function () {
      return getBits(this.dosTime, 5, 6);
    }
  });
  Object.defineProperty(DosFileDateTime.prototype, 'hours', {
    get: function () {
      return getBits(this.dosTime, 11, 5);
    }
  });
  Object.defineProperty(DosFileDateTime.prototype, 'day', {
    get: function () {
      return getBits(this.dosDate, 0, 5);
    }
  });
  Object.defineProperty(DosFileDateTime.prototype, 'month1', {
    get: function () {
      return getBits(this.dosDate, 5, 4);
    }
  });
  Object.defineProperty(DosFileDateTime.prototype, 'fullYear', {
    get: function () {
      return 1980 + getBits(this.dosDate, 9, 7) | 0;
    }
  });
  Object.defineProperty(DosFileDateTime.prototype, 'date', {
    get: function () {
      var $receiver = this.date_rycc3m$_0;
      new Kotlin.PropertyMetadata('date');
      return $receiver.value;
    }
  });
  Object.defineProperty(DosFileDateTime.prototype, 'utcTimestamp', {
    get: function () {
      var $receiver = this.utcTimestamp_rveaou$_0;
      new Kotlin.PropertyMetadata('utcTimestamp');
      return $receiver.value;
    }
  });
  function DosFileDateTime$date$lambda(this$DosFileDateTime) {
    return function () {
      return UTCDate$Companion_getInstance().invoke_mbbjvw$(this$DosFileDateTime.fullYear, this$DosFileDateTime.month1 - 1 | 0, this$DosFileDateTime.day, this$DosFileDateTime.hours, this$DosFileDateTime.minutes, this$DosFileDateTime.seconds);
    };
  }
  function DosFileDateTime$utcTimestamp$lambda(this$DosFileDateTime) {
    return function () {
      return this$DosFileDateTime.date.time;
    };
  }
  DosFileDateTime.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'DosFileDateTime',
    interfaces: []
  };
  function openAsZip($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$openAsZip($receiver_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$openAsZip($receiver_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$openAsZip.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$openAsZip.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$openAsZip.prototype.constructor = Coroutine$openAsZip;
  Coroutine$openAsZip.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$$receiver.open_7c7tmz$(VfsOpenMode$READ_getInstance(), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = ZipVfs(this.result_0, this.local$$receiver, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 3:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function openAsZip_0($receiver, continuation) {
    return ZipVfs($receiver, void 0, continuation);
  }
  function InflateAsyncStream(base, inflater, uncompressedSize) {
    if (uncompressedSize === void 0)
      uncompressedSize = null;
    this.base = base;
    this.inflater = inflater;
    this.uncompressedSize = uncompressedSize;
  }
  function InflateAsyncStream$read$lambda(this$InflateAsyncStream_0, closure$buffer_0, closure$offset_0, closure$len_0) {
    return function (continuation_0, suspended) {
      var instance = new Coroutine$InflateAsyncStream$read$lambda(this$InflateAsyncStream_0, closure$buffer_0, closure$offset_0, closure$len_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$InflateAsyncStream$read$lambda(this$InflateAsyncStream_0, closure$buffer_0, closure$offset_0, closure$len_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$this$InflateAsyncStream = this$InflateAsyncStream_0;
    this.local$closure$buffer = closure$buffer_0;
    this.local$closure$offset = closure$offset_0;
    this.local$closure$len = closure$len_0;
  }
  Coroutine$InflateAsyncStream$read$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$InflateAsyncStream$read$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$InflateAsyncStream$read$lambda.prototype.constructor = Coroutine$InflateAsyncStream$read$lambda;
  Coroutine$InflateAsyncStream$read$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            return this.local$this$InflateAsyncStream.inflater.inflate_mj6st8$(this.local$closure$buffer, this.local$closure$offset, this.local$closure$len);
          case 1:
            throw this.exception_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  InflateAsyncStream.prototype.read_mj6st8$ = function (buffer_0, offset_0, len_0, continuation_0, suspended) {
    var instance = new Coroutine$read_mj6st8$_3(this, buffer_0, offset_0, len_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$read_mj6st8$_3($this, buffer_0, offset_0, len_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$tmp$ = void 0;
    this.local$buffer = buffer_0;
    this.local$offset = offset_0;
    this.local$len = len_0;
  }
  Coroutine$read_mj6st8$_3.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$read_mj6st8$_3.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$read_mj6st8$_3.prototype.constructor = Coroutine$read_mj6st8$_3;
  Coroutine$read_mj6st8$_3.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.$this.inflater.needsInput()) {
              this.local$tmp$ = this.$this.inflater;
              this.state_0 = 2;
              this.result_0 = readBytes(this.$this.base, 1024, this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              break;
            }
             else {
              this.state_0 = 3;
              continue;
            }

          case 1:
            throw this.exception_0;
          case 2:
            this.local$tmp$.setInput_fqrh44$(this.result_0);
            this.state_0 = 3;
            continue;
          case 3:
            this.state_0 = 4;
            this.result_0 = executeInWorker(InflateAsyncStream$read$lambda(this.$this, this.local$buffer, this.local$offset, this.local$len), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 4:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  InflateAsyncStream.prototype.setLength_s8cxhz$ = function (value, continuation) {
    throw new UnsupportedOperationException();
  };
  InflateAsyncStream.prototype.getLength = function (continuation) {
    var tmp$;
    tmp$ = this.uncompressedSize;
    if (tmp$ == null) {
      throw new UnsupportedOperationException();
    }
    return tmp$;
  };
  InflateAsyncStream.prototype.close = function (continuation) {
    this.inflater.end();
  };
  InflateAsyncStream.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'InflateAsyncStream',
    interfaces: [AsyncLengthStream, AsyncInputStream, AsyncCloseable]
  };
  function Thread_sleep(time) {
  }
  var eventLoopFactoryDefaultImpl;
  function EventLoopFactoryJs() {
    EventLoopFactory.call(this);
  }
  EventLoopFactoryJs.prototype.createEventLoop = function () {
    return new EventLoopJs();
  };
  EventLoopFactoryJs.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'EventLoopFactoryJs',
    interfaces: [EventLoopFactory]
  };
  function EventLoopJs() {
    EventLoop.call(this);
    this.immediateHandlers = new LinkedList();
    this.insideImmediate = false;
  }
  EventLoopJs.prototype.setImmediateInternal_o14v8n$ = function (handler) {
    this.immediateHandlers.add_11rb$(handler);
    if (!this.insideImmediate) {
      this.insideImmediate = true;
      try {
        while (this.immediateHandlers.isNotEmpty()) {
          var fhandler = this.immediateHandlers.removeFirst();
          fhandler();
        }
      }
      finally {
        this.insideImmediate = false;
      }
    }
  };
  function EventLoopJs$setTimeoutInternal$lambda(closure$callback) {
    return function () {
      closure$callback();
      return Unit;
    };
  }
  function EventLoopJs$setTimeoutInternal$lambda_0(closure$id) {
    return function () {
      global_0.clearInterval(closure$id);
      return Unit;
    };
  }
  EventLoopJs.prototype.setTimeoutInternal_n53o35$ = function (ms, callback) {
    var id = window.setTimeout(EventLoopJs$setTimeoutInternal$lambda(callback), ms);
    return Closeable_0(EventLoopJs$setTimeoutInternal$lambda_0(id));
  };
  function EventLoopJs$requestAnimationFrameInternal$lambda(closure$callback) {
    return function () {
      closure$callback();
      return Unit;
    };
  }
  function EventLoopJs$requestAnimationFrameInternal$lambda_0(closure$id) {
    return function () {
      global_0.cancelAnimationFrame(closure$id);
      return Unit;
    };
  }
  EventLoopJs.prototype.requestAnimationFrameInternal_o14v8n$ = function (callback) {
    var id = global_0.requestAnimationFrame(EventLoopJs$requestAnimationFrameInternal$lambda(callback));
    return Closeable_0(EventLoopJs$requestAnimationFrameInternal$lambda_0(id));
  };
  function EventLoopJs$setIntervalInternal$lambda(closure$callback) {
    return function () {
      closure$callback();
      return Unit;
    };
  }
  function EventLoopJs$setIntervalInternal$lambda_0(closure$id) {
    return function () {
      global_0.clearInterval(closure$id);
      return Unit;
    };
  }
  EventLoopJs.prototype.setIntervalInternal_n53o35$ = function (ms, callback) {
    var id = global_0.setInterval(EventLoopJs$setIntervalInternal$lambda(callback), ms);
    return Closeable_0(EventLoopJs$setIntervalInternal$lambda_0(id));
  };
  EventLoopJs.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'EventLoopJs',
    interfaces: [EventLoop]
  };
  function executeInWorker(callback, continuation) {
    return callback(continuation);
  }
  function Compression() {
    Compression_instance = this;
  }
  Compression.prototype.uncompressGzip_fqrh44$ = function (data, continuation) {
    throw new NotImplementedError_init();
  };
  Compression.prototype.uncompressZlib_fqrh44$ = function (data, continuation) {
    throw new NotImplementedError_init();
  };
  Compression.prototype.compressGzip_ir89t6$ = function (data, level, continuation) {
    throw new NotImplementedError_init();
  };
  Compression.prototype.compressZlib_ir89t6$ = function (data, level, continuation) {
    throw new NotImplementedError_init();
  };
  Compression.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'Compression',
    interfaces: []
  };
  var Compression_instance = null;
  function Compression_getInstance() {
    if (Compression_instance === null) {
      new Compression();
    }
    return Compression_instance;
  }
  function Inflater(nowrap) {
    this.nowrap = nowrap;
  }
  Inflater.prototype.needsInput = function () {
    throw new NotImplementedError_init();
  };
  Inflater.prototype.setInput_fqrh44$ = function (buffer) {
    throw new NotImplementedError_init();
  };
  Inflater.prototype.inflate_mj6st8$ = function (buffer, offset, len) {
    throw new NotImplementedError_init();
  };
  Inflater.prototype.end = function () {
    throw new NotImplementedError_init();
  };
  Inflater.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'Inflater',
    interfaces: []
  };
  function SyncCompression() {
    SyncCompression_instance = this;
  }
  SyncCompression.prototype.inflate_fqrh44$ = function (data) {
    throw new NotImplementedError_init();
  };
  SyncCompression.prototype.inflateTo_r9qwmk$ = function (data, out) {
    throw new NotImplementedError_init();
  };
  SyncCompression.prototype.deflate_ir89t6$ = function (data, level) {
    throw new NotImplementedError_init();
  };
  SyncCompression.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'SyncCompression',
    interfaces: []
  };
  var SyncCompression_instance = null;
  function SyncCompression_getInstance() {
    if (SyncCompression_instance === null) {
      new SyncCompression();
    }
    return SyncCompression_instance;
  }
  function NativeCRC32() {
  }
  NativeCRC32.prototype.update_mj6st8$ = function (data, offset, size) {
    throw new NotImplementedError_init();
  };
  NativeCRC32.prototype.digest = function () {
    throw new NotImplementedError_init();
  };
  NativeCRC32.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'NativeCRC32',
    interfaces: []
  };
  function SimplerMessageDigest(name) {
  }
  SimplerMessageDigest.prototype.update_mj6st8$ = function (data, offset, size, continuation) {
    throw new NotImplementedError_init();
  };
  SimplerMessageDigest.prototype.digest = function (continuation) {
    throw new NotImplementedError_init();
  };
  SimplerMessageDigest.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'SimplerMessageDigest',
    interfaces: []
  };
  function SimplerMac(name, key) {
  }
  SimplerMac.prototype.update_mj6st8$ = function (data, offset, size, continuation) {
    throw new NotImplementedError_init();
  };
  SimplerMac.prototype.finalize = function (continuation) {
    throw new NotImplementedError_init();
  };
  SimplerMac.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'SimplerMac',
    interfaces: []
  };
  var global_0;
  function CreateAnnotation() {
    CreateAnnotation_instance = this;
  }
  CreateAnnotation.prototype.createAnnotation_i40ixr$ = function (clazz, map) {
    throw new NotImplementedError_init();
  };
  CreateAnnotation.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'CreateAnnotation',
    interfaces: []
  };
  var CreateAnnotation_instance = null;
  function CreateAnnotation_getInstance() {
    if (CreateAnnotation_instance === null) {
      new CreateAnnotation();
    }
    return CreateAnnotation_instance;
  }
  function Debugger() {
    Debugger_instance = this;
  }
  Debugger.prototype.enterDebugger = function () {
    debugger;
  };
  Debugger.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'Debugger',
    interfaces: []
  };
  var Debugger_instance = null;
  function Debugger_getInstance() {
    if (Debugger_instance === null) {
      new Debugger();
    }
    return Debugger_instance;
  }
  function NativeConsole() {
    NativeConsole_instance = this;
  }
  NativeConsole.prototype.log_s8jyv4$ = function (msg) {
    console.log(msg);
  };
  NativeConsole.prototype.error_s8jyv4$ = function (msg) {
    console.error(msg);
  };
  NativeConsole.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'NativeConsole',
    interfaces: []
  };
  var NativeConsole_instance = null;
  function NativeConsole_getInstance() {
    if (NativeConsole_instance === null) {
      new NativeConsole();
    }
    return NativeConsole_instance;
  }
  function Synchronized() {
  }
  Synchronized.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'Synchronized',
    interfaces: [Annotation]
  };
  function JvmField() {
  }
  JvmField.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'JvmField',
    interfaces: [Annotation]
  };
  function JvmStatic() {
  }
  JvmStatic.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'JvmStatic',
    interfaces: [Annotation]
  };
  function JvmOverloads() {
  }
  JvmOverloads.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'JvmOverloads',
    interfaces: [Annotation]
  };
  function Transient() {
  }
  Transient.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'Transient',
    interfaces: [Annotation]
  };
  function IOException(msg) {
    Exception.call(this, msg);
    this.name = 'IOException';
  }
  IOException.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'IOException',
    interfaces: [Exception]
  };
  function EOFException(msg) {
    IOException.call(this, msg);
    this.name = 'EOFException';
  }
  EOFException.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'EOFException',
    interfaces: [IOException]
  };
  function FileNotFoundException(msg) {
    IOException.call(this, msg);
    this.name = 'FileNotFoundException';
  }
  FileNotFoundException.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'FileNotFoundException',
    interfaces: [IOException]
  };
  function RuntimeException_0(msg) {
    Exception.call(this, msg);
    this.name = 'RuntimeException';
  }
  RuntimeException_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'RuntimeException',
    interfaces: [Exception]
  };
  function IllegalStateException_0(msg) {
    RuntimeException_0.call(this, msg);
    this.name = 'IllegalStateException';
  }
  IllegalStateException_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'IllegalStateException',
    interfaces: [RuntimeException_0]
  };
  function CancellationException(msg) {
    IllegalStateException_0.call(this, msg);
    this.name = 'CancellationException';
  }
  CancellationException.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'CancellationException',
    interfaces: [IllegalStateException_0]
  };
  function FastMemory(buffer, size) {
    FastMemory$Companion_getInstance();
    this.buffer = buffer;
    this.size = size;
    this.data = new DataView(this.buffer.buffer);
    this.i16 = new Int16Array(this.buffer.buffer);
    this.i32 = new Int32Array(this.buffer.buffer);
    this.f32 = new Float32Array(this.buffer.buffer);
  }
  function FastMemory$Companion() {
    FastMemory$Companion_instance = this;
  }
  FastMemory$Companion.prototype.alloc_za3lpa$ = function (size) {
    return new FastMemory(new Uint8Array(size + 15 & ~15), size);
  };
  FastMemory$Companion.prototype.copy_gd3gv2$ = function (src, srcPos, dst, dstPos, length) {
    for (var n = 0; n < length; n++)
      dst.set_vux9f0$(dstPos + n | 0, src.get_za3lpa$(srcPos + n | 0));
  };
  FastMemory$Companion.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var FastMemory$Companion_instance = null;
  function FastMemory$Companion_getInstance() {
    if (FastMemory$Companion_instance === null) {
      new FastMemory$Companion();
    }
    return FastMemory$Companion_instance;
  }
  FastMemory.prototype.get_za3lpa$ = function (index) {
    return this.buffer[index] & 255;
  };
  FastMemory.prototype.set_vux9f0$ = function (index, value) {
    this.buffer[index] = Kotlin.toByte(value);
  };
  FastMemory.prototype.setAlignedInt16_2bqt6h$ = function (index, value) {
    this.i16[index] = value;
  };
  FastMemory.prototype.getAlignedInt16_za3lpa$ = function (index) {
    return this.i16[index];
  };
  FastMemory.prototype.setAlignedInt32_vux9f0$ = function (index, value) {
    this.i32[index] = value;
  };
  FastMemory.prototype.getAlignedInt32_za3lpa$ = function (index) {
    return this.i32[index];
  };
  FastMemory.prototype.setAlignedFloat32_24o109$ = function (index, value) {
    this.f32[index] = value;
  };
  FastMemory.prototype.getAlignedFloat32_za3lpa$ = function (index) {
    return this.f32[index];
  };
  FastMemory.prototype.setAlignedArrayInt8_3fge6q$ = function (index, data, offset, len) {
    for (var n = 0; n < len; n++)
      this.set_vux9f0$(index + n | 0, data[offset + n | 0] & 255);
  };
  FastMemory.prototype.setAlignedArrayInt16_r43jz4$ = function (index, data, offset, len) {
    for (var n = 0; n < len; n++)
      this.setAlignedInt16_2bqt6h$(index + n | 0, data[offset + n | 0]);
  };
  FastMemory.prototype.setAlignedArrayInt32_coga0j$ = function (index, data, offset, len) {
    for (var n = 0; n < len; n++)
      this.setAlignedInt32_vux9f0$(index + n | 0, data[offset + n | 0]);
  };
  FastMemory.prototype.setAlignedArrayFloat32_3hvitc$ = function (index, data, offset, len) {
    for (var n = 0; n < len; n++)
      this.setAlignedFloat32_24o109$(index + n | 0, data[offset + n | 0]);
  };
  FastMemory.prototype.getInt16_za3lpa$ = function (index) {
    return this.data.getInt16(index);
  };
  FastMemory.prototype.getInt32_za3lpa$ = function (index) {
    return this.data.getInt32(index);
  };
  FastMemory.prototype.getFloat32_za3lpa$ = function (index) {
    return this.data.getFloat32(index);
  };
  FastMemory.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'FastMemory',
    interfaces: []
  };
  function get_asyncSocketFactory() {
    throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented');
  }
  function DefaultHttpFactoryFactory() {
    DefaultHttpFactoryFactory_instance = this;
  }
  function DefaultHttpFactoryFactory$createFactory$ObjectLiteral() {
  }
  DefaultHttpFactoryFactory$createFactory$ObjectLiteral.prototype.createClient = function () {
    return OS_getInstance().isNodejs ? new HttpClientNodeJs() : new HttpClientBrowserJs();
  };
  DefaultHttpFactoryFactory$createFactory$ObjectLiteral.prototype.createServer = function () {
    return new HttpSeverNodeJs();
  };
  DefaultHttpFactoryFactory$createFactory$ObjectLiteral.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    interfaces: [HttpFactory]
  };
  DefaultHttpFactoryFactory.prototype.createFactory = function () {
    return new DefaultHttpFactoryFactory$createFactory$ObjectLiteral();
  };
  DefaultHttpFactoryFactory.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'DefaultHttpFactoryFactory',
    interfaces: []
  };
  var DefaultHttpFactoryFactory_instance = null;
  function DefaultHttpFactoryFactory_getInstance() {
    if (DefaultHttpFactoryFactory_instance === null) {
      new DefaultHttpFactoryFactory();
    }
    return DefaultHttpFactoryFactory_instance;
  }
  function HttpSeverNodeJs() {
    HttpServer.call(this);
  }
  HttpSeverNodeJs.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'HttpSeverNodeJs',
    interfaces: [HttpServer]
  };
  function jsRequire(name) {
    return global_0.require(name);
  }
  function HttpClientNodeJs() {
    HttpClient.call(this);
  }
  function HttpClientNodeJs$requestInternal$lambda$lambda$lambda(closure$body) {
    return function (d) {
      return closure$body.call('push', d);
    };
  }
  function HttpClientNodeJs$requestInternal$lambda$lambda$lambda_0(closure$body, closure$deferred, closure$statusCode, closure$statusMessage) {
    return function () {
      var tmp$, tmp$_0;
      var r = global_0['Buffer'].call('concat', closure$body);
      var u8array = new Int8Array(Kotlin.isType(tmp$ = r, ArrayBuffer) ? tmp$ : Kotlin.throwCCE());
      var out = new Int8Array(u8array.length);
      tmp$_0 = u8array.length;
      for (var n = 0; n < tmp$_0; n++) {
        out[n] = u8array[n];
      }
      closure$deferred.resolve_11rb$(new HttpClient$Response(closure$statusCode, closure$statusMessage, Http$Http$Headers_init_0(lmapOf([])), openAsync(out)));
      return Unit;
    };
  }
  function HttpClientNodeJs$requestInternal$lambda$lambda(closure$deferred) {
    return function (res) {
      var tmp$;
      var statusCode = res.statusCode.toInt();
      var statusMessage = (tmp$ = res.statusMessage.toJavaStringOrNull()) != null ? tmp$ : '';
      var jsHeadersObj = res.headers;
      var body = [];
      res.call('on', 'data', HttpClientNodeJs$requestInternal$lambda$lambda$lambda(body));
      return res.call('on', 'end', HttpClientNodeJs$requestInternal$lambda$lambda$lambda_0(body, closure$deferred, statusCode, statusMessage));
    };
  }
  function HttpClientNodeJs$requestInternal$lambda$lambda_0(closure$deferred) {
    return function (e) {
      closure$deferred.reject_tcv7n7$(new RuntimeException('Error: ' + e.toJavaString()));
      return Unit;
    };
  }
  function HttpClientNodeJs$requestInternal$lambda$lambda_1(closure$r) {
    return function (it) {
      closure$r.abort();
      return Unit;
    };
  }
  function HttpClientNodeJs$requestInternal$lambda(closure$url_0, closure$headers_0, closure$method_0, closure$content_0) {
    return function (deferred_0, continuation_0, suspended) {
      var instance = new Coroutine$HttpClientNodeJs$requestInternal$lambda(closure$url_0, closure$headers_0, closure$method_0, closure$content_0, deferred_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$HttpClientNodeJs$requestInternal$lambda(closure$url_0, closure$headers_0, closure$method_0, closure$content_0, deferred_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$closure$url = closure$url_0;
    this.local$closure$headers = closure$headers_0;
    this.local$closure$method = closure$method_0;
    this.local$closure$content = closure$content_0;
    this.local$tmp$ = void 0;
    this.local$tmp$_0 = void 0;
    this.local$tmp$_1 = void 0;
    this.local$http = void 0;
    this.local$jsurl = void 0;
    this.local$info = void 0;
    this.local$reqHeaders = void 0;
    this.local$header = void 0;
    this.local$req = void 0;
    this.local$r = void 0;
    this.local$deferred = deferred_0;
  }
  Coroutine$HttpClientNodeJs$requestInternal$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$HttpClientNodeJs$requestInternal$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$HttpClientNodeJs$requestInternal$lambda.prototype.constructor = Coroutine$HttpClientNodeJs$requestInternal$lambda;
  Coroutine$HttpClientNodeJs$requestInternal$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$http = jsRequire('http');
            this.local$jsurl = jsRequire('url');
            this.local$info = this.local$jsurl.call('parse', this.local$closure$url);
            this.local$reqHeaders = this.local$tmp$;
            this.local$tmp$_0 = this.local$closure$headers.iterator();
            while (this.local$tmp$_0.hasNext()) {
              this.local$header = this.local$tmp$_0.next();
              this.local$reqHeaders[this.local$header.first] = this.local$header.second;
            }

            this.local$req = this.local$tmp$_1;
            this.local$req.method = this.local$closure$method.name;
            this.local$req.host = this.local$info['hostname'];
            this.local$req.port = this.local$info['port'];
            this.local$req.path = this.local$info['path'];
            this.local$req.agent = false;
            this.local$req.encoding = null;
            this.local$req.headers = this.local$reqHeaders;
            this.local$r = this.local$http.request(this.local$req, HttpClientNodeJs$requestInternal$lambda$lambda(this.local$deferred)).on('error', HttpClientNodeJs$requestInternal$lambda$lambda_0(this.local$deferred));
            this.local$deferred.onCancel.invoke_qlkmfe$(HttpClientNodeJs$requestInternal$lambda$lambda_1(this.local$r));
            if (this.local$closure$content != null) {
              this.state_0 = 2;
              this.result_0 = readAll(this.local$closure$content, this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              break;
            }
             else {
              this.local$r.end();
              this.state_0 = 3;
              continue;
            }

          case 1:
            throw this.exception_0;
          case 2:
            this.local$r.end(toTypedArray(this.result_0));
            this.state_0 = 3;
            continue;
          case 3:
            return Unit;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  HttpClientNodeJs.prototype.requestInternal_wintjk$$default = function (method_0, url_0, headers_0, content_0, continuation_0, suspended) {
    var instance = new Coroutine$requestInternal_wintjk$$default_1(this, method_0, url_0, headers_0, content_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$requestInternal_wintjk$$default_1($this, method_0, url_0, headers_0, content_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$method = method_0;
    this.local$url = url_0;
    this.local$headers = headers_0;
    this.local$content = content_0;
  }
  Coroutine$requestInternal_wintjk$$default_1.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$requestInternal_wintjk$$default_1.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$requestInternal_wintjk$$default_1.prototype.constructor = Coroutine$requestInternal_wintjk$$default_1;
  Coroutine$requestInternal_wintjk$$default_1.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = Promise$Companion_getInstance().create_rqqhdb$(HttpClientNodeJs$requestInternal$lambda(this.local$url, this.local$headers, this.local$method, this.local$content), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  HttpClientNodeJs.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'HttpClientNodeJs',
    interfaces: [HttpClient]
  };
  function HttpClientBrowserJs() {
    HttpClient.call(this);
  }
  function HttpClientBrowserJs$requestInternal$lambda$lambda(closure$xhr, closure$deferred) {
    return function (e) {
      var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
      var u8array = new Uint8Array(Kotlin.isType(tmp$ = closure$xhr.response, ArrayBuffer) ? tmp$ : Kotlin.throwCCE());
      var out = new Int8Array(u8array.length);
      tmp$_0 = get_indices(out);
      tmp$_1 = tmp$_0.first;
      tmp$_2 = tmp$_0.last;
      tmp$_3 = tmp$_0.step;
      for (var n = tmp$_1; n <= tmp$_2; n += tmp$_3) {
        out[n] = u8array[n];
      }
      closure$deferred.resolve_11rb$(new HttpClient$Response(closure$xhr.status, closure$xhr.statusText, Http$Http$Headers_init_1(closure$xhr.getAllResponseHeaders()), openAsync(out)));
      return Unit;
    };
  }
  function HttpClientBrowserJs$requestInternal$lambda$lambda_0(closure$deferred, closure$xhr, closure$url) {
    return function (e) {
      closure$deferred.reject_tcv7n7$(new RuntimeException('Error ' + closure$xhr.status + ' opening ' + closure$url));
      return Unit;
    };
  }
  function HttpClientBrowserJs$requestInternal$lambda$lambda_1(closure$xhr) {
    return function (it) {
      closure$xhr.abort();
      return Unit;
    };
  }
  function HttpClientBrowserJs$requestInternal$lambda(closure$method_0, closure$url_0, closure$headers_0, closure$content_0) {
    return function (deferred_0, continuation_0, suspended) {
      var instance = new Coroutine$HttpClientBrowserJs$requestInternal$lambda(closure$method_0, closure$url_0, closure$headers_0, closure$content_0, deferred_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$HttpClientBrowserJs$requestInternal$lambda(closure$method_0, closure$url_0, closure$headers_0, closure$content_0, deferred_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$closure$method = closure$method_0;
    this.local$closure$url = closure$url_0;
    this.local$closure$headers = closure$headers_0;
    this.local$closure$content = closure$content_0;
    this.local$tmp$ = void 0;
    this.local$xhr = void 0;
    this.local$header = void 0;
    this.local$deferred = deferred_0;
  }
  Coroutine$HttpClientBrowserJs$requestInternal$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$HttpClientBrowserJs$requestInternal$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$HttpClientBrowserJs$requestInternal$lambda.prototype.constructor = Coroutine$HttpClientBrowserJs$requestInternal$lambda;
  Coroutine$HttpClientBrowserJs$requestInternal$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$xhr = new XMLHttpRequest();
            this.local$xhr.open(this.local$closure$method.name, this.local$closure$url, true);
            this.local$xhr.responseType = 'arraybuffer';
            this.local$xhr.onload = HttpClientBrowserJs$requestInternal$lambda$lambda(this.local$xhr, this.local$deferred);
            this.local$xhr.onerror = HttpClientBrowserJs$requestInternal$lambda$lambda_0(this.local$deferred, this.local$xhr, this.local$closure$url);
            this.local$tmp$ = this.local$closure$headers.iterator();
            while (this.local$tmp$.hasNext()) {
              this.local$header = this.local$tmp$.next();
              this.local$xhr.setRequestHeader(this.local$header.first, this.local$header.second);
            }

            this.local$deferred.onCancel.invoke_qlkmfe$(HttpClientBrowserJs$requestInternal$lambda$lambda_1(this.local$xhr));
            if (this.local$closure$content != null) {
              this.state_0 = 2;
              this.result_0 = readAll(this.local$closure$content, this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              break;
            }
             else {
              return this.local$xhr.send(), Unit;
            }

          case 1:
            throw this.exception_0;
          case 2:
            return this.local$xhr.send(this.result_0), Unit;
          case 3:
            return;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  HttpClientBrowserJs.prototype.requestInternal_wintjk$$default = function (method_0, url_0, headers_0, content_0, continuation_0, suspended) {
    var instance = new Coroutine$requestInternal_wintjk$$default_2(this, method_0, url_0, headers_0, content_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$requestInternal_wintjk$$default_2($this, method_0, url_0, headers_0, content_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$method = method_0;
    this.local$url = url_0;
    this.local$headers = headers_0;
    this.local$content = content_0;
  }
  Coroutine$requestInternal_wintjk$$default_2.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$requestInternal_wintjk$$default_2.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$requestInternal_wintjk$$default_2.prototype.constructor = Coroutine$requestInternal_wintjk$$default_2;
  Coroutine$requestInternal_wintjk$$default_2.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = Promise$Companion_getInstance().create_rqqhdb$(HttpClientBrowserJs$requestInternal$lambda(this.local$method, this.local$url, this.local$headers, this.local$content), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  HttpClientBrowserJs.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'HttpClientBrowserJs',
    interfaces: [HttpClient]
  };
  function websockets$lambda() {
    return new JsWebSocketClientFactory();
  }
  var websockets;
  function get_websockets() {
    new Kotlin.PropertyMetadata('websockets');
    return websockets.value;
  }
  function JsWebSocketClientFactory() {
    WebSocketClientFactory.call(this);
  }
  JsWebSocketClientFactory.prototype.create_5y1boz$$default = function (url_0, protocols_0, origin_0, wskey_0, debug_0, continuation_0, suspended) {
    var instance = new Coroutine$create_5y1boz$$default(this, url_0, protocols_0, origin_0, wskey_0, debug_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$create_5y1boz$$default($this, url_0, protocols_0, origin_0, wskey_0, debug_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$$receiver = void 0;
    this.local$url = url_0;
    this.local$protocols = protocols_0;
    this.local$origin = origin_0;
    this.local$wskey = wskey_0;
    this.local$debug = debug_0;
  }
  Coroutine$create_5y1boz$$default.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$create_5y1boz$$default.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$create_5y1boz$$default.prototype.constructor = Coroutine$create_5y1boz$$default;
  Coroutine$create_5y1boz$$default.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$$receiver = new JsWebSocketClient(this.local$url, this.local$protocols, this.local$debug);
            this.state_0 = 2;
            this.result_0 = this.local$$receiver.init(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            return this.local$$receiver;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  JsWebSocketClientFactory.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'JsWebSocketClientFactory',
    interfaces: [WebSocketClientFactory]
  };
  function JsWebSocketClient(url, protocols, DEBUG) {
    WebSocketClient.call(this, url, protocols, true);
    this.DEBUG = DEBUG;
    var tmp$;
    if (protocols != null) {
      tmp$ = new WebSocket(url, copyToArray(protocols).slice());
    }
     else {
      tmp$ = new WebSocket(url);
    }
    var $receiver = tmp$;
    $receiver.binaryType = 'arraybuffer';
    $receiver.addEventListener('open', JsWebSocketClient$jsws$lambda$lambda(this));
    $receiver.addEventListener('close', JsWebSocketClient$jsws$lambda$lambda_0(this));
    $receiver.addEventListener('message', JsWebSocketClient$jsws$lambda$lambda_1(this));
    this.jsws = $receiver;
  }
  JsWebSocketClient.prototype.init = function (continuation_0, suspended) {
    var instance = new Coroutine$init(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$init($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
  }
  Coroutine$init.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$init.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$init.prototype.constructor = Coroutine$init;
  Coroutine$init.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.$this.DEBUG)
              println('[WS] Wait connection (' + this.$this.url + ')...');
            this.state_0 = 2;
            this.result_0 = waitOne_0(this.$this.onOpen, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            break;
          case 1:
            throw this.exception_0;
          case 2:
            if (this.$this.DEBUG)
              println('[WS] Connected!');
            return;
        }
      }
       catch (e) {
        if (this.state_0 === 1)
          throw e;
        else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  JsWebSocketClient.prototype.close_19mbxw$$default = function (code, reason) {
    this.jsws.close();
  };
  JsWebSocketClient.prototype.send_61zpoe$ = function (message, continuation) {
    if (this.DEBUG)
      println('[WS-SEND]: ' + message);
    this.jsws.send(message);
  };
  JsWebSocketClient.prototype.send_fqrh44$ = function (message, continuation) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    if (this.DEBUG)
      println('[WS-SEND]: ' + toList_2(message));
    var bb = new Int8Array(message.length);
    tmp$ = get_indices(message);
    tmp$_0 = tmp$.first;
    tmp$_1 = tmp$.last;
    tmp$_2 = tmp$.step;
    for (var n = tmp$_0; n <= tmp$_1; n += tmp$_2) {
      bb[n] = message[n];
    }
    this.jsws.send(bb);
  };
  function JsWebSocketClient$jsws$lambda$lambda(this$JsWebSocketClient) {
    return function (it) {
      this$JsWebSocketClient.onOpen.invoke_11rb$(Unit);
      return Unit;
    };
  }
  function JsWebSocketClient$jsws$lambda$lambda_0(this$JsWebSocketClient) {
    return function (e) {
      var tmp$;
      var event = Kotlin.isType(tmp$ = e, CloseEvent) ? tmp$ : Kotlin.throwCCE();
      var code = event.code;
      var reason = event.reason;
      var wasClean = event.wasClean;
      this$JsWebSocketClient.onClose.invoke_11rb$(Unit);
      return Unit;
    };
  }
  function JsWebSocketClient$jsws$lambda$lambda_1(this$JsWebSocketClient) {
    return function (e) {
      var tmp$;
      var event = Kotlin.isType(tmp$ = e, MessageEvent) ? tmp$ : Kotlin.throwCCE();
      var data = event.data;
      if (this$JsWebSocketClient.DEBUG)
        println('[WS-RECV]: ' + Kotlin.toString(data) + ' :: stringListeners=' + this$JsWebSocketClient.onStringMessage.listenerCount + ', binaryListeners=' + this$JsWebSocketClient.onBinaryMessage.listenerCount + ', anyListeners=' + this$JsWebSocketClient.onAnyMessage.listenerCount);
      if (typeof data === 'string') {
        var js = data;
        this$JsWebSocketClient.onStringMessage.invoke_11rb$(js);
        this$JsWebSocketClient.onAnyMessage.invoke_11rb$(js);
      }
       else {
        var jb = data;
        throw new NotImplementedError_init('An operation is not implemented: ' + 'onBinaryMessage, onAnyMessage');
      }
      return Unit;
    };
  }
  JsWebSocketClient.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'JsWebSocketClient',
    interfaces: [WebSocketClient]
  };
  function STimeProvider() {
    STimeProvider_instance = this;
  }
  STimeProvider.prototype.currentTimeMillis = function () {
    return Kotlin.Long.fromNumber((new Date()).getTime());
  };
  STimeProvider.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'STimeProvider',
    interfaces: []
  };
  var STimeProvider_instance = null;
  function STimeProvider_getInstance() {
    if (STimeProvider_instance === null) {
      new STimeProvider();
    }
    return STimeProvider_instance;
  }
  function UTCDate(time) {
    UTCDate$Companion_getInstance();
    this.date = new Date();
  }
  function UTCDate$Companion() {
    UTCDate$Companion_instance = this;
  }
  UTCDate$Companion.prototype.invoke_mbbjvw$ = function (fullYear, month0, day, hours, minutes, seconds) {
    return new UTCDate(window['Date'].asDynamic().UTC(fullYear, month0, day, hours, minutes, seconds));
  };
  UTCDate$Companion.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var UTCDate$Companion_instance = null;
  function UTCDate$Companion_getInstance() {
    if (UTCDate$Companion_instance === null) {
      new UTCDate$Companion();
    }
    return UTCDate$Companion_instance;
  }
  Object.defineProperty(UTCDate.prototype, 'time', {
    get: function () {
      var tmp$;
      return Kotlin.Long.fromNumber(typeof (tmp$ = this.date.getTime()) === 'number' ? tmp$ : Kotlin.throwCCE());
    }
  });
  Object.defineProperty(UTCDate.prototype, 'fullYear', {
    get: function () {
      return this.date.getUTCFullYear();
    }
  });
  Object.defineProperty(UTCDate.prototype, 'dayOfMonth', {
    get: function () {
      return this.date.getUTCDate();
    }
  });
  Object.defineProperty(UTCDate.prototype, 'dayOfWeek', {
    get: function () {
      return this.date.getUTCDay();
    }
  });
  Object.defineProperty(UTCDate.prototype, 'month0', {
    get: function () {
      return this.date.getUTCMonth();
    }
  });
  Object.defineProperty(UTCDate.prototype, 'hours', {
    get: function () {
      return this.date.getUTCHours();
    }
  });
  Object.defineProperty(UTCDate.prototype, 'minutes', {
    get: function () {
      return this.date.getUTCMinutes();
    }
  });
  Object.defineProperty(UTCDate.prototype, 'seconds', {
    get: function () {
      return this.date.getUTCSeconds();
    }
  });
  UTCDate.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'UTCDate',
    interfaces: []
  };
  function Arrays() {
    Arrays_instance = this;
  }
  Arrays.prototype.copyRangeTo_vybhjg$ = function (src, srcPos, dst, dstPos, count) {
    for (var n = 0; n < count; n++)
      dst[dstPos + n | 0] = src[srcPos + n | 0];
  };
  Arrays.prototype.copyRangeTo_3poh7i$ = function (src, srcPos, dst, dstPos, count) {
    for (var n = 0; n < count; n++)
      dst[dstPos + n | 0] = src[srcPos + n | 0];
  };
  Arrays.prototype.copyRangeTo_nlwz52$ = function (src, srcPos, dst, dstPos, count) {
    for (var n = 0; n < count; n++)
      dst[dstPos + n | 0] = src[srcPos + n | 0];
  };
  Arrays.prototype.copyRangeTo_ai5qaq$ = function (src, srcPos, dst, dstPos, count) {
    for (var n = 0; n < count; n++)
      dst[dstPos + n | 0] = src[srcPos + n | 0];
  };
  Arrays.prototype.copyRangeTo_lvhpry$ = function (src, srcPos, dst, dstPos, count) {
    for (var n = 0; n < count; n++)
      dst[dstPos + n | 0] = src[srcPos + n | 0];
  };
  Arrays.prototype.copyRangeTo_m70dtq$ = function (src, srcPos, dst, dstPos, count) {
    for (var n = 0; n < count; n++)
      dst[dstPos + n | 0] = src[srcPos + n | 0];
  };
  Arrays.prototype.copyRangeTo_5ukzfm$ = function (src, srcPos, dst, dstPos, count) {
    for (var n = 0; n < count; n++)
      dst[dstPos + n | 0] = src[srcPos + n | 0];
  };
  Arrays.prototype.copyRangeTo_dgpv4k$ = function (src, srcPos, dst, dstPos, count) {
    for (var n = 0; n < count; n++)
      dst[dstPos + n | 0] = src[srcPos + n | 0];
  };
  Arrays.prototype.fill_iv3oks$ = function (src, value, from, to) {
    for (var n = from; n < to; n++)
      src[n] = value;
  };
  Arrays.prototype.fill_9l0r9l$ = function (src, value, from, to) {
    for (var n = from; n < to; n++)
      src[n] = value;
  };
  Arrays.prototype.fill_diwe25$ = function (src, value, from, to) {
    for (var n = from; n < to; n++)
      src[n] = value;
  };
  Arrays.prototype.fill_38ja29$ = function (src, value, from, to) {
    for (var n = from; n < to; n++)
      src[n] = value;
  };
  Arrays.prototype.fill_7lcbvb$ = function (src, value, from, to) {
    for (var n = from; n < to; n++)
      src[n] = value;
  };
  Arrays.prototype.fill_9c50fl$ = function (src, value, from, to) {
    for (var n = from; n < to; n++)
      src[n] = value;
  };
  Arrays.prototype.fill_7e20el$ = function (src, value, from, to) {
    for (var n = from; n < to; n++)
      src[n] = value;
  };
  Arrays.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'Arrays',
    interfaces: []
  };
  var Arrays_instance = null;
  function Arrays_getInstance() {
    if (Arrays_instance === null) {
      new Arrays();
    }
    return Arrays_instance;
  }
  function SOS() {
    SOS_instance = this;
    this.name_vix3c4$_0 = lazy(SOS$name$lambda);
  }
  Object.defineProperty(SOS.prototype, 'name', {
    get: function () {
      var $receiver = this.name_vix3c4$_0;
      new Kotlin.PropertyMetadata('name');
      return $receiver.value;
    }
  });
  function SOS$name$lambda() {
    if (typeof window === undefined) {
      return 'node.js';
    }
     else {
      return 'js';
    }
  }
  SOS.$metadata$ = {
    kind: Kotlin.Kind.OBJECT,
    simpleName: 'SOS',
    interfaces: []
  };
  var SOS_instance = null;
  function SOS_getInstance() {
    if (SOS_instance === null) {
      new SOS();
    }
    return SOS_instance;
  }
  var File_separatorChar;
  function JsStat(size, isDirectory) {
    if (isDirectory === void 0)
      isDirectory = false;
    this.size = size;
    this.isDirectory = isDirectory;
  }
  JsStat.prototype.toStat_y39hoq$ = function (path, vfs) {
    return vfs.createExistsStat_sjl0ub$(path, this.isDirectory, Kotlin.Long.fromNumber(this.size));
  };
  JsStat.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: 'JsStat',
    interfaces: []
  };
  JsStat.prototype.component1 = function () {
    return this.size;
  };
  JsStat.prototype.component2 = function () {
    return this.isDirectory;
  };
  JsStat.prototype.copy_8555vt$ = function (size, isDirectory) {
    return new JsStat(size === void 0 ? this.size : size, isDirectory === void 0 ? this.isDirectory : isDirectory);
  };
  JsStat.prototype.toString = function () {
    return 'JsStat(size=' + Kotlin.toString(this.size) + (', isDirectory=' + Kotlin.toString(this.isDirectory)) + ')';
  };
  JsStat.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.size) | 0;
    result = result * 31 + Kotlin.hashCode(this.isDirectory) | 0;
    return result;
  };
  JsStat.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.size, other.size) && Kotlin.equals(this.isDirectory, other.isDirectory)))));
  };
  function get_ResourcesVfs() {
    return UrlVfs('.');
  }
  function get_localVfsProvider() {
    throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented');
  }
  var tmpdir;
  var package$com = _.com || (_.com = {});
  var package$soywiz = package$com.soywiz || (package$com.soywiz = {});
  var package$korio = package$soywiz.korio || (package$soywiz.korio = {});
  package$korio.Korio_6q182l$ = Korio;
  var package$async = package$korio.async || (package$korio.async = {});
  package$async.AsyncQueue = AsyncQueue;
  package$async.withContext_owj01r$ = withContext;
  package$async.withContext_uu8uhk$ = withContext_0;
  package$async.AsyncQueueWithContext = AsyncQueueWithContext;
  package$async.AsyncThread = AsyncThread;
  package$async.AsyncSemaphore = AsyncSemaphore;
  AsyncSignal.Node = AsyncSignal$Node;
  package$async.AsyncSignal = AsyncSignal;
  package$async.mapSignal_d1llwn$ = mapSignal;
  package$async.invoke_if7m94$ = invoke;
  $$importsForInline$$['korio-js'] = _;
  package$async.waitOne_2ag0ef$ = waitOne;
  package$async.addSuspend_lurw3q$ = addSuspend;
  package$async.addSuspend_vumi11$ = addSuspend_0;
  Object.defineProperty(CoroutineCancelContext, 'Key', {
    get: CoroutineCancelContext$Key_getInstance
  });
  package$async.CoroutineCancelContext = CoroutineCancelContext;
  package$async.CancellableContinuation = CancellableContinuation;
  package$async.EventLoopFactory = EventLoopFactory;
  Object.defineProperty(package$async, 'tasksInProgress', {
    get: function () {
      return tasksInProgress;
    }
  });
  Object.defineProperty(EventLoop, 'Companion', {
    get: EventLoop$Companion_getInstance
  });
  package$async.EventLoop = EventLoop;
  Object.defineProperty(EventLoopCoroutineContext, 'Key', {
    get: EventLoopCoroutineContext$Key_getInstance
  });
  package$async.EventLoopCoroutineContext = EventLoopCoroutineContext;
  package$async.get_eventLoop_45jet4$ = get_eventLoop;
  package$async.get_eventLoop_nrqsqe$ = get_eventLoop_0;
  package$async.sleep_3e9wbq$ = sleep;
  package$async.EventLoopFactoryTest = EventLoopFactoryTest;
  EventLoopTest.Entry = EventLoopTest$Entry;
  package$async.EventLoopTest = EventLoopTest;
  Object.defineProperty(package$async, 'ExceptionHook', {
    get: ExceptionHook_getInstance
  });
  Promise.Deferred = Promise$Deferred;
  Object.defineProperty(Promise, 'Companion', {
    get: Promise$Companion_getInstance
  });
  package$async.Promise = Promise;
  package$async.await_w2epyp$ = await_0;
  Signal.Node = Signal$Node;
  package$async.Signal = Signal;
  package$async.mapSignal_h51bwf$ = mapSignal_0;
  package$async.invoke_4l50cw$ = invoke_0;
  package$async.waitOne_b1yv1r$ = waitOne_0;
  package$async.toEventLoop_5cx0c9$ = toEventLoop;
  package$async.CheckRunning = CheckRunning;
  package$async.get_eventLoop_hwo9ze$ = get_eventLoop_1;
  package$async.parallel_3jna66$ = parallel;
  package$async.spawn_g3zeo5$ = spawn;
  package$async.spawn_lnyleu$ = spawn_0;
  package$async.CoroutineContextHolder = CoroutineContextHolder;
  package$async.async_g3zeo5$ = async;
  package$async.go_g3zeo5$ = go;
  package$async.go_n2b8nk$ = go_0;
  package$async.async_n2b8nk$ = async_0;
  package$async.spawn_n2b8nk$ = spawn_1;
  package$async.async_3hy5wj$ = async_1;
  package$async.go_3hy5wj$ = go_1;
  package$async.async_nkciq8$ = async_2;
  package$async.async_o1g0bv$ = async_3;
  package$async.go_nkciq8$ = go_2;
  package$async.go_o1g0bv$ = go_3;
  package$async.await_7zc599$ = await_1;
  package$async.await_xhrrtj$ = await_2;
  package$async.execAndForget_v9w3zs$ = execAndForget;
  package$async.execAndForget_d5cfq6$ = execAndForget_0;
  package$async.EmptyContinuation = EmptyContinuation;
  var package$coroutine = package$korio.coroutine || (package$korio.coroutine = {});
  package$coroutine.korioStartCoroutine_xtwlez$ = korioStartCoroutine_0;
  package$async.spawnAndForget_g3zeo5$ = spawnAndForget;
  package$async.spawnAndForget_lnyleu$ = spawnAndForget_0;
  package$coroutine.korioStartCoroutine_uao1qo$ = korioStartCoroutine;
  package$async.spawnAndForget_3fah24$ = spawnAndForget_1;
  package$async.syncTest_vajvcb$ = syncTest;
  package$async.sync_7ntyfz$ = sync;
  package$async.sync_lnyleu$ = sync_0;
  package$async.SuspendingSequenceBuilder = SuspendingSequenceBuilder;
  package$async.SuspendingSequence = SuspendingSequence;
  package$async.SuspendingIterator = SuspendingIterator;
  package$async.suspendingSequence_33q1hl$ = suspendingSequence;
  package$async.suspendingIterator_33q1hl$ = suspendingIterator;
  Object.defineProperty(SuspendingIteratorCoroutine$State, 'INITIAL', {
    get: SuspendingIteratorCoroutine$State$INITIAL_getInstance
  });
  Object.defineProperty(SuspendingIteratorCoroutine$State, 'COMPUTING_HAS_NEXT', {
    get: SuspendingIteratorCoroutine$State$COMPUTING_HAS_NEXT_getInstance
  });
  Object.defineProperty(SuspendingIteratorCoroutine$State, 'COMPUTING_NEXT', {
    get: SuspendingIteratorCoroutine$State$COMPUTING_NEXT_getInstance
  });
  Object.defineProperty(SuspendingIteratorCoroutine$State, 'COMPUTED', {
    get: SuspendingIteratorCoroutine$State$COMPUTED_getInstance
  });
  Object.defineProperty(SuspendingIteratorCoroutine$State, 'DONE', {
    get: SuspendingIteratorCoroutine$State$DONE_getInstance
  });
  SuspendingIteratorCoroutine.State = SuspendingIteratorCoroutine$State;
  package$async.SuspendingIteratorCoroutine = SuspendingIteratorCoroutine;
  package$async.asyncGenerate_33q1hl$ = asyncGenerate;
  package$async.asyncGenerate_4utg50$ = asyncGenerate_0;
  package$coroutine.withCoroutineContext_3hy5wj$ = withCoroutineContext;
  package$async.chunks_cmp905$ = chunks;
  package$async.toList_otmutl$ = toList_3;
  package$async.sum_bzcv3p$ = sum;
  package$async.isEmpty_otmutl$ = isEmpty;
  package$async.isNotEmpty_otmutl$ = isNotEmpty;
  package$async.firstOrNull_otmutl$ = firstOrNull_1;
  package$async.take_cmp905$ = take;
  package$async.AsyncSequenceEmitter = AsyncSequenceEmitter;
  package$async.SuspendingSequenceBuilder2 = SuspendingSequenceBuilder2;
  package$async.SuspendingSequence2 = SuspendingSequence2;
  package$async.asyncGenerate2_drgute$ = asyncGenerate2;
  package$async.asyncGenerate3_izcdss$ = asyncGenerate3;
  package$async.Consumer = Consumer;
  package$async.Producer = Producer;
  package$async.ProduceConsumer = ProduceConsumer;
  package$async.asyncProducer_udimu4$ = asyncProducer;
  package$async.toAsyncOutputStream_1g035v$ = toAsyncOutputStream;
  package$async.toAsyncInputStream_vu4x5z$ = toAsyncInputStream;
  package$async.AsyncProducerStream = AsyncProducerStream;
  package$async.AsyncConsumerStream = AsyncConsumerStream;
  package$async.withTimeout_f84l2r$ = withTimeout;
  var package$compression = package$korio.compression || (package$korio.compression = {});
  package$compression.uncompressGzip_964n91$ = uncompressGzip;
  package$compression.uncompressZlib_964n91$ = uncompressZlib;
  package$compression.compressGzip_mrm5p$ = compressGzip;
  package$compression.compressZlib_mrm5p$ = compressZlib;
  Object.defineProperty(package$coroutine, 'COROUTINE_SUSPENDED', {
    get: function () {
      return COROUTINE_SUSPENDED_0;
    }
  });
  package$coroutine.getCoroutineContext = getCoroutineContext;
  package$coroutine.withEventLoop_ecbnd4$ = withEventLoop;
  package$coroutine.korioCreateCoroutine_xtwlez$ = korioCreateCoroutine;
  package$coroutine.korioCreateCoroutine_uao1qo$ = korioCreateCoroutine_0;
  Object.defineProperty(AsyncHash, 'Companion', {
    get: AsyncHash$Companion_getInstance
  });
  AsyncHash.MessageDigestHash = AsyncHash$MessageDigestHash;
  AsyncHash.CRC32Hash = AsyncHash$CRC32Hash;
  var package$crypto = package$korio.crypto || (package$korio.crypto = {});
  package$crypto.AsyncHash = AsyncHash;
  package$crypto.hashSync_r89cpu$ = hashSync;
  package$crypto.hashSync_ahpzpy$ = hashSync_0;
  package$crypto.hashSync_dv4hyq$ = hashSync_1;
  package$crypto.hash_r89cpu$ = hash;
  package$crypto.hash_ahpzpy$ = hash_0;
  package$crypto.hash_dv4hyq$ = hash_1;
  Object.defineProperty(package$crypto, 'Base64', {
    get: Base64_getInstance
  });
  package$crypto.fromBase64_pdl1vz$ = fromBase64;
  package$crypto.toBase64_964n91$ = toBase64;
  Object.defineProperty(package$crypto, 'Hex', {
    get: Hex_getInstance
  });
  Object.defineProperty(SyncHash, 'Companion', {
    get: SyncHash$Companion_getInstance
  });
  SyncHash.MessageDigestHash = SyncHash$MessageDigestHash;
  package$crypto.SyncHash = SyncHash;
  package$crypto.md5_964n91$ = md5;
  package$crypto.sha1_964n91$ = sha1;
  package$crypto.update_2xbgol$ = update;
  package$crypto.digest_2xbgol$ = digest;
  package$crypto.update_b1km8p$ = update_0;
  package$crypto.finalize_b1km8p$ = finalize;
  var package$ds = package$korio.ds || (package$korio.ds = {});
  package$ds.AsyncPool = AsyncPool;
  package$ds.BitSet = BitSet;
  package$ds.LinkedList = LinkedList;
  LinkedList2.Node = LinkedList2$Node;
  package$ds.LinkedList2 = LinkedList2;
  package$ds.getCyclic_yzln2o$ = getCyclic;
  package$ds.MapList_init_svx7l6$ = MapList_init;
  package$ds.MapList_init_4lrrid$ = MapList_init_0;
  package$ds.MapList_init_33ad0z$ = MapList_init_1;
  package$ds.MapList = MapList;
  package$ds.ByteArrayBuilder_init = ByteArrayBuilder_init;
  package$ds.ByteArrayBuilder_init_fqrh44$ = ByteArrayBuilder_init_0;
  package$ds.ByteArrayBuilder_init_frbc4z$ = ByteArrayBuilder_init_1;
  package$ds.ByteArrayBuilder = ByteArrayBuilder;
  package$ds.Stack_init_i5x0yv$ = Stack_init;
  package$ds.Stack = Stack;
  package$ds.Queue_init_i5x0yv$ = Queue_init;
  package$ds.Queue = Queue;
  package$ds.lmapOf_qfcya0$ = lmapOf;
  package$ds.toLinkedMap_6hr0sd$ = toLinkedMap;
  var package$error = package$korio.error || (package$korio.error = {});
  package$error.InvalidOperationException = InvalidOperationException;
  package$error.OutOfBoundsException = OutOfBoundsException;
  package$error.KeyNotFoundException = KeyNotFoundException;
  package$error.NotImplementedException = NotImplementedException;
  package$error.InvalidArgumentException = InvalidArgumentException;
  package$error.MustValidateCodeException = MustValidateCodeException;
  package$error.MustOverrideException = MustOverrideException;
  package$error.DeprecatedException = DeprecatedException;
  package$error.UnexpectedException = UnexpectedException;
  Object.defineProperty(package$error, 'deprecated', {
    get: get_deprecated
  });
  Object.defineProperty(package$error, 'mustValidate', {
    get: get_mustValidate
  });
  Object.defineProperty(package$error, 'noImpl', {
    get: get_noImpl
  });
  Object.defineProperty(package$error, 'invalidOp', {
    get: get_invalidOp
  });
  Object.defineProperty(package$error, 'invalidArg', {
    get: get_invalidArg
  });
  package$error.deprecated_61zpoe$ = deprecated;
  package$error.mustValidate_61zpoe$ = mustValidate;
  package$error.noImpl_61zpoe$ = noImpl;
  package$error.invalidOp_61zpoe$ = invalidOp;
  package$error.invalidArg_61zpoe$ = invalidArg;
  package$error.unsupported_61zpoe$ = unsupported;
  package$error.unsupported = unsupported_0;
  package$error.invalidArgument_61zpoe$ = invalidArgument;
  package$error.unexpected_61zpoe$ = unexpected;
  package$error.untestedWarn_61zpoe$ = untestedWarn;
  package$error.noImplWarn_61zpoe$ = noImplWarn;
  var package$lang = package$korio.lang || (package$korio.lang = {});
  package$lang.printStackTrace_dbl4o4$ = printStackTrace;
  package$error.ignoreErrors_nkfre5$ = ignoreErrors;
  QExpr.BINOP = QExpr$BINOP;
  QExpr.AND = QExpr$AND;
  Object.defineProperty(QExpr, 'Companion', {
    get: QExpr$Companion_getInstance
  });
  QExpr.Builder = QExpr$Builder;
  QExpr.TypedBuilder = QExpr$TypedBuilder;
  var package$expr = package$korio.expr || (package$korio.expr = {});
  package$expr.QExpr = QExpr;
  var package$inject = package$korio.inject || (package$korio.inject = {});
  package$inject.Prototype = Prototype;
  package$inject.Singleton = Singleton;
  package$inject.Inject = Inject;
  package$inject.Optional = Optional;
  package$inject.AsyncObjectProvider = AsyncObjectProvider;
  package$inject.PrototypeAsyncObjectProvider = PrototypeAsyncObjectProvider;
  package$inject.FactoryAsyncObjectProvider = FactoryAsyncObjectProvider;
  package$inject.SingletonAsyncObjectProvider = SingletonAsyncObjectProvider;
  package$inject.InstanceAsyncObjectProvider = InstanceAsyncObjectProvider;
  AsyncInjector.RequestContext = AsyncInjector$RequestContext;
  AsyncInjector.NotMappedException = AsyncInjector$NotMappedException;
  package$inject.AsyncInjector = AsyncInjector;
  package$inject.AsyncFactory = AsyncFactory;
  package$inject.InjectedHandler = InjectedHandler;
  package$inject.AsyncFactoryClass = AsyncFactoryClass;
  package$inject.AsyncDependency = AsyncDependency;
  package$inject.InjectorAsyncDependency = InjectorAsyncDependency;
  package$lang.Bytes = Bytes;
  package$lang.toBytes_964n91$ = toBytes;
  Object.defineProperty(Charset, 'Companion', {
    get: Charset$Companion_getInstance
  });
  package$lang.Charset = Charset;
  package$lang.UTC8CharsetBase = UTC8CharsetBase;
  Object.defineProperty(package$lang, 'UTF8Charset', {
    get: UTF8Charset_getInstance
  });
  Object.defineProperty(package$lang, 'ISO_8859_1Charset', {
    get: ISO_8859_1Charset_getInstance
  });
  Object.defineProperty(package$lang, 'Charsets', {
    get: Charsets_getInstance
  });
  package$lang.toByteArray_7jlb4b$ = toByteArray;
  package$lang.toString_5kit73$ = toString;
  package$lang.Closeable = Closeable;
  package$lang.Closeable_o14v8n$ = Closeable_0;
  package$lang.use_jgrjek$ = use;
  package$lang.closeable_n2ytw$ = closeable;
  Object.defineProperty(package$lang, 'Console', {
    get: Console_getInstance
  });
  Object.defineProperty(package$lang, 'Dynamic', {
    get: Dynamic_getInstance
  });
  package$lang.DynamicContext = DynamicContext;
  Object.defineProperty(package$lang, 'DynamicContextInstance', {
    get: DynamicContextInstance_getInstance
  });
  Object.defineProperty(package$lang, 'Environment', {
    get: Environment_getInstance
  });
  Object.defineProperty(Float16, 'Companion', {
    get: Float16$Companion_getInstance
  });
  package$lang.Float16_init_14dthe$ = Float16_init;
  package$lang.Float16 = Float16;
  package$lang.Language = Language;
  package$lang.Semaphore = Semaphore;
  package$lang.format_e33kwl$ = format;
  package$lang.splitKeep_hjrgf2$ = splitKeep;
  package$lang.String_fromIntArray_nd5v6f$ = String_fromIntArray;
  package$lang.String_fromCharArray_8chfmy$ = String_fromCharArray;
  Object.defineProperty(package$lang, 'System', {
    get: System_getInstance
  });
  package$lang.assert_6taknv$ = assert;
  package$lang.ThreadLocal = ThreadLocal;
  Object.defineProperty(URL, 'Companion', {
    get: URL$Companion_getInstance
  });
  package$lang.URL = URL;
  Object.defineProperty(package$lang, 'URIUtils', {
    get: URIUtils_getInstance
  });
  Object.defineProperty(package$lang, 'Undefined', {
    get: Undefined_getInstance
  });
  package$lang.AtomicLong = AtomicLong;
  package$lang.AtomicInteger = AtomicInteger;
  var package$tl = package$lang.tl || (package$lang.tl = {});
  package$tl.threadLocal = threadLocal;
  var package$math = package$korio.math || (package$korio.math = {});
  package$math.reinterpretAsInt_81szk$ = reinterpretAsInt;
  package$math.reinterpretAsFloat_s8ev3n$ = reinterpretAsFloat;
  package$math.reinterpretAsLong_yrwdxr$ = reinterpretAsLong;
  package$math.reinterpretAsDouble_mts6qi$ = reinterpretAsDouble;
  package$math.reverseBytes_s8ev3n$ = reverseBytes;
  package$math.reverseBytes_5vcgdc$ = reverseBytes_0;
  package$math.reverseBytes_myv2d0$ = reverseBytes_1;
  package$math.reverseBytes_mts6qi$ = reverseBytes_2;
  package$math.rint_14dthe$ = rint;
  package$math.toRadians_14dthe$ = toRadians;
  package$math.toDegrees_14dthe$ = toDegrees;
  package$math.signum_14dthe$ = signum;
  var package$net = package$korio.net || (package$korio.net = {});
  package$net.AsyncSocketFactory = AsyncSocketFactory;
  Object.defineProperty(AsyncClient, 'Stats', {
    get: AsyncClient$Stats_getInstance
  });
  Object.defineProperty(AsyncClient, 'Companion', {
    get: AsyncClient$Companion_getInstance
  });
  package$net.AsyncClient = AsyncClient;
  Object.defineProperty(AsyncServer, 'Companion', {
    get: AsyncServer$Companion_getInstance
  });
  package$net.AsyncServer = AsyncServer;
  Object.defineProperty(HostWithPort, 'Companion', {
    get: HostWithPort$Companion_getInstance
  });
  package$net.HostWithPort = HostWithPort;
  Object.defineProperty(Http$Methods, 'ALL', {
    get: Http$Methods$ALL_getInstance
  });
  Object.defineProperty(Http$Methods, 'OPTIONS', {
    get: Http$Methods$OPTIONS_getInstance
  });
  Object.defineProperty(Http$Methods, 'GET', {
    get: Http$Methods$GET_getInstance
  });
  Object.defineProperty(Http$Methods, 'HEAD', {
    get: Http$Methods$HEAD_getInstance
  });
  Object.defineProperty(Http$Methods, 'POST', {
    get: Http$Methods$POST_getInstance
  });
  Object.defineProperty(Http$Methods, 'PUT', {
    get: Http$Methods$PUT_getInstance
  });
  Object.defineProperty(Http$Methods, 'DELETE', {
    get: Http$Methods$DELETE_getInstance
  });
  Object.defineProperty(Http$Methods, 'TRACE', {
    get: Http$Methods$TRACE_getInstance
  });
  Object.defineProperty(Http$Methods, 'CONNECT', {
    get: Http$Methods$CONNECT_getInstance
  });
  Object.defineProperty(Http$Methods, 'PATCH', {
    get: Http$Methods$PATCH_getInstance
  });
  Http.Methods = Http$Methods;
  Object.defineProperty(Http$Method, 'Companion', {
    get: Http$Method$Companion_getInstance
  });
  Http.Method = Http$Method;
  Http.CustomMethod = Http$CustomMethod;
  Object.defineProperty(Http$HttpException, 'Companion', {
    get: Http$HttpException$Companion_getInstance
  });
  Http.HttpException = Http$HttpException;
  Object.defineProperty(Http$Auth, 'Companion', {
    get: Http$Auth$Companion_getInstance
  });
  Http.Auth = Http$Auth;
  Http.Request = Http$Request;
  Http.Response = Http$Response;
  Object.defineProperty(Http$Headers, 'Companion', {
    get: Http$Headers$Companion_getInstance
  });
  Http.Headers_init_9ih0sy$ = Http$Http$Headers_init;
  Http.Headers_init_y0zsll$ = Http$Http$Headers_init_0;
  Http.Headers_init_pdl1vj$ = Http$Http$Headers_init_1;
  Http.Headers = Http$Headers;
  Http.RedirectException = Http$RedirectException;
  Object.defineProperty(Http, 'Companion', {
    get: Http$Companion_getInstance
  });
  var package$http = package$net.http || (package$net.http = {});
  package$http.Http = Http;
  HttpClient.Response = HttpClient$Response;
  HttpClient.CompletedResponse = HttpClient$CompletedResponse;
  HttpClient.RequestConfig = HttpClient$RequestConfig;
  Object.defineProperty(HttpClient, 'Companion', {
    get: HttpClient$Companion_getInstance
  });
  package$http.HttpClient = HttpClient;
  package$http.DelayedHttpClient = DelayedHttpClient;
  package$http.delayed_j2ect5$ = delayed;
  package$http.LogHttpClient = LogHttpClient;
  Object.defineProperty(package$http, 'HttpStatusMessage', {
    get: HttpStatusMessage_getInstance
  });
  Object.defineProperty(package$http, 'HttpStats', {
    get: HttpStats_getInstance
  });
  package$http.HttpFactory = HttpFactory;
  package$http.ProxiedHttpFactory = ProxiedHttpFactory;
  Object.defineProperty(package$http, '_defaultHttpFactory', {
    get: get__defaultHttpFactory
  });
  Object.defineProperty(package$http, 'defaultHttpFactory', {
    get: get_defaultHttpFactory
  });
  package$http.setDefaultHttpFactory_7abgn7$ = setDefaultHttpFactory;
  package$http.createClientEndpoint_o4v2s4$ = createClientEndpoint;
  package$http.createHttpClient = createHttpClient;
  package$http.createHttpServer = createHttpServer;
  package$http.createHttpClientEndpoint_61zpoe$ = createHttpClientEndpoint;
  package$http.httpError_19mbxw$ = httpError;
  package$http.HttpClientEndpoint = HttpClientEndpoint;
  Object.defineProperty(Request, 'Companion', {
    get: Request$Companion_getInstance
  });
  package$http.Request = Request;
  package$http.FakeHttpClient = FakeHttpClient;
  package$http.FakeHttpClientEndpoint = FakeHttpClientEndpoint;
  package$http.endpoint_fa4p7d$ = endpoint;
  Object.defineProperty(package$http, 'HttpDate', {
    get: HttpDate_getInstance
  });
  Object.defineProperty(HttpServer, 'Companion', {
    get: HttpServer$Companion_getInstance
  });
  HttpServer.BaseRequest = HttpServer$BaseRequest;
  HttpServer.WsRequest = HttpServer$WsRequest;
  HttpServer.RequestConfig = HttpServer$RequestConfig;
  HttpServer.Request = HttpServer$Request;
  package$http.HttpServer = HttpServer;
  package$http.FakeRequest = FakeRequest;
  var package$rest = package$http.rest || (package$http.rest = {});
  package$rest.HttpRestClient = HttpRestClient;
  package$rest.rest_jh038e$ = rest;
  package$rest.rest_fa4p7d$ = rest_0;
  package$rest.createRestClient_69ojwy$ = createRestClient;
  var package$ws = package$net.ws || (package$net.ws = {});
  package$ws.WebSocketClient = WebSocketClient;
  package$ws.WebSocketClient_5y1boz$ = WebSocketClient_0;
  package$ws.WebSocketClientFactory = WebSocketClientFactory;
  package$ws.WebSocketException = WebSocketException;
  ObjectMapper.TypeContext = ObjectMapper$TypeContext;
  ObjectMapper.UntypeContext = ObjectMapper$UntypeContext;
  var package$serialization = package$korio.serialization || (package$korio.serialization = {});
  package$serialization.ObjectMapper = ObjectMapper;
  Object.defineProperty(package$serialization, 'Mapper', {
    get: function () {
      return Mapper;
    }
  });
  var package$json = package$serialization.json || (package$serialization.json = {});
  Object.defineProperty(package$json, 'Json', {
    get: Json_getInstance
  });
  package$json.CustomJsonSerializer = CustomJsonSerializer;
  package$json.toJson_oge3zv$ = toJson;
  package$json.toJsonUntyped_3huzfx$ = toJsonUntyped;
  var package$querystring = package$serialization.querystring || (package$serialization.querystring = {});
  Object.defineProperty(package$querystring, 'QueryString', {
    get: QueryString_getInstance
  });
  Object.defineProperty(package$querystring, 'URLDecoder', {
    get: URLDecoder_getInstance
  });
  Object.defineProperty(package$querystring, 'URLEncoder', {
    get: URLEncoder_getInstance
  });
  Object.defineProperty(Xml, 'Companion', {
    get: Xml$Companion_getInstance
  });
  Object.defineProperty(Xml$Type, 'NODE', {
    get: Xml$Type$NODE_getInstance
  });
  Object.defineProperty(Xml$Type, 'TEXT', {
    get: Xml$Type$TEXT_getInstance
  });
  Object.defineProperty(Xml$Type, 'COMMENT', {
    get: Xml$Type$COMMENT_getInstance
  });
  Xml.Type = Xml$Type;
  var package$xml = package$serialization.xml || (package$serialization.xml = {});
  package$xml.Xml = Xml;
  package$xml.get_isText_byavcz$ = get_isText;
  package$xml.get_isComment_byavcz$ = get_isComment;
  package$xml.get_isNode_byavcz$ = get_isNode;
  Object.defineProperty(package$xml, 'XmlEntities', {
    get: XmlEntities_getInstance
  });
  package$xml.str_dzd596$ = str;
  package$xml.children_h00kq4$ = children;
  package$xml.get_allChildren_ibjdnu$ = get_allChildren;
  package$xml.get_h00kq4$ = get_0;
  package$xml.toXml_pdl1vz$ = toXml;
  package$xml.Xml_61zpoe$ = Xml_0;
  package$xml.readXml_93ma6j$ = readXml;
  XmlStream.prototype.Xml2Iterator = XmlStream$Xml2Iterator;
  XmlStream.prototype.Xml2Iterable = XmlStream$Xml2Iterable;
  XmlStream$Element.ProcessingInstructionTag = XmlStream$Element$ProcessingInstructionTag;
  XmlStream$Element.OpenCloseTag = XmlStream$Element$OpenCloseTag;
  XmlStream$Element.OpenTag = XmlStream$Element$OpenTag;
  XmlStream$Element.CommentTag = XmlStream$Element$CommentTag;
  XmlStream$Element.CloseTag = XmlStream$Element$CloseTag;
  XmlStream$Element.Text = XmlStream$Element$Text;
  XmlStream.prototype.Element = XmlStream$Element;
  Object.defineProperty(package$xml, 'XmlStream', {
    get: XmlStream_getInstance
  });
  Yaml$Token.LINE = Yaml$Token$LINE;
  Yaml$Token.ID = Yaml$Token$ID;
  Yaml$Token.STR = Yaml$Token$STR;
  Yaml$Token.SYMBOL = Yaml$Token$SYMBOL;
  Yaml.prototype.Token = Yaml$Token;
  var package$yaml = package$serialization.yaml || (package$serialization.yaml = {});
  Object.defineProperty(package$yaml, 'Yaml', {
    get: Yaml_getInstance
  });
  var package$stream = package$korio.stream || (package$korio.stream = {});
  package$stream.AsyncBufferedInputStream = AsyncBufferedInputStream;
  package$stream.toBuffered_a0g59h$ = toBuffered;
  Object.defineProperty(AsyncProduceConsumerByteBuffer, 'Companion', {
    get: AsyncProduceConsumerByteBuffer$Companion_getInstance
  });
  package$stream.AsyncProduceConsumerByteBuffer = AsyncProduceConsumerByteBuffer;
  package$stream.AsyncBaseStream = AsyncBaseStream;
  package$stream.AsyncInputOpenable = AsyncInputOpenable;
  package$stream.AsyncInputStream = AsyncInputStream;
  package$stream.AsyncOutputStream = AsyncOutputStream;
  package$stream.AsyncPositionStream = AsyncPositionStream;
  package$stream.AsyncLengthStream = AsyncLengthStream;
  package$stream.AsyncPositionLengthStream = AsyncPositionLengthStream;
  package$stream.AsyncRAInputStream = AsyncRAInputStream;
  package$stream.AsyncRAOutputStream = AsyncRAOutputStream;
  package$stream.toAsyncStream_iwjsyo$ = toAsyncStream;
  package$stream.AsyncStreamBase = AsyncStreamBase;
  package$stream.toAsyncStream_ejtyh5$ = toAsyncStream_0;
  package$stream.AsyncStream = AsyncStream;
  package$stream.getAvailable_2q4ayq$ = getAvailable;
  package$stream.eof_2q4ayq$ = eof;
  package$stream.SliceAsyncStreamBase = SliceAsyncStreamBase;
  package$stream.buffered_50x9bh$ = buffered;
  BufferedStreamBase.CachedEntry = BufferedStreamBase$CachedEntry;
  package$stream.BufferedStreamBase = BufferedStreamBase;
  package$stream.sliceWithStart_dqczag$ = sliceWithStart;
  package$stream.sliceWithSize_i9mzv9$ = sliceWithSize;
  package$stream.slice_e518qy$ = slice_0;
  package$stream.slice_f000it$ = slice_1;
  package$stream.sliceWithBounds_i9mzv9$ = sliceWithBounds;
  package$stream.slice_g5ykjz$ = slice_2;
  package$stream.readSlice_dqczag$ = readSlice;
  package$stream.readStream_50x9bh$ = readStream;
  package$stream.readStream_dqczag$ = readStream_0;
  package$stream.readStringz_j4n3eh$ = readStringz;
  package$stream.readStringz_4xit9n$ = readStringz_0;
  package$stream.readString_4xit9n$ = readString;
  package$stream.writeStringz_wczyte$ = writeStringz;
  package$stream.writeStringz_ne9hyo$ = writeStringz_0;
  package$stream.writeString_wczyte$ = writeString;
  package$stream.readExact_8rokfb$ = readExact;
  package$stream.read_30vnfr$ = read;
  package$stream.read_y05gpn$ = read_0;
  package$stream.readBytes_a0g59h$ = readBytes;
  package$stream.readBytesUpTo_a0g59h$ = readBytesUpTo;
  package$stream.readBytesExact_a0g59h$ = readBytesExact;
  package$stream.readU8_yjldv$ = readU8;
  package$stream.readS8_yjldv$ = readS8;
  package$stream.readU16_le_yjldv$ = readU16_le;
  package$stream.readU24_le_yjldv$ = readU24_le;
  package$stream.readU32_le_yjldv$ = readU32_le;
  package$stream.readS16_le_yjldv$ = readS16_le;
  package$stream.readS24_le_yjldv$ = readS24_le;
  package$stream.readS32_le_yjldv$ = readS32_le;
  package$stream.readS64_le_yjldv$ = readS64_le;
  package$stream.readF32_le_yjldv$ = readF32_le;
  package$stream.readF64_le_yjldv$ = readF64_le;
  package$stream.readU16_be_yjldv$ = readU16_be;
  package$stream.readU24_be_yjldv$ = readU24_be;
  package$stream.readU32_be_yjldv$ = readU32_be;
  package$stream.readS16_be_yjldv$ = readS16_be;
  package$stream.readS24_be_yjldv$ = readS24_be;
  package$stream.readS32_be_yjldv$ = readS32_be;
  package$stream.readS64_be_yjldv$ = readS64_be;
  package$stream.readF32_be_yjldv$ = readF32_be;
  package$stream.readF64_be_yjldv$ = readF64_be;
  package$stream.hasLength_g5ykjz$ = hasLength;
  package$stream.hasAvailable_g5ykjz$ = hasAvailable;
  package$stream.readAll_yjldv$ = readAll;
  package$stream.readAvailable_yjldv$ = readAvailable;
  package$stream.skip_a0g59h$ = skip;
  package$stream.readUByteArray_a0g59h$ = readUByteArray;
  package$stream.readShortArray_le_a0g59h$ = readShortArray_le;
  package$stream.readShortArray_be_a0g59h$ = readShortArray_be;
  package$stream.readCharArray_le_a0g59h$ = readCharArray_le;
  package$stream.readCharArray_be_a0g59h$ = readCharArray_be;
  package$stream.readIntArray_le_a0g59h$ = readIntArray_le;
  package$stream.readIntArray_be_a0g59h$ = readIntArray_be;
  package$stream.readLongArray_le_a0g59h$ = readLongArray_le;
  package$stream.readLongArray_be_a0g59h$ = readLongArray_be;
  package$stream.readFloatArray_le_a0g59h$ = readFloatArray_le;
  package$stream.readFloatArray_be_a0g59h$ = readFloatArray_be;
  package$stream.readDoubleArray_le_a0g59h$ = readDoubleArray_le;
  package$stream.readDoubleArray_be_a0g59h$ = readDoubleArray_be;
  package$stream.writeBytes_rz40do$ = writeBytes;
  package$stream.writeBytes_mfea7h$ = writeBytes_0;
  package$stream.write8_1j05bi$ = write8;
  package$stream.write16_le_1j05bi$ = write16_le;
  package$stream.write24_le_1j05bi$ = write24_le;
  package$stream.write32_le_1j05bi$ = write32_le;
  package$stream.write32_le_no1epl$ = write32_le_0;
  package$stream.write64_le_no1epl$ = write64_le;
  package$stream.writeF32_le_naqgfz$ = writeF32_le;
  package$stream.writeF64_le_b1blji$ = writeF64_le;
  package$stream.write16_be_1j05bi$ = write16_be;
  package$stream.write24_be_1j05bi$ = write24_be;
  package$stream.write32_be_1j05bi$ = write32_be;
  package$stream.write32_be_no1epl$ = write32_be_0;
  package$stream.write64_be_no1epl$ = write64_be;
  package$stream.writeF32_be_naqgfz$ = writeF32_be;
  package$stream.writeF64_be_b1blji$ = writeF64_be;
  package$stream.toAsync_ucmi9i$ = toAsync;
  package$stream.toAsync_37wh45$ = toAsync_0;
  package$stream.toAsyncInWorker_ucmi9i$ = toAsyncInWorker;
  package$stream.toAsyncInWorker_37wh45$ = toAsyncInWorker_0;
  package$stream.SyncAsyncStreamBase = SyncAsyncStreamBase;
  package$stream.SyncAsyncStreamBaseInWorker = SyncAsyncStreamBaseInWorker;
  package$stream.writeStream_b7n8o4$ = writeStream;
  package$stream.writeFile_ye12l0$ = writeFile;
  package$stream.copyTo_xu1w04$ = copyTo;
  package$stream.writeToAlign_5vys4l$ = writeToAlign;
  package$stream.skip_50x9bh$ = skip_0;
  package$stream.skipToAlign_50x9bh$ = skipToAlign;
  package$stream.truncate_g5ykjz$ = truncate;
  package$stream.writeCharArray_le_vsk9dy$ = writeCharArray_le;
  package$stream.writeShortArray_le_axfcu2$ = writeShortArray_le;
  package$stream.writeIntArray_le_9396cn$ = writeIntArray_le;
  package$stream.writeLongArray_le_82d4bk$ = writeLongArray_le;
  package$stream.writeFloatArray_le_vsbrxi$ = writeFloatArray_le;
  package$stream.writeDoubleArray_le_k5yo8b$ = writeDoubleArray_le;
  package$stream.writeCharArray_be_vsk9dy$ = writeCharArray_be;
  package$stream.writeShortArray_be_axfcu2$ = writeShortArray_be;
  package$stream.writeIntArray_be_9396cn$ = writeIntArray_be;
  package$stream.writeLongArray_be_82d4bk$ = writeLongArray_be;
  package$stream.writeFloatArray_be_vsbrxi$ = writeFloatArray_be;
  package$stream.writeDoubleArray_be_k5yo8b$ = writeDoubleArray_be;
  package$stream.readUntil_q9c2ky$ = readUntil;
  package$stream.readLine_kt587k$ = readLine;
  package$stream.toAsyncInputStream_p2awyq$ = toAsyncInputStream_0;
  package$stream.toAsyncOutputStream_tjlpjf$ = toAsyncOutputStream_0;
  package$stream.FastByteArrayInputStream = FastByteArrayInputStream;
  Object.defineProperty(SyncProduceConsumerByteBuffer, 'Companion', {
    get: SyncProduceConsumerByteBuffer$Companion_getInstance
  });
  package$stream.SyncProduceConsumerByteBuffer = SyncProduceConsumerByteBuffer;
  package$stream.SyncInputStream = SyncInputStream;
  package$stream.SyncOutputStream = SyncOutputStream;
  package$stream.SyncLengthStream = SyncLengthStream;
  package$stream.SyncRAInputStream = SyncRAInputStream;
  package$stream.SyncRAOutputStream = SyncRAOutputStream;
  package$stream.SyncStreamBase = SyncStreamBase;
  package$stream.SyncStream = SyncStream;
  package$stream.keepPosition_1v0ofm$ = keepPosition;
  package$stream.SliceSyncStreamBase = SliceSyncStreamBase;
  package$stream.FillSyncStreamBase = FillSyncStreamBase;
  package$stream.FillSyncStream_6svq3l$ = FillSyncStream;
  package$stream.MemorySyncStream_fqrh44$ = MemorySyncStream;
  package$stream.MemorySyncStream_r6iki3$ = MemorySyncStream_0;
  var package$util = package$korio.util || (package$korio.util = {});
  package$util.ByteArrayBuffer_init_za3lpa$ = ByteArrayBuffer_init;
  package$stream.MemorySyncStreamToByteArray_l6bp58$ = MemorySyncStreamToByteArray;
  package$stream.get_hasLength_ucmi9i$ = get_hasLength;
  package$stream.get_hasAvailable_ucmi9i$ = get_hasAvailable;
  package$stream.toByteArray_ucmi9i$ = toByteArray_0;
  package$stream.MemorySyncStreamBase_init_za3lpa$ = MemorySyncStreamBase_init;
  package$stream.MemorySyncStreamBase = MemorySyncStreamBase;
  package$stream.sliceWithStart_gezhyr$ = sliceWithStart_0;
  package$stream.slice_ucmi9i$ = slice_3;
  package$stream.slice_i2r7m7$ = slice_4;
  package$stream.slice_50v2io$ = slice_5;
  package$stream.sliceWithBounds_1r8368$ = sliceWithBounds_0;
  package$stream.sliceWithSize_1r8368$ = sliceWithSize_0;
  package$stream.readSlice_gezhyr$ = readSlice_0;
  package$stream.readStream_hsu5ns$ = readStream_1;
  package$stream.readStream_gezhyr$ = readStream_2;
  package$stream.readStringz_4zsegu$ = readStringz_1;
  package$stream.readStringz_6ey4ts$ = readStringz_2;
  package$stream.readString_6ey4ts$ = readString_0;
  package$stream.writeString_61lhbb$ = writeString_0;
  package$stream.readExact_hz4ta6$ = readExact_0;
  package$stream.read_1fivb2$ = read_1;
  package$stream.read_fkut86$ = read_2;
  package$stream.readBytesExact_xpzb7k$ = readBytesExact_0;
  package$stream.writeStringz_61lhbb$ = writeStringz_1;
  package$stream.writeStringz_5iah4l$ = writeStringz_2;
  package$stream.readBytes_xpzb7k$ = readBytes_0;
  package$stream.writeBytes_o1e1if$ = writeBytes_1;
  package$stream.writeBytes_sudxfy$ = writeBytes_2;
  Object.defineProperty(package$stream, 'smallTemp', {
    get: get_smallTemp
  });
  package$stream.read_p2awyq$ = read_3;
  package$stream.get_eof_ucmi9i$ = get_eof;
  package$stream.fastReadU8_p2awyq$ = fastReadU8;
  package$stream.fastReadS8_p2awyq$ = fastReadS8;
  package$stream.readU8_p2awyq$ = readU8_0;
  package$stream.readS8_p2awyq$ = readS8_0;
  package$stream.readU16_le_p2awyq$ = readU16_le_0;
  package$stream.readU24_le_p2awyq$ = readU24_le_0;
  package$stream.readU32_le_p2awyq$ = readU32_le_0;
  package$stream.readS16_le_p2awyq$ = readS16_le_0;
  package$stream.readS24_le_p2awyq$ = readS24_le_0;
  package$stream.readS32_le_p2awyq$ = readS32_le_0;
  package$stream.readS64_le_p2awyq$ = readS64_le_0;
  package$stream.readF32_le_p2awyq$ = readF32_le_0;
  package$stream.readF64_le_p2awyq$ = readF64_le_0;
  package$stream.readU16_be_p2awyq$ = readU16_be_0;
  package$stream.readU24_be_p2awyq$ = readU24_be_0;
  package$stream.readU32_be_p2awyq$ = readU32_be_0;
  package$stream.readS16_be_p2awyq$ = readS16_be_0;
  package$stream.readS24_be_p2awyq$ = readS24_be_0;
  package$stream.readS32_be_p2awyq$ = readS32_be_0;
  package$stream.readS64_be_p2awyq$ = readS64_be_0;
  package$stream.readF32_be_p2awyq$ = readF32_be_0;
  package$stream.readF64_be_p2awyq$ = readF64_be_0;
  package$stream.readAvailable_ucmi9i$ = readAvailable_0;
  package$stream.readAll_ucmi9i$ = readAll_0;
  package$stream.readUByteArray_xpzb7k$ = readUByteArray_0;
  package$stream.readShortArray_le_xpzb7k$ = readShortArray_le_0;
  package$stream.readShortArray_be_xpzb7k$ = readShortArray_be_0;
  package$stream.readCharArray_le_xpzb7k$ = readCharArray_le_0;
  package$stream.readCharArray_be_xpzb7k$ = readCharArray_be_0;
  package$stream.readIntArray_le_xpzb7k$ = readIntArray_le_0;
  package$stream.readIntArray_be_xpzb7k$ = readIntArray_be_0;
  package$stream.readLongArray_le_xpzb7k$ = readLongArray_le_0;
  package$stream.readLongArray_be_xpzb7k$ = readLongArray_be_0;
  package$stream.readFloatArray_le_xpzb7k$ = readFloatArray_le_0;
  package$stream.readFloatArray_be_xpzb7k$ = readFloatArray_be_0;
  package$stream.readDoubleArray_le_xpzb7k$ = readDoubleArray_le_0;
  package$stream.readDoubleArray_be_xpzb7k$ = readDoubleArray_be_0;
  package$stream.write8_n5df9z$ = write8_0;
  package$stream.write16_le_n5df9z$ = write16_le_0;
  package$stream.write24_le_n5df9z$ = write24_le_0;
  package$stream.write32_le_n5df9z$ = write32_le_1;
  package$stream.write32_le_7bhjh0$ = write32_le_2;
  package$stream.write64_le_7bhjh0$ = write64_le_0;
  package$stream.writeF32_le_dpexvo$ = writeF32_le_0;
  package$stream.writeF64_le_27561j$ = writeF64_le_0;
  package$stream.write16_be_n5df9z$ = write16_be_0;
  package$stream.write24_be_n5df9z$ = write24_be_0;
  package$stream.write32_be_n5df9z$ = write32_be_1;
  package$stream.write32_be_7bhjh0$ = write32_be_2;
  package$stream.write64_be_7bhjh0$ = write64_be_0;
  package$stream.writeF32_be_dpexvo$ = writeF32_be_0;
  package$stream.writeF64_be_27561j$ = writeF64_be_0;
  package$stream.toSyncStream_wrqxjw$ = toSyncStream;
  package$stream.openSync_m1iwyb$ = openSync;
  package$stream.openAsync_m1iwyb$ = openAsync;
  package$stream.openAsync_7jlb4b$ = openAsync_0;
  package$stream.writeStream_cyjt5w$ = writeStream_0;
  package$stream.copyTo_y2f6oo$ = copyTo_0;
  package$stream.writeToAlign_acdave$ = writeToAlign_0;
  package$stream.skip_hsu5ns$ = skip_1;
  package$stream.skipToAlign_hsu5ns$ = skipToAlign_0;
  package$stream.truncate_ucmi9i$ = truncate_0;
  package$stream.writeCharArray_le_zattpx$ = writeCharArray_le_0;
  package$stream.writeShortArray_le_93fq7f$ = writeShortArray_le_0;
  package$stream.writeIntArray_le_4munlu$ = writeIntArray_le_0;
  package$stream.writeLongArray_le_c0336t$ = writeLongArray_le_0;
  package$stream.writeFloatArray_le_j7x705$ = writeFloatArray_le_0;
  package$stream.writeDoubleArray_le_wbwi8g$ = writeDoubleArray_le_0;
  package$stream.writeCharArray_be_zattpx$ = writeCharArray_be_0;
  package$stream.writeShortArray_be_93fq7f$ = writeShortArray_be_0;
  package$stream.writeIntArray_be_4munlu$ = writeIntArray_be_0;
  package$stream.writeLongArray_be_c0336t$ = writeLongArray_be_0;
  package$stream.writeFloatArray_be_j7x705$ = writeFloatArray_be_0;
  package$stream.writeDoubleArray_be_wbwi8g$ = writeDoubleArray_be_0;
  package$stream.readU_VL_p2awyq$ = readU_VL;
  package$stream.readS_VL_p2awyq$ = readS_VL;
  package$stream.writeU_VL_n5df9z$ = writeU_VL;
  package$stream.writeS_VL_n5df9z$ = writeS_VL;
  package$stream.writeStringVL_61lhbb$ = writeStringVL;
  package$stream.readStringVL_hpdasm$ = readStringVL;
  package$stream.readExactTo_hz4ta6$ = readExactTo;
  var package$text = package$korio.text || (package$korio.text = {});
  package$text.AsyncTextWriter = AsyncTextWriter;
  package$text.AsyncTextWriterContainer = AsyncTextWriterContainer;
  Object.defineProperty(SimplerDateFormat, 'Companion', {
    get: SimplerDateFormat$Companion_getInstance
  });
  var package$time = package$korio.time || (package$korio.time = {});
  package$time.SimplerDateFormat = SimplerDateFormat;
  Object.defineProperty(TimeSpan, 'Companion', {
    get: TimeSpan$Companion_getInstance
  });
  package$time.TimeSpan = TimeSpan;
  package$time.get_milliseconds_rcaex3$ = get_milliseconds;
  package$time.get_seconds_rcaex3$ = get_seconds;
  Object.defineProperty(package$time, 'TimeProvider', {
    get: TimeProvider_getInstance
  });
  var package$typedarray = package$korio.typedarray || (package$korio.typedarray = {});
  package$typedarray.copyRangeTo_4ob4q9$ = copyRangeTo;
  package$typedarray.copyRangeTo_s7t09n$ = copyRangeTo_0;
  package$typedarray.copyRangeTo_boa5ab$ = copyRangeTo_1;
  package$typedarray.copyRangeTo_4axpaz$ = copyRangeTo_2;
  package$typedarray.copyRangeTo_m9cn97$ = copyRangeTo_3;
  package$typedarray.copyRangeTo_a9djyz$ = copyRangeTo_4;
  package$typedarray.copyRangeTo_8yig63$ = copyRangeTo_5;
  package$typedarray.copyRangeTo_jek8pb$ = copyRangeTo_6;
  package$typedarray.fill_jfbbbd$ = fill;
  package$typedarray.fill_py0txo$ = fill_0;
  package$typedarray.fill_6mk3ue$ = fill_1;
  package$typedarray.fill_htcctw$ = fill_2;
  package$typedarray.fill_tpuxuu$ = fill_3;
  package$typedarray.fill_nwy378$ = fill_4;
  package$typedarray.fill_x4f2cq$ = fill_5;
  package$util.AsyncCache = AsyncCache;
  package$util.AsyncCacheItem = AsyncCacheItem;
  Object.defineProperty(AsyncCloseable, 'Companion', {
    get: AsyncCloseable$Companion_getInstance
  });
  package$util.AsyncCloseable = AsyncCloseable;
  AsyncInmemoryCache.Entry = AsyncInmemoryCache$Entry;
  package$util.AsyncInmemoryCache = AsyncInmemoryCache;
  package$util.AsyncInmemoryEntry = AsyncInmemoryEntry;
  Object.defineProperty(package$util, 'BYTES_EMPTY', {
    get: function () {
      return BYTES_EMPTY;
    }
  });
  Object.defineProperty(package$util, 'BYTES_TEMP_SIZE', {
    get: function () {
      return BYTES_TEMP_SIZE;
    }
  });
  Object.defineProperty(package$util, 'BYTES_TEMP', {
    get: get_BYTES_TEMP
  });
  package$util.ByteArrayBuffer = ByteArrayBuffer;
  package$util.set_ietg8x$ = set;
  package$util.set_2iihii$ = set_0;
  package$util.getu_mrm5p$ = getu;
  package$util.join_q9e4xk$ = join;
  package$util.get_hexString_964n91$ = get_hexString;
  package$util.toUtf8String_964n91$ = toUtf8String;
  package$util.toHexString_964n91$ = toHexString;
  package$util.toHexStringLower_964n91$ = toHexStringLower;
  package$util.toHexStringUpper_964n91$ = toHexStringUpper;
  package$util.indexOfElse_yp3gck$ = indexOfElse;
  package$util.indexOf_2icb7a$ = indexOf_2;
  package$util.fromHexString_pdl1vz$ = fromHexString;
  package$util.fromHexStringIgnoreSpaces_pdl1vz$ = fromHexStringIgnoreSpaces;
  package$util.fromHexChunks_d2950k$ = fromHexChunks;
  Object.defineProperty(ByteArraySlice, 'Companion', {
    get: ByteArraySlice$Companion_getInstance
  });
  package$util.ByteArraySlice = ByteArraySlice;
  package$util.toByteArraySlice_964n91$ = toByteArraySlice;
  package$util.contains_ndt7zj$ = contains_1;
  package$util.indexOf_ndt7zj$ = indexOf_3;
  Cancellable.Listener = Cancellable$Listener;
  Object.defineProperty(Cancellable, 'Companion', {
    get: Cancellable$Companion_getInstance
  });
  package$util.Cancellable = Cancellable;
  package$util.cancel_p7p92l$ = cancel;
  package$util.cancellable_as34ue$ = cancellable;
  package$util.close_n2ytw$ = close;
  package$util.closeable_n2ytw$ = closeable_0;
  package$util.cancellable_6257sj$ = cancellable_0;
  package$util.closeable_2re4uq$ = closeable_1;
  package$util.isDigit_myv2d0$ = isDigit;
  package$util.isLetter_myv2d0$ = isLetter;
  package$util.isLetterOrDigit_myv2d0$ = isLetterOrDigit;
  package$util.isLetterOrUnderscore_myv2d0$ = isLetterOrUnderscore;
  package$util.isLetterDigitOrUnderscore_myv2d0$ = isLetterDigitOrUnderscore;
  package$util.isLetterOrDigitOrDollar_myv2d0$ = isLetterOrDigitOrDollar;
  package$util.get_isNumeric_myv2d0$ = get_isNumeric;
  package$util.isPrintable_myv2d0$ = isPrintable;
  package$util.compareToChain_ssq1th$ = compareToChain;
  Computed.WithParent = Computed$WithParent;
  package$util.Computed = Computed;
  Extra.Mixin = Extra$Mixin;
  Extra.Property = Extra$Property;
  Extra.PropertyThis = Extra$PropertyThis;
  package$util.Extra = Extra;
  package$util.extraProperty = extraProperty;
  Object.defineProperty(package$util, 'INDENTS', {
    get: INDENTS_getInstance
  });
  Indenter$Action.Text = Indenter$Action$Text;
  Indenter$Action.Marker = Indenter$Action$Marker;
  Indenter$Action.Inline = Indenter$Action$Inline;
  Indenter$Action.Line = Indenter$Action$Line;
  Indenter$Action.LineDeferred = Indenter$Action$LineDeferred;
  Object.defineProperty(Indenter$Action, 'Indent', {
    get: Indenter$Action$Indent_getInstance
  });
  Object.defineProperty(Indenter$Action, 'Unindent', {
    get: Indenter$Action$Unindent_getInstance
  });
  Indenter.Action = Indenter$Action;
  Object.defineProperty(Indenter, 'Companion', {
    get: Indenter$Companion_getInstance
  });
  package$util.Indenter = Indenter;
  package$util.nonNullMap_96jf0l$ = nonNullMap;
  package$util.ListReader = ListReader;
  package$util.flip_go3l1a$ = flip;
  package$util.toTreeMap_awek33$ = toTreeMap;
  package$util.toCaseInsensitiveTreeMap_yrl0k6$ = toCaseInsensitiveTreeMap;
  package$util.CaseInsensitiveHashMap = CaseInsensitiveHashMap;
  package$util.mask_s8ev3n$ = mask;
  package$util.mask_mts6qi$ = mask_0;
  package$util.toUInt_s8ev3n$ = toUInt;
  package$util.getBits_e4yvb3$ = getBits;
  package$util.extract_e4yvb3$ = extract;
  package$util.extract8_dqglrj$ = extract8;
  package$util.extract_dqglrj$ = extract_0;
  package$util.extractScaled_4684dr$ = extractScaled;
  package$util.extractScaledf01_e4yvb3$ = extractScaledf01;
  package$util.extractScaledFF_e4yvb3$ = extractScaledFF;
  package$util.extractScaledFFDefault_4684dr$ = extractScaledFFDefault;
  package$util.insert_4684dr$ = insert;
  package$util.insert8_e4yvb3$ = insert8;
  package$util.insert_kvkj6u$ = insert_0;
  package$util.insertScaled_oxkt1b$ = insertScaled;
  package$util.insertScaledFF_4684dr$ = insertScaledFF;
  package$util.nextAlignedTo_dqglrj$ = nextAlignedTo;
  package$util.nextAlignedTo_2p08ub$ = nextAlignedTo_0;
  package$util.clamp_e4yvb3$ = clamp;
  package$util.clamp_nig4hr$ = clamp_0;
  package$util.clamp_ekzx8g$ = clamp_1;
  package$util.toIntSafe_mts6qi$ = toIntSafe;
  package$util.toIntClamp_jfhjuu$ = toIntClamp;
  package$util.toUintClamp_jfhjuu$ = toUintClamp;
  package$util.toNumber_pdl1vz$ = toNumber;
  package$util.toUnsigned_mz3mee$ = toUnsigned;
  package$util.toUnsigned_s8ev3n$ = toUnsigned_0;
  package$util.signExtend_dqglrj$ = signExtend;
  package$util.signExtend_if0zpk$ = signExtend_0;
  package$util.get_niceStr_81szk$ = get_niceStr;
  package$util.get_niceStr_yrwdxr$ = get_niceStr_0;
  package$util.umod_dqglrj$ = umod;
  package$util.convertRange_legt9$ = convertRange;
  package$util.convertRangeClamped_legt9$ = convertRangeClamped;
  package$util.convertRange_dvkv0a$ = convertRange_0;
  package$util.toIntCeil_yrwdxr$ = toIntCeil;
  package$util.toIntFloor_yrwdxr$ = toIntFloor;
  package$util.toIntRound_yrwdxr$ = toIntRound;
  package$util.get_isOdd_s8ev3n$ = get_isOdd;
  package$util.get_isEven_s8ev3n$ = get_isEven;
  package$util.toString_if0zpk$ = toString_0;
  package$util.toString_dqglrj$ = toString_1;
  package$util.Once = Once;
  package$util.Pointer = Pointer;
  package$util.Pool_init_xsjjga$ = Pool_init;
  package$util.Pool = Pool;
  Object.defineProperty(package$util, 'LONG_ZERO_TO_MAX_RANGE', {
    get: function () {
      return LONG_ZERO_TO_MAX_RANGE;
    }
  });
  package$util.toLongRange_9tsm8a$ = toLongRange;
  package$util.readU8_mrm5p$ = readU8_1;
  package$util.readU16_le_mrm5p$ = readU16_le_1;
  package$util.readU24_le_mrm5p$ = readU24_le_1;
  package$util.readU32_le_mrm5p$ = readU32_le_1;
  package$util.readU16_be_mrm5p$ = readU16_be_1;
  package$util.readU24_be_mrm5p$ = readU24_be_1;
  package$util.readU32_be_mrm5p$ = readU32_be_1;
  package$util.readS8_mrm5p$ = readS8_1;
  package$util.readS16_le_mrm5p$ = readS16_le_1;
  package$util.readS24_le_mrm5p$ = readS24_le_1;
  package$util.readS32_le_mrm5p$ = readS32_le_1;
  package$util.readS64_le_mrm5p$ = readS64_le_1;
  package$util.readF32_le_mrm5p$ = readF32_le_1;
  package$util.readF64_le_mrm5p$ = readF64_le_1;
  package$util.readS16_be_mrm5p$ = readS16_be_1;
  package$util.readS24_be_mrm5p$ = readS24_be_1;
  package$util.readS32_be_mrm5p$ = readS32_be_1;
  package$util.readS64_be_mrm5p$ = readS64_be_1;
  package$util.readF32_be_mrm5p$ = readF32_be_1;
  package$util.readF64_be_mrm5p$ = readF64_be_1;
  package$util.readS16_LEBE_v6bsu2$ = readS16_LEBE;
  package$util.readS32_LEBE_v6bsu2$ = readS32_LEBE;
  package$util.readS64_LEBE_v6bsu2$ = readS64_LEBE;
  package$util.readF32_LEBE_v6bsu2$ = readF32_LEBE;
  package$util.readF64_LEBE_v6bsu2$ = readF64_LEBE;
  package$util.readByteArray_ietg8x$ = readByteArray;
  package$util.readShortArray_le_ietg8x$ = readShortArray_le_1;
  package$util.readCharArray_le_ietg8x$ = readCharArray_le_1;
  package$util.readIntArray_le_ietg8x$ = readIntArray_le_1;
  package$util.readLongArray_le_ietg8x$ = readLongArray_le_1;
  package$util.readFloatArray_le_ietg8x$ = readFloatArray_le_1;
  package$util.readDoubleArray_le_ietg8x$ = readDoubleArray_le_1;
  package$util.readShortArray_be_ietg8x$ = readShortArray_be_1;
  package$util.readCharArray_be_ietg8x$ = readCharArray_be_1;
  package$util.readIntArray_be_ietg8x$ = readIntArray_be_1;
  package$util.readLongArray_be_ietg8x$ = readLongArray_be_1;
  package$util.readFloatArray_be_ietg8x$ = readFloatArray_be_1;
  package$util.readDoubleArray_be_ietg8x$ = readDoubleArray_be_1;
  package$util.readStringz_h34x81$ = readStringz_3;
  package$util.readStringz_josu3n$ = readStringz_4;
  package$util.readString_h34x81$ = readString_1;
  package$util.RedirectField = RedirectField;
  package$util.RedirectMutableField = RedirectMutableField;
  package$util.RedirectMutableFieldGen = RedirectMutableFieldGen;
  package$util.redirectField_ky7ay8$ = redirectField;
  package$util.redirectField_w7kr7o$ = redirectField_0;
  package$util.redirectField_7kt5xd$ = redirectField_1;
  package$util.redirect_58ahrt$ = redirect;
  package$util.redirect_myrrmk$ = redirect_0;
  Object.defineProperty(package$util, 'OS', {
    get: OS_getInstance
  });
  Object.defineProperty(StrReader, 'Companion', {
    get: StrReader$Companion_getInstance
  });
  Object.defineProperty(StrReader$Literals, 'Companion', {
    get: StrReader$Literals$Companion_getInstance
  });
  StrReader.Literals = StrReader$Literals;
  Object.defineProperty(StrReader$TRange, 'Companion', {
    get: StrReader$TRange$Companion_getInstance
  });
  StrReader.TRange = StrReader$TRange;
  package$util.StrReader = StrReader;
  package$util.readStringLit_834ram$ = readStringLit;
  package$util.toBytez_s1p75v$ = toBytez;
  package$util.toBytez_7jlb4b$ = toBytez_0;
  package$util.indexOfOrNull_46w6ck$ = indexOfOrNull;
  package$util.lastIndexOfOrNull_46w6ck$ = lastIndexOfOrNull;
  package$util.splitInChunks_6ic1pp$ = splitInChunks;
  package$util.substr_6ic1pp$ = substr;
  package$util.substr_qgyqat$ = substr_0;
  package$util.transform_37eajw$ = transform;
  package$util.toBetterString_mzud1t$ = toBetterString;
  Object.defineProperty(TimeProvider_0, 'Companion', {
    get: TimeProvider$Companion_getInstance
  });
  package$util.TimeProvider = TimeProvider_0;
  package$util.UByteArray_init_za3lpa$ = UByteArray_init;
  package$util.UByteArray = UByteArray;
  Object.defineProperty(UByteArraySlice, 'Companion', {
    get: UByteArraySlice$Companion_getInstance
  });
  package$util.UByteArraySlice = UByteArraySlice;
  package$util.toUByteArraySlice_964n91$ = toUByteArraySlice;
  package$util.toUnsigned_j9nage$ = toUnsigned_1;
  package$util.write8_ietg8x$ = write8_1;
  package$util.write8_2iihii$ = write8_2;
  package$util.write16_LEBE_vahp5y$ = write16_LEBE;
  package$util.write32_LEBE_vahp5y$ = write32_LEBE;
  package$util.write64_LEBE_zb9jod$ = write64_LEBE;
  package$util.writeF32_LEBE_wimvbt$ = writeF32_LEBE;
  package$util.writeF64_LEBE_nq0ryw$ = writeF64_LEBE;
  package$util.write16_le_ietg8x$ = write16_le_1;
  package$util.write24_le_ietg8x$ = write24_le_1;
  package$util.write32_le_ietg8x$ = write32_le_3;
  package$util.write32_le_2iihii$ = write32_le_4;
  package$util.write64_le_2iihii$ = write64_le_1;
  package$util.writeF32_le_6tgd4e$ = writeF32_le_1;
  package$util.writeF64_le_2mkvlt$ = writeF64_le_1;
  package$util.write16_be_ietg8x$ = write16_be_1;
  package$util.write24_be_ietg8x$ = write24_be_1;
  package$util.write32_be_ietg8x$ = write32_be_3;
  package$util.write32_be_2iihii$ = write32_be_4;
  package$util.write64_be_2iihii$ = write64_be_1;
  package$util.writeF32_be_6tgd4e$ = writeF32_be_1;
  package$util.writeF64_be_2mkvlt$ = writeF64_be_1;
  package$util.writeBytes_cinhdp$ = writeBytes_3;
  package$util.writeBytes_5c6zpl$ = writeBytes_4;
  package$util.writeArray_le_ns39l7$ = writeArray_le;
  package$util.writeArray_le_744o0l$ = writeArray_le_0;
  package$util.writeArray_le_ir5l5k$ = writeArray_le_1;
  package$util.writeArray_le_nitnbj$ = writeArray_le_2;
  package$util.writeArray_le_l7896z$ = writeArray_le_3;
  package$util.writeArray_le_t2mdne$ = writeArray_le_4;
  package$util.writeArray_be_ns39l7$ = writeArray_be;
  package$util.writeArray_be_744o0l$ = writeArray_be_0;
  package$util.writeArray_be_ir5l5k$ = writeArray_be_1;
  package$util.writeArray_be_nitnbj$ = writeArray_be_2;
  package$util.writeArray_be_l7896z$ = writeArray_be_3;
  package$util.writeArray_be_t2mdne$ = writeArray_be_4;
  package$util.escape_pdl1vz$ = escape;
  package$util.uescape_pdl1vz$ = uescape;
  package$util.unescape_pdl1vz$ = unescape;
  package$util.uquote_5cw0du$ = uquote;
  package$util.quote_5cw0du$ = quote;
  package$util.isQuoted_pdl1vz$ = isQuoted;
  package$util.unquote_pdl1vz$ = unquote;
  package$util.ExpectedException = ExpectedException;
  package$util.Generator = Generator;
  package$util.generateSync_96i12d$ = generateSync;
  package$util.generate_96i12d$ = generate;
  package$util.htmlspecialchars_pdl1vz$ = htmlspecialchars;
  package$util.mapWhile_sj71nh$ = mapWhile;
  var package$vfs = package$korio.vfs || (package$korio.vfs = {});
  package$vfs.writeToFile_m1iwyb$ = writeToFile;
  package$vfs.writeToFile_sgh2zz$ = writeToFile_0;
  package$vfs.IsoVfs_phxig4$ = IsoVfs;
  package$vfs.IsoVfs_axnxby$ = IsoVfs_0;
  package$vfs.openAsIso_g5ykjz$ = openAsIso;
  package$vfs.openAsIso_93ma6j$ = openAsIso_0;
  ISO.prototype.IsoReader = ISO$IsoReader;
  ISO.prototype.IsoFile = ISO$IsoFile;
  ISO.prototype.PrimaryVolumeDescriptor_init_39qel5$ = ISO$ISO$PrimaryVolumeDescriptor_init;
  ISO.prototype.PrimaryVolumeDescriptor = ISO$PrimaryVolumeDescriptor;
  Object.defineProperty(ISO$VolumeDescriptorHeader$TypeEnum, 'BootRecord', {
    get: ISO$VolumeDescriptorHeader$TypeEnum$BootRecord_getInstance
  });
  Object.defineProperty(ISO$VolumeDescriptorHeader$TypeEnum, 'VolumePartitionSetTerminator', {
    get: ISO$VolumeDescriptorHeader$TypeEnum$VolumePartitionSetTerminator_getInstance
  });
  Object.defineProperty(ISO$VolumeDescriptorHeader$TypeEnum, 'PrimaryVolumeDescriptor', {
    get: ISO$VolumeDescriptorHeader$TypeEnum$PrimaryVolumeDescriptor_getInstance
  });
  Object.defineProperty(ISO$VolumeDescriptorHeader$TypeEnum, 'SupplementaryVolumeDescriptor', {
    get: ISO$VolumeDescriptorHeader$TypeEnum$SupplementaryVolumeDescriptor_getInstance
  });
  Object.defineProperty(ISO$VolumeDescriptorHeader$TypeEnum, 'VolumePartitionDescriptor', {
    get: ISO$VolumeDescriptorHeader$TypeEnum$VolumePartitionDescriptor_getInstance
  });
  Object.defineProperty(ISO$VolumeDescriptorHeader$TypeEnum, 'Companion', {
    get: ISO$VolumeDescriptorHeader$TypeEnum$Companion_getInstance
  });
  ISO$VolumeDescriptorHeader.TypeEnum = ISO$VolumeDescriptorHeader$TypeEnum;
  ISO.prototype.VolumeDescriptorHeader_init_39qel5$ = ISO$ISO$VolumeDescriptorHeader_init;
  ISO.prototype.VolumeDescriptorHeader = ISO$VolumeDescriptorHeader;
  ISO.prototype.IsoDate_init_39qel5$ = ISO$ISO$IsoDate_init;
  ISO.prototype.IsoDate = ISO$IsoDate;
  ISO.prototype.DateStruct_init_39qel5$ = ISO$ISO$DateStruct_init;
  ISO.prototype.DateStruct = ISO$DateStruct;
  Object.defineProperty(ISO$DirectoryRecord, 'Companion', {
    get: ISO$DirectoryRecord$Companion_getInstance
  });
  ISO.prototype.DirectoryRecord = ISO$DirectoryRecord;
  Object.defineProperty(package$vfs, 'ISO', {
    get: ISO_getInstance
  });
  package$vfs.JailVfs_phxig4$ = JailVfs;
  Object.defineProperty(LocalVfs, 'Companion', {
    get: LocalVfs$Companion_getInstance
  });
  package$vfs.LocalVfs = LocalVfs;
  package$vfs.LocalVfs_61zpoe$ = LocalVfs_0;
  package$vfs.TempVfs = TempVfs;
  package$vfs.JailedLocalVfs_61zpoe$ = JailedLocalVfs;
  package$vfs.CacheVfs = CacheVfs;
  package$vfs.ExternalStorageVfs = ExternalStorageVfs;
  package$vfs.UserHomeVfs = UserHomeVfs;
  package$vfs.LocalVfsProvider = LocalVfsProvider;
  package$vfs.LogVfs = LogVfs;
  package$vfs.log_93ma6j$ = log;
  package$vfs.MemoryVfs_r2g07k$ = MemoryVfs;
  package$vfs.MemoryVfsMix_t3okmp$ = MemoryVfsMix;
  package$vfs.MemoryVfsMix_pp8hmc$ = MemoryVfsMix_0;
  package$vfs.MergedVfs = MergedVfs;
  Object.defineProperty(MimeType, 'Companion', {
    get: MimeType$Companion_getInstance
  });
  package$vfs.MimeType = MimeType;
  package$vfs.mimeType_93ma6j$ = mimeType;
  package$vfs.MountableVfs_8iqkw1$ = MountableVfs;
  package$vfs.Mountable = Mountable;
  NodeVfs.Node = NodeVfs$Node;
  package$vfs.NodeVfs = NodeVfs;
  package$vfs.PathInfo = PathInfo;
  package$vfs.UrlVfs_61zpoe$ = UrlVfs;
  UrlVfs_0.HttpHeaders = UrlVfs$HttpHeaders;
  package$vfs.UrlVfs = UrlVfs_0;
  Vfs.Attribute = Vfs$Attribute;
  Vfs.Proxy = Vfs$Proxy;
  Vfs.Decorator = Vfs$Decorator;
  package$vfs.Vfs = Vfs;
  package$vfs.AsyncFileLoader = AsyncFileLoader;
  package$vfs.VfsOpenMode = VfsOpenMode;
  package$vfs.VfsFile = VfsFile;
  Object.defineProperty(VfsFileEvent$Kind, 'DELETED', {
    get: VfsFileEvent$Kind$DELETED_getInstance
  });
  Object.defineProperty(VfsFileEvent$Kind, 'MODIFIED', {
    get: VfsFileEvent$Kind$MODIFIED_getInstance
  });
  Object.defineProperty(VfsFileEvent$Kind, 'CREATED', {
    get: VfsFileEvent$Kind$CREATED_getInstance
  });
  Object.defineProperty(VfsFileEvent$Kind, 'RENAMED', {
    get: VfsFileEvent$Kind$RENAMED_getInstance
  });
  VfsFileEvent.Kind = VfsFileEvent$Kind;
  package$vfs.VfsFileEvent = VfsFileEvent;
  package$vfs.VfsNamed = VfsNamed;
  Object.defineProperty(VfsOpenMode, 'READ', {
    get: VfsOpenMode$READ_getInstance
  });
  Object.defineProperty(VfsOpenMode, 'WRITE', {
    get: VfsOpenMode$WRITE_getInstance
  });
  Object.defineProperty(VfsOpenMode, 'APPEND', {
    get: VfsOpenMode$APPEND_getInstance
  });
  Object.defineProperty(VfsOpenMode, 'CREATE_OR_TRUNCATE', {
    get: VfsOpenMode$CREATE_OR_TRUNCATE_getInstance
  });
  Object.defineProperty(VfsOpenMode, 'CREATE', {
    get: VfsOpenMode$CREATE_getInstance
  });
  Object.defineProperty(VfsOpenMode, 'CREATE_NEW', {
    get: VfsOpenMode$CREATE_NEW_getInstance
  });
  Object.defineProperty(VfsOpenMode, 'Companion', {
    get: VfsOpenMode$Companion_getInstance
  });
  package$vfs.VfsProcessHandler = VfsProcessHandler;
  package$vfs.VfsProcessException = VfsProcessException;
  package$vfs.VfsSpecialReader = VfsSpecialReader;
  Object.defineProperty(package$vfs, 'vfsSpecialReadersMap', {
    get: function () {
      return vfsSpecialReadersMap;
    }
  });
  package$vfs.registerVfsSpecialReader_89in50$ = registerVfsSpecialReader;
  package$vfs.register_rxeamr$ = register;
  package$vfs.VfsStat = VfsStat;
  package$vfs.get_createDate_9ayeyb$ = get_createDate;
  package$vfs.get_modifiedDate_9ayeyb$ = get_modifiedDate;
  package$vfs.get_lastAccessDate_9ayeyb$ = get_lastAccessDate;
  Object.defineProperty(package$vfs, 'VfsUtil', {
    get: VfsUtil_getInstance
  });
  package$vfs.treeCreateZip_93ma6j$ = treeCreateZip;
  package$vfs.treeCreateZipTo_whpkrx$ = treeCreateZipTo;
  package$vfs.ZipVfs_960o6l$ = ZipVfs;
  package$vfs.openAsZip_93ma6j$ = openAsZip;
  package$vfs.openAsZip_g5ykjz$ = openAsZip_0;
  package$vfs.InflateAsyncStream = InflateAsyncStream;
  package$async.Thread_sleep_s8cxhz$ = Thread_sleep;
  Object.defineProperty(package$async, 'eventLoopFactoryDefaultImpl', {
    get: function () {
      return eventLoopFactoryDefaultImpl;
    }
  });
  package$async.EventLoopFactoryJs = EventLoopFactoryJs;
  package$async.EventLoopJs = EventLoopJs;
  package$async.executeInWorker_lnyleu$ = executeInWorker;
  Object.defineProperty(package$compression, 'Compression', {
    get: Compression_getInstance
  });
  package$compression.Inflater = Inflater;
  Object.defineProperty(package$compression, 'SyncCompression', {
    get: SyncCompression_getInstance
  });
  package$crypto.NativeCRC32 = NativeCRC32;
  package$crypto.SimplerMessageDigest = SimplerMessageDigest;
  package$crypto.SimplerMac = SimplerMac;
  Object.defineProperty(package$korio, 'global', {
    get: function () {
      return global_0;
    }
  });
  Object.defineProperty(package$inject, 'CreateAnnotation', {
    get: CreateAnnotation_getInstance
  });
  Object.defineProperty(package$lang, 'Debugger', {
    get: Debugger_getInstance
  });
  Object.defineProperty(package$lang, 'NativeConsole', {
    get: NativeConsole_getInstance
  });
  package$lang.Synchronized = Synchronized;
  package$lang.JvmField = JvmField;
  package$lang.JvmStatic = JvmStatic;
  package$lang.JvmOverloads = JvmOverloads;
  package$lang.Transient = Transient;
  package$lang.IOException = IOException;
  package$lang.EOFException = EOFException;
  package$lang.FileNotFoundException = FileNotFoundException;
  package$lang.RuntimeException = RuntimeException_0;
  package$lang.IllegalStateException = IllegalStateException_0;
  package$lang.CancellationException = CancellationException;
  Object.defineProperty(FastMemory, 'Companion', {
    get: FastMemory$Companion_getInstance
  });
  var package$mem = package$korio.mem || (package$korio.mem = {});
  package$mem.FastMemory = FastMemory;
  Object.defineProperty(package$net, 'asyncSocketFactory', {
    get: get_asyncSocketFactory
  });
  Object.defineProperty(package$http, 'DefaultHttpFactoryFactory', {
    get: DefaultHttpFactoryFactory_getInstance
  });
  package$http.HttpSeverNodeJs = HttpSeverNodeJs;
  package$http.jsRequire_61zpoe$ = jsRequire;
  package$http.HttpClientNodeJs = HttpClientNodeJs;
  package$http.HttpClientBrowserJs = HttpClientBrowserJs;
  Object.defineProperty(package$ws, 'websockets', {
    get: get_websockets
  });
  package$ws.JsWebSocketClientFactory = JsWebSocketClientFactory;
  package$ws.JsWebSocketClient = JsWebSocketClient;
  Object.defineProperty(package$time, 'STimeProvider', {
    get: STimeProvider_getInstance
  });
  Object.defineProperty(UTCDate, 'Companion', {
    get: UTCDate$Companion_getInstance
  });
  package$time.UTCDate = UTCDate;
  Object.defineProperty(package$typedarray, 'Arrays', {
    get: Arrays_getInstance
  });
  Object.defineProperty(package$util, 'SOS', {
    get: SOS_getInstance
  });
  Object.defineProperty(package$vfs, 'File_separatorChar', {
    get: function () {
      return File_separatorChar;
    }
  });
  package$vfs.JsStat = JsStat;
  Object.defineProperty(package$vfs, 'ResourcesVfs', {
    get: get_ResourcesVfs
  });
  Object.defineProperty(package$vfs, 'localVfsProvider', {
    get: get_localVfsProvider
  });
  Object.defineProperty(package$vfs, 'tmpdir', {
    get: function () {
      return tmpdir;
    }
  });
  CancellableContinuation.prototype.cancel_tcv7n7$ = Cancellable.prototype.cancel_tcv7n7$;
  Promise.prototype.cancel_tcv7n7$ = Cancellable.prototype.cancel_tcv7n7$;
  ProduceConsumer.prototype.consume_4l50dc$ = Consumer.prototype.consume_4l50dc$;
  AsyncProducerStream.prototype.write_mj6st8$ = AsyncOutputStream.prototype.write_mj6st8$;
  DynamicContextInstance.prototype.toBool_mzud1t$ = DynamicContext.prototype.toBool_mzud1t$;
  DynamicContextInstance.prototype.toByte_mzud1t$ = DynamicContext.prototype.toByte_mzud1t$;
  DynamicContextInstance.prototype.toChar_mzud1t$ = DynamicContext.prototype.toChar_mzud1t$;
  DynamicContextInstance.prototype.toShort_mzud1t$ = DynamicContext.prototype.toShort_mzud1t$;
  DynamicContextInstance.prototype.toInt_mzud1t$ = DynamicContext.prototype.toInt_mzud1t$;
  DynamicContextInstance.prototype.toLong_mzud1t$ = DynamicContext.prototype.toLong_mzud1t$;
  DynamicContextInstance.prototype.toFloat_mzud1t$ = DynamicContext.prototype.toFloat_mzud1t$;
  DynamicContextInstance.prototype.toDouble_mzud1t$ = DynamicContext.prototype.toDouble_mzud1t$;
  DynamicContextInstance.prototype.toNumber_mzud1t$ = DynamicContext.prototype.toNumber_mzud1t$;
  DynamicContextInstance.prototype.toDynamicList_mzud1t$ = DynamicContext.prototype.toDynamicList_mzud1t$;
  DynamicContextInstance.prototype.toDynamicMap_mzud1t$ = DynamicContext.prototype.toDynamicMap_mzud1t$;
  DynamicContextInstance.prototype.get_uozw8h$ = DynamicContext.prototype.get_uozw8h$;
  FakeHttpClientEndpoint.prototype.request_v6tn8p$ = HttpClientEndpoint.prototype.request_v6tn8p$;
  endpoint$ObjectLiteral.prototype.request_v6tn8p$ = HttpClientEndpoint.prototype.request_v6tn8p$;
  HttpServer$Request.prototype.write_mj6st8$ = AsyncOutputStream.prototype.write_mj6st8$;
  ObjectMapper$TypeContext.prototype.toBool_mzud1t$ = DynamicContext.prototype.toBool_mzud1t$;
  ObjectMapper$TypeContext.prototype.toByte_mzud1t$ = DynamicContext.prototype.toByte_mzud1t$;
  ObjectMapper$TypeContext.prototype.toChar_mzud1t$ = DynamicContext.prototype.toChar_mzud1t$;
  ObjectMapper$TypeContext.prototype.toShort_mzud1t$ = DynamicContext.prototype.toShort_mzud1t$;
  ObjectMapper$TypeContext.prototype.toInt_mzud1t$ = DynamicContext.prototype.toInt_mzud1t$;
  ObjectMapper$TypeContext.prototype.toLong_mzud1t$ = DynamicContext.prototype.toLong_mzud1t$;
  ObjectMapper$TypeContext.prototype.toFloat_mzud1t$ = DynamicContext.prototype.toFloat_mzud1t$;
  ObjectMapper$TypeContext.prototype.toDouble_mzud1t$ = DynamicContext.prototype.toDouble_mzud1t$;
  ObjectMapper$TypeContext.prototype.toNumber_mzud1t$ = DynamicContext.prototype.toNumber_mzud1t$;
  ObjectMapper$TypeContext.prototype.toDynamicList_mzud1t$ = DynamicContext.prototype.toDynamicList_mzud1t$;
  ObjectMapper$TypeContext.prototype.toDynamicMap_mzud1t$ = DynamicContext.prototype.toDynamicMap_mzud1t$;
  ObjectMapper$TypeContext.prototype.get_uozw8h$ = DynamicContext.prototype.get_uozw8h$;
  AsyncProduceConsumerByteBuffer.prototype.write_mj6st8$ = AsyncOutputStream.prototype.write_mj6st8$;
  AsyncPositionLengthStream.prototype.setPosition_s8cxhz$ = AsyncPositionStream.prototype.setPosition_s8cxhz$;
  AsyncPositionLengthStream.prototype.getPosition = AsyncPositionStream.prototype.getPosition;
  AsyncPositionLengthStream.prototype.setLength_s8cxhz$ = AsyncLengthStream.prototype.setLength_s8cxhz$;
  AsyncPositionLengthStream.prototype.getLength = AsyncLengthStream.prototype.getLength;
  AsyncStream.prototype.write_mj6st8$ = AsyncOutputStream.prototype.write_mj6st8$;
  toAsyncOutputStream$ObjectLiteral.prototype.write_mj6st8$ = AsyncOutputStream.prototype.write_mj6st8$;
  Cancellable$Companion$invoke$ObjectLiteral.prototype.cancel_tcv7n7$ = Cancellable.prototype.cancel_tcv7n7$;
  tasksInProgress = new AtomicInteger(0);
  COROUTINE_SUSPENDED_0 = COROUTINE_SUSPENDED;
  formatRegex = Regex('%([-]?\\d+)(\\w)');
  _defaultHttpFactory = lazy(_defaultHttpFactory$lambda);
  Mapper = new ObjectMapper();
  smallTemp = new threadLocal(smallTemp$lambda);
  BYTES_EMPTY = new Int8Array([]);
  BYTES_TEMP_SIZE = 65536;
  BYTES_TEMP = new threadLocal(BYTES_TEMP$lambda);
  LONG_ZERO_TO_MAX_RANGE = Kotlin.Long.fromInt(0).rangeTo(new Kotlin.Long(-1, 2147483647));
  vfsSpecialReadersMap = lmapOf([]);
  eventLoopFactoryDefaultImpl = new EventLoopFactoryJs();
  global_0 = typeof global !== 'undefined' ? global : window;
  websockets = lazy(websockets$lambda);
  File_separatorChar = 47;
  tmpdir = '/tmp';
  Kotlin.defineModule('korio-js', _);
  return _;
}));
